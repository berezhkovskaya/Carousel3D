/**
 * \file GL2JNILib.java
 * \brief Linderdaum Engine JNI library for Android
 * \version 0.5.99c
 * \date 04/05/2011
 * \author Sergey Kosarevsky, 2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

package com.linderdaum.engine;

import android.util.Log;
import android.view.KeyEvent;
import android.app.Activity;
import android.app.WallpaperManager;
import android.content.Intent;
import android.content.ActivityNotFoundException;
import android.net.Uri;

import android.view.Display;
import android.view.HapticFeedbackConstants;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;


import java.io.*;

public class LinderdaumJNILib
{
	public static final String TAG = "LinderdaumGLView";

	static
	{
		System.loadLibrary( "LinderdaumEngine" );
	}

	public static final int SELECT_PICTURE_CALLBACK = 1;

	/* START AUTOGENERATED KEYS */

	public static final int LK_LBUTTON = 1;

	public static final int LK_0         = 48;
	public static final int LK_1         = 49;
	public static final int LK_2         = 50;
	public static final int LK_3         = 51;
	public static final int LK_4         = 52;
	public static final int LK_5         = 53;
	public static final int LK_6         = 54;
	public static final int LK_7         = 55;
	public static final int LK_8         = 56;
	public static final int LK_9         = 57;
	public static final int LK_A         = 65;
	public static final int LK_B         = 66;
	public static final int LK_C         = 67;
	public static final int LK_D         = 68;
	public static final int LK_E         = 69;
	public static final int LK_F         = 70;
	public static final int LK_G         = 71;
	public static final int LK_H         = 72;
	public static final int LK_I         = 73;
	public static final int LK_J         = 74;
	public static final int LK_K         = 75;
	public static final int LK_L         = 76;
	public static final int LK_M         = 77;
	public static final int LK_N         = 78;
	public static final int LK_O         = 79;
	public static final int LK_P         = 80;
	public static final int LK_Q         = 81;
	public static final int LK_R         = 82;
	public static final int LK_S         = 83;
	public static final int LK_T         = 84;
	public static final int LK_U         = 85;
	public static final int LK_V         = 86;
	public static final int LK_W         = 87;
	public static final int LK_X         = 88;
	public static final int LK_Y         = 89;
	public static final int LK_Z         = 90;
	public static final int LK_BACK      = 8;
	public static final int LK_TAB       = 9;
	public static final int LK_WHEELDOWN = 10;
	public static final int LK_RETURN    = 13;
	public static final int LK_LBUTTONDB = 14;
	public static final int LK_RBUTTONDB = 15;
	public static final int LK_SHIFT     = 0x10;
	public static final int LK_CONTROL   = 0x11;
	public static final int LK_MENU      = 0x12;
	public static final int LK_PAUSE     = 0x13;
	public static final int LK_ESCAPE    = 0x1B;
	public static final int LK_SPACE     = 0x20;
	public static final int LK_END       = 0x23;
	public static final int LK_HOME      = 0x24;
	public static final int LK_LEFT      = 0x25;
	public static final int LK_UP        = 0x26;
	public static final int LK_RIGHT     = 0x27;
	public static final int LK_DOWN      = 0x28;
	public static final int LK_INSERT    = 0x2D;
	public static final int LK_DELETE    = 0x2E;
	public static final int LK_COLON     = 186;
	public static final int LK_EQUAL     = 187;
	public static final int LK_COMMA     = 188;
	public static final int LK_UNDERLINE = 189;
	public static final int LK_DOT       = 190;
	public static final int LK_SLASH     = 191;
	public static final int LK_COMMA2    = 192;
	public static final int LK_RSLASH    = 220;
	public static final int LK_QUOTE     = 222;

	/* END OF AUTOGENERATED KEYS */

	public static int TranslateKey( int keyCode )
	{
//		Log.e( TAG, "TranslateKey: " + Integer.toString( keyCode ) );

		for(int i = 0 ; i < 26 ; i++)
			if ( keyCode == KeyEvent.KEYCODE_A + i ) { return LK_A + i; }

		for(int j = 0 ; j < 10 ; j++)
			if ( keyCode == KeyEvent.KEYCODE_0 + j ) { return LK_0 + j; }

		if ( keyCode == KeyEvent.KEYCODE_SPACE) { return LK_SPACE; }
		if ( keyCode == KeyEvent.KEYCODE_SLASH) { return LK_SLASH; } // '/'
		if ( keyCode == KeyEvent.KEYCODE_BACKSLASH) { return LK_RSLASH; } // '\'

		if ( keyCode == KeyEvent.KEYCODE_DEL) { return LK_BACK; }
		if ( keyCode == KeyEvent.KEYCODE_ENTER) { return LK_RETURN; }

		if ( keyCode == KeyEvent.KEYCODE_TAB ) { return LK_TAB; }

//		if ( keyCode == KeyEvent.KEYCODE_MENU ) { return LK_TAB; }

		if ( keyCode == KeyEvent.KEYCODE_ALT_LEFT ) { return LK_MENU; }

		if ( keyCode == KeyEvent.KEYCODE_ALT_LEFT ) { return LK_MENU; }
		if ( keyCode == KeyEvent.KEYCODE_ALT_RIGHT) { return LK_MENU; }
//		if ( keyCode == KeyEvent.KEYCODE_CTRL_LEFT ) { return LK_CONTROL; }
//		if ( keyCode == KeyEvent.KEYCODE_CTRL_RIGHT) { return LK_CONTROL; }

		if ( keyCode == KeyEvent.KEYCODE_BACK ) { return LK_ESCAPE; }

//		if ( keyCode == KeyEvent.KEYCODE_DPAD_CENTER ) { return LK_; }

		if ( keyCode == KeyEvent.KEYCODE_DPAD_DOWN ) { return LK_DOWN; }
		if ( keyCode == KeyEvent.KEYCODE_DPAD_LEFT ) { return LK_LEFT; }
		if ( keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) { return LK_RIGHT;}
		if ( keyCode == KeyEvent.KEYCODE_DPAD_UP   ) { return LK_UP;   }

		return 0;
	}

	public static native void step();
	public static native void SetDirs( String CacheDir, String ExternalDir );
	public static native void SurfaceChanged( int Width, int Height, int xDPI, int yDPI );
	public static native void SurfaceCreated();
	public static native void SetLocaleName( String LocaleName );
	public static native void SetAPKName( String APKName );
	public static native void SetKey( String KeyValue );
	public static native void SetCommandLine( String CommandLine );
	public static native void SendSync( int Evnt );
	public static native void SendAsync( int Evnt );
	public static void OpenURL( String Url )
	{
		try
		{
			Intent intent = new Intent( Intent.ACTION_VIEW );
			intent.setData( Uri.parse( Url ) );
			LinderdaumEngineActivity.m_LEngine.startActivity(intent);
		}
		catch ( ActivityNotFoundException e )
		{
			Log.e( TAG, "Unable to open URL: " + e );

			LinderdaumEngineActivity.m_LEngine.ShowMessageDialog( "Unable to open URL: " + Url );
		}
	}
	public static void SetWallpaper( String FileName )
	{
		Log.i( TAG, "SetWallpaper()" );

		try
		{
			Matrix Mat = new Matrix();

			Bitmap Source = BitmapFactory.decodeFile(FileName);

			Mat.postRotate(90);

			Display display = LinderdaumEngineActivity.m_LEngine.getWindowManager().getDefaultDisplay(); 

			int Width  = display.getWidth();
			int Height = display.getHeight();

			Bitmap Destination = Bitmap.createScaledBitmap( Source, Width, Height, true );

			Source = Bitmap.createBitmap( Destination, 0, 0, Destination.getWidth(), Destination.getHeight(), Mat, true );

			WallpaperManager.getInstance(LinderdaumEngineActivity.m_LEngine).setBitmap( Source );
		}
		catch ( Exception e )
		{
			Log.e( TAG, e.getMessage() );
		}
	}
	public static void OpenImageDialog()
	{
		Log.i( TAG, "OpenImageDialog()" );

		try
		{
			Intent intent = new Intent( Intent.ACTION_GET_CONTENT );
			intent.setType( "image/*" );
			LinderdaumEngineActivity.m_LEngine.startActivityForResult( intent, SELECT_PICTURE_CALLBACK );
		}
		catch ( ActivityNotFoundException e )
		{
			Log.e( TAG, "No gallery: " + e );

			LinderdaumEngineActivity.m_LEngine.ShowMessageDialog( "Your device has no gallery" );
		}
	}
	public static void EnableLinearAccelerometer(boolean Active)
	{
		Log.i( TAG, "EnableLinearAccelerometer()" );

		LinderdaumEngineActivity.m_LEngine.m_Sensors.EnableLinearAccelerometer( Active );
	}
	public static void EnableGyroscope(boolean Active)
	{
		Log.i( TAG, "EnableGyroscope()" );

		LinderdaumEngineActivity.m_LEngine.m_Sensors.EnableGyroscope( Active );
	}
	public static void EnableGPS(boolean Active)
	{
		Log.i( TAG, "EnableGPS()" );

		LinderdaumEngineActivity.m_LEngine.m_Sensors.EnableGPS( Active );
	}

	public static void HapticFeedback( int MSec )
	{
		LinderdaumEngineActivity.m_LEngine.m_Vibrator.vibrate( MSec );
	}

	public static void HapticFeedback_Tap()
	{
		Log.i( TAG, "HapticFeedback_Tap()" );

		LinderdaumEngineActivity.m_LEngine.m_View.performHapticFeedback( HapticFeedbackConstants.VIRTUAL_KEY );
	}

	public static void HapticFeedback_LongPress()
	{
		Log.i( TAG, "HapticFeedback_LongPress()" );

		LinderdaumEngineActivity.m_LEngine.m_View.performHapticFeedback( HapticFeedbackConstants.LONG_PRESS );
	}
}
