/**
 * \file Pathfinder.h
 * \brief Pathfinder
 * \version 0.5.74
 * \date 03/08/2007
 * \author Sergey Kosarevsky, 2007
 * \author support@linderdaum.com http://www.linderdaum.com
 */

#ifndef _clPathfinder_
#define _clPathfinder_

#include "Utils/LArray.h"

/// 2D waypoint in a path
struct s2DWaypoint
{
	s2DWaypoint( int X, int Y ): FX( X ), FY( Y ) {};
	int FX;
	int FY;
};

/// Path generated by the pathfinder
class clPath
{
public:
	//
	// clPath
	//
	void           Clear();
	void           AddWaypoint( s2DWaypoint Waypoint );
	int            GetTotalWaypoints() const;
	s2DWaypoint    GetWaypoint( int Index ) const;
private:
	LArray<s2DWaypoint>    FWaypoints;
};

/// Passability map for the pathfinder
class cl2DPassabilityMap
{
public:
	cl2DPassabilityMap() {};
	//
	// clPassabilityMap
	//
	virtual bool    IsPassable( int X, int Y ) const = 0;
};

/// Representation of a map in the pathfinder
class cl2DAccessMap
{
public:
	void SetSize( int SizeX, int SizeY )
	{
		FMap.resize( SizeX * SizeY );

		FSizeX = SizeX;
		FSizeY = SizeY;
	}
	int GetPoint( int X, int Y )
	{
		return FMap[ Y*FSizeX + X ];
	}
	void SetPoint( int X, int Y, int Value )
	{
		FMap[ Y* FSizeX + X ] = Value;
	}
	void Fill( int Value )
	{
		for ( size_t i = 0; i != FMap.size(); ++i )
		{
			FMap[i] = Value;
		}
	}
private:
	LArray<int>    FMap;
	int            FSizeX;
	int            FSizeY;
};

/// 2D pathfinder implementation
class clPathfinder
{
public:
	clPathfinder(): FAccessMap() {};
	//
	// clPathFinder
	//
	virtual clPath*    FindPath2DGrid( int SizeX, int SizeY,
	                                   int XSrc , int YSrc,
	                                   int XDest, int YDest,
	                                   cl2DPassabilityMap* Map );
private:
	void    MarkPoint( int X, int Y, int Step );
private:
	cl2DAccessMap          FAccessMap;
	int                    FDstX;
	int                    FDstY;
	int                    FSizeX;
	int                    FSizeY;
	clPath                 FPath;
};

#endif

/*
 * 03/08/2007
     It's here
*/
