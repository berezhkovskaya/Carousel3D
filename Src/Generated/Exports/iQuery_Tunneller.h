/**
 * \file iQuery_Tunneller.h
 * \brief Tunneller for class: iQuery
 * \version 0.6.06
 * \date 16/01/2012
 * \author Sergey Kosarevsky, 2005-2011
 * \author Viktor Latypov, 2007-2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

//                             Base class: iObject  (public)

#ifndef _iQuery_Tunneller_
#define _iQuery_Tunneller_

#include "Linderdaum/Renderer/iQuery.h"

#if !defined( _DISABLE_TUNNELLERS_ )

class iQuery_Tunneller: public iQuery
{
public:
   //
   // iObject interface
   //
      /*
            The interface of this class was marked as "native final".
            LSDC bypassed generation of stubs for it - only pure virtual methods are generated.
      */
   //
   // iQuery interface
   //
   virtual void    BeginQuery(LQueryType P0)
   {
      if ( !iObject::FInheritedCall && iObject::IsMethodOverriden( "BeginQuery" ) )
      {
         clParametersList Params;

         ParameterType<LQueryType>::Type Param0;

         Param0.ReadValue( &P0 );

         Params.push_back( &Param0 );

         bool MethodCalled = iObject::CallMethod( "BeginQuery", Params, iObject::FInheritedCall );

         if ( !MethodCalled ) FATAL_MSG("Abstract method called: iQuery::BeginQuery()")

         return;
      }

      FATAL_MSG("Abstract method called: iQuery::BeginQuery()")
   }
   virtual void    EndQuery()
   {
      if ( !iObject::FInheritedCall && iObject::IsMethodOverriden( "EndQuery" ) )
      {
         clParametersList Params;

         bool MethodCalled = iObject::CallMethod( "EndQuery", Params, iObject::FInheritedCall );

         if ( !MethodCalled ) FATAL_MSG("Abstract method called: iQuery::EndQuery()")

         return;
      }

      FATAL_MSG("Abstract method called: iQuery::EndQuery()")
   }
   virtual Luint64    GetQuery() const
   {
      if ( !iObject::FInheritedCall && iObject::IsMethodOverriden( "GetQuery" ) )
      {
         clParametersList Params;

         bool MethodCalled = iObject::CallMethod( "GetQuery", Params, iObject::FInheritedCall );

         if ( !MethodCalled ) FATAL_MSG("Abstract method called: iQuery::GetQuery()")

         return *(TypeTraits< Luint64 >::ReferredType*)iObject::GetReturnValue()->GetNativeBlock();
      }

      FATAL_MSG("Abstract method called: iQuery::GetQuery()")

      return *(TypeTraits< Luint64 >::ReferredType*)(0);
   }
   virtual bool    IsAvailable() const
   {
      if ( !iObject::FInheritedCall && iObject::IsMethodOverriden( "IsAvailable" ) )
      {
         clParametersList Params;

         bool MethodCalled = iObject::CallMethod( "IsAvailable", Params, iObject::FInheritedCall );

         if ( !MethodCalled ) FATAL_MSG("Abstract method called: iQuery::IsAvailable()")

         return *(TypeTraits< bool >::ReferredType*)iObject::GetReturnValue()->GetNativeBlock();
      }

      FATAL_MSG("Abstract method called: iQuery::IsAvailable()")

      return *(TypeTraits< bool >::ReferredType*)(0);
   }
};

#endif // _DISABLE_TUNNELLERS_

#endif

/*
 * 16/01/2012
     Autogenerated via LinderScript Database Compiler 0.9.24
*/
