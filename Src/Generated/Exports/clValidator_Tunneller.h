/**
 * \file clValidator_Tunneller.h
 * \brief Tunneller for class: clValidator
 * \version 0.6.06
 * \date 16/01/2012
 * \author Sergey Kosarevsky, 2005-2011
 * \author Viktor Latypov, 2007-2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

//                             Base class: iObject  (public)

#ifndef _clValidator_Tunneller_
#define _clValidator_Tunneller_

#include "Linderdaum/GUI/iValidators.h"

#if !defined( _DISABLE_TUNNELLERS_ )

class clValidator_Tunneller: public clValidator
{
public:
   //
   // iObject interface
   //
      /*
            The interface of this class was marked as "native final".
            LSDC bypassed generation of stubs for it - only pure virtual methods are generated.
      */
   //
   // clValidator interface
   //
   virtual bool    IsValid(const LString& P0) const
   {
      if ( !iObject::FInheritedCall && iObject::IsMethodOverriden( "IsValid" ) )
      {
         clParametersList Params;

         ParameterType<const LString&>::Type Param0;

         Param0.ReadValue( &P0 );

         Params.push_back( &Param0 );

         bool MethodCalled = iObject::CallMethod( "IsValid", Params, iObject::FInheritedCall );

         if ( !MethodCalled ) return clValidator::IsValid(P0);

         return *(TypeTraits< bool >::ReferredType*)iObject::GetReturnValue()->GetNativeBlock();
      }

      return clValidator::IsValid(P0);
   }
   virtual void    SetMaxLength(int P0)
   {
      if ( !iObject::FInheritedCall && iObject::IsMethodOverriden( "SetMaxLength" ) )
      {
         clParametersList Params;

         ParameterType<int>::Type Param0;

         Param0.ReadValue( &P0 );

         Params.push_back( &Param0 );

         bool MethodCalled = iObject::CallMethod( "SetMaxLength", Params, iObject::FInheritedCall );

         if ( !MethodCalled ) clValidator::SetMaxLength(P0);

         return;
      }

      clValidator::SetMaxLength(P0);
   }
};

#endif // _DISABLE_TUNNELLERS_

#endif

/*
 * 16/01/2012
     Autogenerated via LinderScript Database Compiler 0.9.24
*/
