/**
 * \file ExpReg_Core7.cpp
 * \brief Autogenerated via LinderScript Database Compiler 0.9.24
 * \version 0.6.06
 * \date 16/01/2012
 * \author Sergey Kosarevsky, 2005-2011
 * \author Viktor Latypov, 2007-2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

#include "Generated/MethodBind.h"

#include "Core/Linker.h"
#include "Core/RTTI/iStaticClass.h"
#include "Core/RTTI/FieldBinding.h"
#include "Core/RTTI/PropertyMacros.h"

#include "Core/VFS/ML.h"

// Custom include file
#include "Generated/CoreExport_Includes.h"

#define REG_CLS_MTD(ClsName, MtdName) \
StaticClass->RegisterMethod( BindNativeMethod( & ClsName :: MtdName, #MtdName ) );

#include "Linderdaum/Renderer/iTexture.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iTexture
            // Adding abstract: Bind
            // Adding abstract: SaveToBitmap
            // Adding abstract: LoadFromBitmap
            // Adding abstract: UpdateSubImageFromBitmap
            // Adding abstract: GetBitmapFormat
            // Adding abstract: SetMipMapping
            // Adding abstract: SetClamping
            // Adding abstract: UpdateMipmaps
            // Adding abstract: SetFormat
            // Adding abstract: AttachToCurrentFB
            // Adding abstract: CommitChanges
      // Abstract method: Bind
      // Abstract method: SaveToBitmap
      // Abstract method: LoadFromBitmap
      // Abstract method: UpdateSubImageFromBitmap
      // Abstract method: GetBitmapFormat
      // Abstract method: SetMipMapping
      // Abstract method: SetClamping
      // Abstract method: UpdateMipmaps
      // Abstract method: SetFormat
      // Abstract method: AttachToCurrentFB
      // Abstract method: CommitChanges

void RegisterPackageLinderdaumCoreClass306(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<iTexture>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iTexture,Mtd)
   _RM__(Bind)
   _RM__(SaveToBitmap)
   _RM__(LoadFromBitmap)
   _RM__(UpdateFromBitmap)
   _RM__(UpdateSubImageFromBitmap)
   _RM__(GetBitmapFormat)
   _RM__(SetImage)
   _RM__(GetImage)
   _RM__(SetMipMapping)
   _RM__(SetClamping)
   _RM__(UpdateMipmaps)
   _RM__(SetFormat)
   _RM__(AttachToCurrentFB)
   _RM__(CommitChanges)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iTransaction

void RegisterPackageLinderdaumCoreClass307(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<iTransaction>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "iUpdater_Tunneller.h"

void RegisterPackageLinderdaumCoreClass308(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<iUpdater_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iUpdater,Mtd)
   _RM__(Update)
   _RM__(UpdateInPause)
   _RM__(Attach)
   _RM__(IsIndex)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iUpdater
            // Adding abstract: Update
      // Abstract method: Update

void RegisterPackageLinderdaumCoreClass309(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<iUpdater>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iUpdater,Mtd)
   _RM__(Update)
   _RM__(UpdateInPause)
   _RM__(Attach)
   _RM__(IsIndex)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/iVertexArray.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iVertexArray
            // Adding abstract: FeedIntoGPU
            // Adding abstract: FeedIntoGPUInstanced
            // Adding abstract: CommitChanges
      // Abstract method: FeedIntoGPU
      // Abstract method: FeedIntoGPUInstanced
      // Abstract method: CommitChanges

void RegisterPackageLinderdaumCoreClass310(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<iVertexArray>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iVertexArray,Mtd)
   _RM__(FeedIntoGPU)
   _RM__(FeedIntoGPUInstanced)
   _RM__(CommitChanges)
   _RM__(SetVertexAttribs)
   _RM__(GetVertexAttribs)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Resources/iVideoDecoder.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iVideoDecoder
            // Adding abstract: GetMaxFrames
            // Adding abstract: ExtractFrame
            // Adding abstract: GetFrameSeconds
            // Adding abstract: GetWidth
            // Adding abstract: GetHeight
            // Adding abstract: OpenStream
      // Abstract method: GetMaxFrames
      // Abstract method: ExtractFrame
      // Abstract method: GetFrameSeconds
      // Abstract method: GetWidth
      // Abstract method: GetHeight
      // Abstract method: OpenStream

void RegisterPackageLinderdaumCoreClass311(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<iVideoDecoder>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iVideoDecoder,Mtd)
   _RM__(GetMaxFrames)
   _RM__(ExtractFrame)
   _RM__(GetFrameSeconds)
   _RM__(GetWidth)
   _RM__(GetHeight)
   _RM__(OpenStream)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Resources/iVideoEncoder.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iVideoEncoder
            // Adding abstract: AddVideoFrame
            // Adding abstract: CreateStream
      // Abstract method: AddVideoFrame
      // Abstract method: CreateStream

void RegisterPackageLinderdaumCoreClass312(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<iVideoEncoder>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( iVideoEncoder,AddVideoFrame )
   REG_CLS_MTD( iVideoEncoder,CreateStream )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iWaveDataProvider
            // Adding abstract: Clone
            // Adding abstract: IsStreaming
            // Adding abstract: IsEOF
            // Adding abstract: GetWaveDataFormat
            // Adding abstract: GetWaveData
            // Adding abstract: GetWaveDataSize
            // Adding abstract: StreamWaveData
            // Adding abstract: Seek
      // Abstract method: Clone
      // Abstract method: IsStreaming
      // Abstract method: IsEOF
      // Abstract method: GetWaveDataFormat
      // Abstract method: GetWaveData
      // Abstract method: GetWaveDataSize
      // Abstract method: StreamWaveData
      // Abstract method: Seek

void RegisterPackageLinderdaumCoreClass313(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<iWaveDataProvider>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iWaveDataProvider,Mtd)
   _RM__(Clone)
   _RM__(IsStreaming)
   _RM__(IsEOF)
   _RM__(GetWaveDataFormat)
   _RM__(GetWaveData)
   _RM__(GetWaveDataSize)
   _RM__(StreamWaveData)
   _RM__(Seek)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iResource
            // Adding abstract: GetCachingDir
         // Class: iWaveform
            // Overriding abstract: GetCachingDir

void RegisterPackageLinderdaumCoreClass314(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<iWaveform>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(iWaveform,Mtd)
   _RM__(GetCachingDir)
   _RM__(AttachWaveDataProvider)
   _RM__(CreateWaveDataProvider)
   _RM__(GetWaveDataProvider)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iResource" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Environment.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: sSysEnv
         // Class: iAsyncQueue
         // Class: sEnvironment
#include "Linderdaum/Utils/Screen.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Screen, clScreen)
#include "Linderdaum/Renderer/iRenderContext.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Renderer, iRenderContext)
#include "Linderdaum/Core/Console.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Console, clConsole)
#include "Linderdaum/GUI/GUIManager.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, GUI, clGUIManager)
#include "Linderdaum/World/World.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, World, clWorld)
#include "Linderdaum/Audio/Audio.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Audio, iAudioSubSystem)
#include "Linderdaum/Input/Input.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Input, iInputDeviceList)
#include "Linderdaum/Utils/Viewport.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Viewport, clViewport)
#include "Linderdaum/Resources/ResourcesManager.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Resources, clResourcesManager)
#include "Linderdaum/Utils/Localizer.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sEnvironment, Localizer, clLocalizer)
// OBJECT_PROPERTY_LOAD__FIELD
// Viewport
// Viewport
// sEnvironment
// Viewport

bool LoadObjectField_sEnvironment_Viewport_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->Viewport)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Viewport
// Viewport
// sEnvironment
// Viewport

bool SaveObjectField_sEnvironment_Viewport_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->Viewport== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Viewport)->Save( Result )) return false; 
   (*Result)->setID("Viewport"); 
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// TickRate
// ""
// sEnvironment
// SetCurrentTickRate
// LStr::ToDouble

bool LoadScalarField_sEnvironment_TickRate_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<sEnvironment*>(Obj))->SetCurrentTickRate(LStr::ToDouble( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// TickRate
// ""
// sEnvironment
// GetCurrentTickRate
// LStr::ToStrEpsilon

bool SaveScalarField_sEnvironment_TickRate_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<sEnvironment*>(Obj)->GetCurrentTickRate() ); 
   *Result = new mlNode("TickRate" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// Renderer
// Renderer
// sEnvironment
// Renderer

bool LoadObjectField_sEnvironment_Renderer_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->Renderer)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Renderer
// Renderer
// sEnvironment
// Renderer

bool SaveObjectField_sEnvironment_Renderer_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->Renderer== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Renderer)->Save( Result )) return false; 
   (*Result)->setID("Renderer"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// Console
// Console
// sEnvironment
// Console

bool LoadObjectField_sEnvironment_Console_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->Console)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Console
// Console
// sEnvironment
// Console

bool SaveObjectField_sEnvironment_Console_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->Console== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Console)->Save( Result )) return false; 
   (*Result)->setID("Console"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// Resources
// Resources
// sEnvironment
// Resources

bool LoadObjectField_sEnvironment_Resources_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->Resources)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Resources
// Resources
// sEnvironment
// Resources

bool SaveObjectField_sEnvironment_Resources_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->Resources== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Resources)->Save( Result )) return false; 
   (*Result)->setID("Resources"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// Input
// Input
// sEnvironment
// Input

bool LoadObjectField_sEnvironment_Input_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->Input)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Input
// Input
// sEnvironment
// Input

bool SaveObjectField_sEnvironment_Input_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->Input== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Input)->Save( Result )) return false; 
   (*Result)->setID("Input"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// Audio
// Audio
// sEnvironment
// Audio

bool LoadObjectField_sEnvironment_Audio_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->Audio)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Audio
// Audio
// sEnvironment
// Audio

bool SaveObjectField_sEnvironment_Audio_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->Audio== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Audio)->Save( Result )) return false; 
   (*Result)->setID("Audio"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// GUI
// GUI
// sEnvironment
// GUI

bool LoadObjectField_sEnvironment_GUI_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sEnvironment*>(Obj)->GUI)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// GUI
// GUI
// sEnvironment
// GUI

bool SaveObjectField_sEnvironment_GUI_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sEnvironment* Object = dynamic_cast<sEnvironment*>(Obj); 
   if ( Object->GUI== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->GUI)->Save( Result )) return false; 
   (*Result)->setID("GUI"); 
   return true; 
}




void RegisterPackageLinderdaumCoreClass315(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<sEnvironment>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(sEnvironment,Mtd)
   _RM__(DeployDefaultEnvironment)
   _RM__(DeployEnvironment)
   _RM__(ShutdownEnvironment)
   _RM__(SetExternalInitializer)
   _RM__(SetExternalFinalizer)
   _RM__(Initialize)
   _RM__(RunApplication)
   _RM__(HandleInput)
   _RM__(SleepSeconds)
   _RM__(ReleaseTimeslice)
   _RM__(EnableMemoryLeaksDetection)
   _RM__(GetTimeQuantum)
   _RM__(GetMaxTickRate)
   _RM__(SetTimeQuantum)
   _RM__(Pause)
   _RM__(Resume)
   _RM__(IsPaused)
   _RM__(Suspend)
   _RM__(IsSuspended)
   _RM__(Unsuspend)
   _RM__(IsRequestingExit)
   _RM__(RequestExit)
   _RM__(GenerateTicks)
   _RM__(RenderFrame)
   _RM__(GetCurrentTick)
   _RM__(GetEngineTime)
   _RM__(GetCurrentTickRate)
   _RM__(GetDeltaSeconds)
   _RM__(SetCurrentTickRate)
   _RM__(SetClipboardText)
   _RM__(GetClipboardText)
   _RM__(ClearClipboard)
   _RM__(IsClipboardTextAvailable)
   _RM__(SetLogLevel)
   _RM__(GetLogLevel)
   _RM__(SetLocaleName)
   _RM__(SetUseUpackedResources)
   #undef _RM__
#endif // _DISABLE_METHODS_
   BIND_NATIVE_FIELD(sEnvironment, Screen);
   BIND_NATIVE_FIELD(sEnvironment, Renderer);
   BIND_NATIVE_FIELD(sEnvironment, Console);
   BIND_NATIVE_FIELD(sEnvironment, GUI);
   BIND_NATIVE_FIELD(sEnvironment, World);
   BIND_NATIVE_FIELD(sEnvironment, Audio);
   BIND_NATIVE_FIELD(sEnvironment, Input);
   BIND_NATIVE_FIELD(sEnvironment, Viewport);
   BIND_NATIVE_FIELD(sEnvironment, Resources);
   BIND_NATIVE_FIELD(sEnvironment, Localizer);
   REGISTER_PROPERTY__OBJECT_FIELD(Viewport, sEnvironment, Viewport)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(TickRate, sEnvironment, TickRate)

   REGISTER_PROPERTY__OBJECT_FIELD(Renderer, sEnvironment, Renderer)

   REGISTER_PROPERTY__OBJECT_FIELD(Console, sEnvironment, Console)

   REGISTER_PROPERTY__OBJECT_FIELD(Resources, sEnvironment, Resources)

   REGISTER_PROPERTY__OBJECT_FIELD(Input, sEnvironment, Input)

   REGISTER_PROPERTY__OBJECT_FIELD(Audio, sEnvironment, Audio)

   REGISTER_PROPERTY__OBJECT_FIELD(GUI, sEnvironment, GUI)

   StaticClass->SetSuperClassName( "sSysEnv" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/SysEnv.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: sSysEnv
#include "Linderdaum/Core/Linker.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sSysEnv, Linker, clLinker)
#include "Linderdaum/Core/Logger.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sSysEnv, Logger, clLogger)
#include "Linderdaum/Core/VFS/FileSystem.h"
DEFINE_NATIVE_POD_FIELD_BINDER(sSysEnv, FileSystem, clFileSystem)
// OBJECT_PROPERTY_LOAD__FIELD
// Linker
// Linker
// sSysEnv
// Linker

bool LoadObjectField_sSysEnv_Linker_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sSysEnv*>(Obj)->Linker)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Linker
// Linker
// sSysEnv
// Linker

bool SaveObjectField_sSysEnv_Linker_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sSysEnv* Object = dynamic_cast<sSysEnv*>(Obj); 
   if ( Object->Linker== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Linker)->Save( Result )) return false; 
   (*Result)->setID("Linker"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// Logger
// Logger
// sSysEnv
// Logger

bool LoadObjectField_sSysEnv_Logger_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sSysEnv*>(Obj)->Logger)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Logger
// Logger
// sSysEnv
// Logger

bool SaveObjectField_sSysEnv_Logger_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sSysEnv* Object = dynamic_cast<sSysEnv*>(Obj); 
   if ( Object->Logger== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->Logger)->Save( Result )) return false; 
   (*Result)->setID("Logger"); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// FileSystem
// FileSystem
// sSysEnv
// FileSystem

bool LoadObjectField_sSysEnv_FileSystem_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<sSysEnv*>(Obj)->FileSystem)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// FileSystem
// FileSystem
// sSysEnv
// FileSystem

bool SaveObjectField_sSysEnv_FileSystem_FIELD(iObject* Obj, mlNode** Result) 
{ 
  sSysEnv* Object = dynamic_cast<sSysEnv*>(Obj); 
   if ( Object->FileSystem== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->FileSystem)->Save( Result )) return false; 
   (*Result)->setID("FileSystem"); 
   return true; 
}




void RegisterPackageLinderdaumCoreClass316(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<sSysEnv>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( sSysEnv,GetSeconds )
   REG_CLS_MTD( sSysEnv,FindObject )
   REG_CLS_MTD( sSysEnv,LoadDynamicLibrary )
#endif // _DISABLE_METHODS_
   BIND_NATIVE_FIELD(sSysEnv, Linker);
   BIND_NATIVE_FIELD(sSysEnv, Logger);
   BIND_NATIVE_FIELD(sSysEnv, FileSystem);
   REGISTER_PROPERTY__OBJECT_FIELD(Linker, sSysEnv, Linker)

   REGISTER_PROPERTY__OBJECT_FIELD(Logger, sSysEnv, Logger)

   REGISTER_PROPERTY__OBJECT_FIELD(FileSystem, sSysEnv, FileSystem)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#undef REG_CLS_MTD

/*
 * 16/01/2012
     Autogenerated via LinderScript Database Compiler 0.9.24
*/
