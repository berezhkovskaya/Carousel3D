/**
 * \file ExpReg_Core4.cpp
 * \brief Autogenerated via LinderScript Database Compiler 0.9.24
 * \version 0.6.06
 * \date 16/01/2012
 * \author Sergey Kosarevsky, 2005-2011
 * \author Viktor Latypov, 2007-2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

#include "Generated/MethodBind.h"

#include "Core/Linker.h"
#include "Core/RTTI/iStaticClass.h"
#include "Core/RTTI/FieldBinding.h"
#include "Core/RTTI/PropertyMacros.h"

#include "Core/VFS/ML.h"

// Custom include file
#include "Generated/CoreExport_Includes.h"

#define REG_CLS_MTD(ClsName, MtdName) \
StaticClass->RegisterMethod( BindNativeMethod( & ClsName :: MtdName, #MtdName ) );

#include "Linderdaum/Geometry/LCM.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iMeshLoader
            // Adding abstract: LoadMesh
         // Class: clLCMLoader
            // Overriding abstract: LoadMesh

void RegisterPackageLinderdaumCoreClass153(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLCMLoader>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clLCMLoader,LoadMesh )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iMeshLoader" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/VolumeRenderer.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clLVLibVolume
// SCALAR_PROPERTY_LOAD__SETTER
// Iterations
// ""
// clLVLibVolume
// SetIterations
// LStr::ToInt

bool LoadScalarField_clLVLibVolume_Iterations_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLVLibVolume*>(Obj))->SetIterations(LStr::ToInt( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Iterations
// ""
// clLVLibVolume
// GetIterations
// LStr::ToStr

bool SaveScalarField_clLVLibVolume_Iterations_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr(dynamic_cast<clLVLibVolume*>(Obj)->GetIterations() ); 
   *Result = new mlNode("Iterations" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Scattering
// ""
// clLVLibVolume
// SetScattering
// LStr::ToBool

bool LoadScalarField_clLVLibVolume_Scattering_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLVLibVolume*>(Obj))->SetScattering(LStr::ToBool( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Scattering
// ""
// clLVLibVolume
// GetScattering
// LStr::ToStr_Bool

bool SaveScalarField_clLVLibVolume_Scattering_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clLVLibVolume*>(Obj)->GetScattering() ); 
   *Result = new mlNode("Scattering" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// IsoValue
// ""
// clLVLibVolume
// SetIsosurfaceValue
// LStr::ToFloat

bool LoadScalarField_clLVLibVolume_IsoValue_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLVLibVolume*>(Obj))->SetIsosurfaceValue(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// IsoValue
// ""
// clLVLibVolume
// GetIsosurfaceValue
// LStr::ToStrEpsilon

bool SaveScalarField_clLVLibVolume_IsoValue_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clLVLibVolume*>(Obj)->GetIsosurfaceValue() ); 
   *Result = new mlNode("IsoValue" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// IsoColor
// ""
// clLVLibVolume
// SetIsosurfaceColor
// LStr::StrToVec4

bool LoadScalarField_clLVLibVolume_IsoColor_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLVLibVolume*>(Obj))->SetIsosurfaceColor(LStr::StrToVec4( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// IsoColor
// ""
// clLVLibVolume
// GetIsosurfaceColor
// LStr::Vec4ToStr

bool SaveScalarField_clLVLibVolume_IsoColor_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clLVLibVolume*>(Obj)->GetIsosurfaceColor() ); 
   *Result = new mlNode("IsoColor" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// LowCutoff
// ""
// clLVLibVolume
// SetLowCutoff
// LStr::ToFloat

bool LoadScalarField_clLVLibVolume_LowCutoff_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLVLibVolume*>(Obj))->SetLowCutoff(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// LowCutoff
// ""
// clLVLibVolume
// GetLowCutoff
// LStr::ToStrEpsilon

bool SaveScalarField_clLVLibVolume_LowCutoff_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clLVLibVolume*>(Obj)->GetLowCutoff() ); 
   *Result = new mlNode("LowCutoff" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Saturation
// ""
// clLVLibVolume
// SetOpacitySaturation
// LStr::ToFloat

bool LoadScalarField_clLVLibVolume_Saturation_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLVLibVolume*>(Obj))->SetOpacitySaturation(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Saturation
// ""
// clLVLibVolume
// GetOpacitySaturation
// LStr::ToStrEpsilon

bool SaveScalarField_clLVLibVolume_Saturation_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clLVLibVolume*>(Obj)->GetOpacitySaturation() ); 
   *Result = new mlNode("Saturation" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass154(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLVLibVolume>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clLVLibVolume,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetOffscreenRenderTarget)
   _RM__(AutoLoadVolumeAndGradients)
   _RM__(Render)
   _RM__(SetVolume)
   _RM__(GetVolume)
   _RM__(SetVolumeTexture)
   _RM__(ChangeVolumeTexture)
   _RM__(SetVolumeSize)
   _RM__(SetGradients)
   _RM__(SetESLMap)
   _RM__(SetProjection)
   _RM__(SetModelView)
   _RM__(SetRenderOffscreen)
   _RM__(SetGradientsMode)
   _RM__(SetScattering)
   _RM__(GetScattering)
   _RM__(SetIsosurfaceValue)
   _RM__(GetIsosurfaceValue)
   _RM__(SetIsosurfaceColor)
   _RM__(GetIsosurfaceColor)
   _RM__(SetLightPosition)
   _RM__(EnableClipPlane)
   _RM__(DisableClipPlane)
   _RM__(SetClipPlaneParams)
   _RM__(SetIsosurfaceMaterial)
   _RM__(GetIsosurfaceMaterial)
   _RM__(SetLowCutoff)
   _RM__(GetLowCutoff)
   _RM__(SetOpacitySaturation)
   _RM__(GetOpacitySaturation)
   _RM__(SetIterations)
   _RM__(GetIterations)
   _RM__(SetRenderMode)
   _RM__(GetRenderMode)
   _RM__(SetTransferFunction)
   _RM__(Set2DTextureMap)
   _RM__(CreateVolumeGeom)
   _RM__(AddToScene)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Iterations, clLVLibVolume, Iterations)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Scattering, clLVLibVolume, Scattering)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(IsoValue, clLVLibVolume, IsoValue)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(IsoColor, clLVLibVolume, IsoColor)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(LowCutoff, clLVLibVolume, LowCutoff)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Saturation, clLVLibVolume, Saturation)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iInputDevice
            // Adding abstract: GetName
            // Adding abstract: Poll
            // Adding abstract: Start
            // Adding abstract: IsStarted
            // Adding abstract: Stop
            // Adding abstract: GetNumAxes
            // Adding abstract: SetAxisRange
            // Adding abstract: SetAxisDeadZone
            // Adding abstract: SetAxisSaturation
            // Adding abstract: GetAxisValue
            // Adding abstract: GetAxisName
            // Adding abstract: SetAxisValue
            // Adding abstract: GetKeyName
            // Adding abstract: IsPressed
            // Adding abstract: GetNumKeys
            // Adding abstract: SetKeyState
         // Class: clLinearAccelerometerDevice
            // Overriding abstract: GetName
            // Overriding abstract: Poll
            // Overriding abstract: Start
            // Overriding abstract: IsStarted
            // Overriding abstract: Stop
            // Overriding abstract: GetNumAxes
            // Overriding abstract: SetAxisRange
            // Overriding abstract: SetAxisDeadZone
            // Overriding abstract: SetAxisSaturation
            // Overriding abstract: GetAxisValue
            // Overriding abstract: GetAxisName
            // Overriding abstract: SetAxisValue
            // Overriding abstract: GetKeyName
            // Overriding abstract: IsPressed
            // Overriding abstract: GetNumKeys
            // Overriding abstract: SetKeyState

void RegisterPackageLinderdaumCoreClass155(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLinearAccelerometerDevice>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clLinearAccelerometerDevice,Mtd)
   _RM__(GetName)
   _RM__(Poll)
   _RM__(Start)
   _RM__(IsStarted)
   _RM__(Stop)
   _RM__(GetNumAxes)
   _RM__(SetAxisRange)
   _RM__(SetAxisDeadZone)
   _RM__(SetAxisSaturation)
   _RM__(GetValues)
   _RM__(GetAxisValue)
   _RM__(GetAxisName)
   _RM__(SetAxisValue)
   _RM__(GetKeyName)
   _RM__(IsPressed)
   _RM__(GetNumKeys)
   _RM__(SetKeyState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iInputDevice" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clLinearSurface
            // Overriding abstract: R_and_dR
// SCALAR_PROPERTY_LOAD__FIELD
// Axis
// Axis
// clLinearSurface
// Axis
// LStr::StrToVec3

bool LoadScalarField_clLinearSurface_Axis_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLinearSurface*>(Obj))->Axis=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Axis
// Axis
// clLinearSurface
// Axis
// LStr::Vec3ToStr

bool SaveScalarField_clLinearSurface_Axis_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clLinearSurface*>(Obj)->Axis); 
   *Result = new mlNode("Axis" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Origin
// P
// clLinearSurface
// P
// LStr::StrToVec3

bool LoadScalarField_clLinearSurface_P_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clLinearSurface*>(Obj))->P=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Origin
// P
// clLinearSurface
// P
// LStr::Vec3ToStr

bool SaveScalarField_clLinearSurface_P_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clLinearSurface*>(Obj)->P); 
   *Result = new mlNode("Origin" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass156(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLinearSurface>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clLinearSurface,R_and_dR )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(Axis, clLinearSurface, Axis)

   REGISTER_PROPERTY__SCALAR_FIELD(P, clLinearSurface, Origin)

   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/Linker.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clLinker

void RegisterPackageLinderdaumCoreClass157(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLinker>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clLinker,Mtd)
   _RM__(RegisterStaticClass)
   _RM__(LoadStaticClass)
   _RM__(FindStaticClass)
   _RM__(RebuildVirtualTables)
   _RM__(SetObjectProperty)
   _RM__(LoadPropertyForObject)
   _RM__(SaveObjectToFile)
   _RM__(LoadObjectsListFromStream)
   _RM__(LoadObjectsList)
   _RM__(InstantiateClassByName)
   _RM__(RegisterStaticMethod)
   _RM__(LoadStaticMethod)
   _RM__(GetStaticMethod)
   _RM__(GetStaticMethodIndex)
   _RM__(FindStaticMethod)
   _RM__(RegisterPODSymbol)
   _RM__(RegisterConstPODSymbol)
   _RM__(RegisterClassRefSymbol)
   _RM__(GetGlobalVarAddress)
   _RM__(GetGlobalVarIndex)
   _RM__(LoadAsm)
   _RM__(LoadScriptDirectory)
   _RM__(ExecuteCode)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Utils/Localizer.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clLocalizer

void RegisterPackageLinderdaumCoreClass158(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLocalizer>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clLocalizer,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetLocale)
   _RM__(SetLocalePath)
   _RM__(IsLeftToRight)
   _RM__(LocalizeString)
   _RM__(LocalizeID)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/Logger.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clLogger

void RegisterPackageLinderdaumCoreClass159(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clLogger>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clLogger,Mtd)
   _RM__(SetCurrentThreadName)
   _RM__(SetThreadName)
   _RM__(Log)
   _RM__(MarkTime)
   _RM__(SetLogLevel)
   _RM__(GetLogLevel)
   _RM__(EnableFileLogging)
   _RM__(GetCurrentProcsNesting)
   _RM__(GetCurrentProcsNestingSeparated)
   _RM__(PushProc)
   _RM__(PopProc)
   _RM__(Fatal)
   _RM__(FatalException)
   _RM__(Error)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Geometry/MD5.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iMeshLoader
            // Adding abstract: LoadMesh
         // Class: clMD5Loader
            // Overriding abstract: LoadMesh

void RegisterPackageLinderdaumCoreClass160(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMD5Loader>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clMD5Loader,LoadMesh )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iMeshLoader" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Postprocess/MLAA.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iPostprocessor
            // Adding abstract: Render
         // Class: clMLAAPostprocessor
            // Overriding abstract: Render
// SCALAR_PROPERTY_LOAD__SETTER
// Discontinuity
// ""
// clMLAAPostprocessor
// SetDiscontinuity
// LStr::ToFloat

bool LoadScalarField_clMLAAPostprocessor_Discontinuity_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMLAAPostprocessor*>(Obj))->SetDiscontinuity(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Discontinuity
// ""
// clMLAAPostprocessor
// GetDiscontinuity
// LStr::ToStrEpsilon

bool SaveScalarField_clMLAAPostprocessor_Discontinuity_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMLAAPostprocessor*>(Obj)->GetDiscontinuity() ); 
   *Result = new mlNode("Discontinuity" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// UsePrepass
// FUsePrepass
// clMLAAPostprocessor
// FUsePrepass
// LStr::ToBool

bool LoadScalarField_clMLAAPostprocessor_FUsePrepass_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMLAAPostprocessor*>(Obj))->FUsePrepass=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UsePrepass
// FUsePrepass
// clMLAAPostprocessor
// FUsePrepass
// LStr::ToStr_Bool

bool SaveScalarField_clMLAAPostprocessor_FUsePrepass_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clMLAAPostprocessor*>(Obj)->FUsePrepass); 
   *Result = new mlNode("UsePrepass" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass161(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMLAAPostprocessor>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMLAAPostprocessor,Mtd)
   _RM__(AfterConstruction)
   _RM__(Render)
   _RM__(GetDiscontinuity)
   _RM__(SetDiscontinuity)
   _RM__(SetImageSize)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Discontinuity, clMLAAPostprocessor, Discontinuity)

   REGISTER_PROPERTY__SCALAR_FIELD(FUsePrepass, clMLAAPostprocessor, UsePrepass)

   StaticClass->SetSuperClassName( "iPostprocessor" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Material.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iResource
            // Adding abstract: GetCachingDir
         // Class: clMaterial
            // Overriding abstract: GetCachingDir
// SCALAR_PROPERTY_LOAD__FIELD
// MaterialName
// FMaterialDesc.FMaterialName
// clMaterial
// FMaterialDesc_FMaterialName
// LStr::BufferFromString

bool LoadScalarField_clMaterial_FMaterialDesc_FMaterialName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FMaterialName=LStr::BufferFromString( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MaterialName
// FMaterialDesc.FMaterialName
// clMaterial
// FMaterialDesc_FMaterialName
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_FMaterialDesc_FMaterialName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FMaterialName); 
   *Result = new mlNode("MaterialName" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MaterialClass
// FMaterialDesc.FMaterialClass
// clMaterial
// FMaterialDesc_FMaterialClass
// LStr::BufferFromString

bool LoadScalarField_clMaterial_FMaterialDesc_FMaterialClass_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FMaterialClass=LStr::BufferFromString( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MaterialClass
// FMaterialDesc.FMaterialClass
// clMaterial
// FMaterialDesc_FMaterialClass
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_FMaterialDesc_FMaterialClass_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FMaterialClass); 
   *Result = new mlNode("MaterialClass" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// AmbientColor
// FMaterialDesc.FProperties.FAmbientColor
// clMaterial
// FMaterialDesc_FProperties_FAmbientColor
// LStr::StrToVec4

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FAmbientColor_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FAmbientColor=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// AmbientColor
// FMaterialDesc.FProperties.FAmbientColor
// clMaterial
// FMaterialDesc_FProperties_FAmbientColor
// LStr::Vec4ToStr

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FAmbientColor_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FAmbientColor); 
   *Result = new mlNode("AmbientColor" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// AmbientMap
// ""
// clMaterial
// SetAmbientMap
// LStr::BufferFromString

bool LoadScalarField_clMaterial_AmbientMap_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->SetAmbientMap(LStr::BufferFromString( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// AmbientMap
// ""
// clMaterial
// GetAmbientMap
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_AmbientMap_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->GetAmbientMap() ); 
   *Result = new mlNode("AmbientMap" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// DiffuseColor
// FMaterialDesc.FProperties.FDiffuseColor
// clMaterial
// FMaterialDesc_FProperties_FDiffuseColor
// LStr::StrToVec4

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FDiffuseColor_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FDiffuseColor=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DiffuseColor
// FMaterialDesc.FProperties.FDiffuseColor
// clMaterial
// FMaterialDesc_FProperties_FDiffuseColor
// LStr::Vec4ToStr

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FDiffuseColor_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FDiffuseColor); 
   *Result = new mlNode("DiffuseColor" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// DiffuseMap
// ""
// clMaterial
// SetDiffuseMap
// LStr::BufferFromString

bool LoadScalarField_clMaterial_DiffuseMap_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->SetDiffuseMap(LStr::BufferFromString( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// DiffuseMap
// ""
// clMaterial
// GetDiffuseMap
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_DiffuseMap_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->GetDiffuseMap() ); 
   *Result = new mlNode("DiffuseMap" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Transparency
// FMaterialDesc.FProperties.FTransparency
// clMaterial
// FMaterialDesc_FProperties_FTransparency
// LStr::ToFloat

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FTransparency_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FTransparency=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Transparency
// FMaterialDesc.FProperties.FTransparency
// clMaterial
// FMaterialDesc_FProperties_FTransparency
// LStr::ToStrEpsilon

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FTransparency_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FTransparency); 
   *Result = new mlNode("Transparency" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// AlphaTransparency
// FMaterialDesc.FAlphaTransparency
// clMaterial
// FMaterialDesc_FAlphaTransparency
// LStr::ToBool

bool LoadScalarField_clMaterial_FMaterialDesc_FAlphaTransparency_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FAlphaTransparency=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// AlphaTransparency
// FMaterialDesc.FAlphaTransparency
// clMaterial
// FMaterialDesc_FAlphaTransparency
// LStr::ToStr_Bool

bool SaveScalarField_clMaterial_FMaterialDesc_FAlphaTransparency_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FAlphaTransparency); 
   *Result = new mlNode("AlphaTransparency" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// SpecularColor
// FMaterialDesc.FProperties.FSpecularColor
// clMaterial
// FMaterialDesc_FProperties_FSpecularColor
// LStr::StrToVec4

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FSpecularColor_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FSpecularColor=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// SpecularColor
// FMaterialDesc.FProperties.FSpecularColor
// clMaterial
// FMaterialDesc_FProperties_FSpecularColor
// LStr::Vec4ToStr

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FSpecularColor_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FSpecularColor); 
   *Result = new mlNode("SpecularColor" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// SpecularMap
// ""
// clMaterial
// SetSpecularMap
// LStr::BufferFromString

bool LoadScalarField_clMaterial_SpecularMap_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->SetSpecularMap(LStr::BufferFromString( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// SpecularMap
// ""
// clMaterial
// GetSpecularMap
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_SpecularMap_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->GetSpecularMap() ); 
   *Result = new mlNode("SpecularMap" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Shine
// FMaterialDesc.FProperties.FShine
// clMaterial
// FMaterialDesc_FProperties_FShine
// LStr::StrToVec4

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FShine_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FShine=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Shine
// FMaterialDesc.FProperties.FShine
// clMaterial
// FMaterialDesc_FProperties_FShine
// LStr::Vec4ToStr

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FShine_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FShine); 
   *Result = new mlNode("Shine" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShineStrength
// FMaterialDesc.FProperties.FShineStrength
// clMaterial
// FMaterialDesc_FProperties_FShineStrength
// LStr::ToFloat

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FShineStrength_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FShineStrength=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShineStrength
// FMaterialDesc.FProperties.FShineStrength
// clMaterial
// FMaterialDesc_FProperties_FShineStrength
// LStr::ToStrEpsilon

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FShineStrength_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FShineStrength); 
   *Result = new mlNode("ShineStrength" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Roughness
// FMaterialDesc.FProperties.FRoughness
// clMaterial
// FMaterialDesc_FProperties_FRoughness
// LStr::ToFloat

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FRoughness_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FRoughness=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Roughness
// FMaterialDesc.FProperties.FRoughness
// clMaterial
// FMaterialDesc_FProperties_FRoughness
// LStr::ToStrEpsilon

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FRoughness_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FRoughness); 
   *Result = new mlNode("Roughness" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// CastShadow
// FMaterialDesc.FCastShadow
// clMaterial
// FMaterialDesc_FCastShadow
// LStr::ToBool

bool LoadScalarField_clMaterial_FMaterialDesc_FCastShadow_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FCastShadow=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// CastShadow
// FMaterialDesc.FCastShadow
// clMaterial
// FMaterialDesc_FCastShadow
// LStr::ToStr_Bool

bool SaveScalarField_clMaterial_FMaterialDesc_FCastShadow_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FCastShadow); 
   *Result = new mlNode("CastShadow" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ReceiveShadow
// FMaterialDesc.FReceiveShadow
// clMaterial
// FMaterialDesc_FReceiveShadow
// LStr::ToBool

bool LoadScalarField_clMaterial_FMaterialDesc_FReceiveShadow_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FReceiveShadow=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ReceiveShadow
// FMaterialDesc.FReceiveShadow
// clMaterial
// FMaterialDesc_FReceiveShadow
// LStr::ToStr_Bool

bool SaveScalarField_clMaterial_FMaterialDesc_FReceiveShadow_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FReceiveShadow); 
   *Result = new mlNode("ReceiveShadow" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ScaleCoef
// FMaterialDesc.FScaleCoef
// clMaterial
// FMaterialDesc_FScaleCoef
// LStr::ToFloat

bool LoadScalarField_clMaterial_FMaterialDesc_FScaleCoef_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FScaleCoef=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ScaleCoef
// FMaterialDesc.FScaleCoef
// clMaterial
// FMaterialDesc_FScaleCoef
// LStr::ToStrEpsilon

bool SaveScalarField_clMaterial_FMaterialDesc_FScaleCoef_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FScaleCoef); 
   *Result = new mlNode("ScaleCoef" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Tesselation
// FMaterialDesc.FTesselation
// clMaterial
// FMaterialDesc_FTesselation
// LStr::ToFloat

bool LoadScalarField_clMaterial_FMaterialDesc_FTesselation_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FTesselation=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Tesselation
// FMaterialDesc.FTesselation
// clMaterial
// FMaterialDesc_FTesselation
// LStr::ToStrEpsilon

bool SaveScalarField_clMaterial_FMaterialDesc_FTesselation_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FTesselation); 
   *Result = new mlNode("Tesselation" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// RenderingOrder
// FMaterialDesc.FRenderingOrder
// clMaterial
// FMaterialDesc_FRenderingOrder
// LStr::ToInt

bool LoadScalarField_clMaterial_FMaterialDesc_FRenderingOrder_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FRenderingOrder=LStr::ToInt( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// RenderingOrder
// FMaterialDesc.FRenderingOrder
// clMaterial
// FMaterialDesc_FRenderingOrder
// LStr::ToStr

bool SaveScalarField_clMaterial_FMaterialDesc_FRenderingOrder_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FRenderingOrder); 
   *Result = new mlNode("RenderingOrder" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// UseAmbientOnly
// FMaterialDesc.FUseAmbientOnly
// clMaterial
// FMaterialDesc_FUseAmbientOnly
// LStr::ToBool

bool LoadScalarField_clMaterial_FMaterialDesc_FUseAmbientOnly_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FUseAmbientOnly=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UseAmbientOnly
// FMaterialDesc.FUseAmbientOnly
// clMaterial
// FMaterialDesc_FUseAmbientOnly
// LStr::ToStr_Bool

bool SaveScalarField_clMaterial_FMaterialDesc_FUseAmbientOnly_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FUseAmbientOnly); 
   *Result = new mlNode("UseAmbientOnly" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Wireframe
// FMaterialDesc.FWireframe
// clMaterial
// FMaterialDesc_FWireframe
// LStr::ToBool

bool LoadScalarField_clMaterial_FMaterialDesc_FWireframe_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FWireframe=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Wireframe
// FMaterialDesc.FWireframe
// clMaterial
// FMaterialDesc_FWireframe
// LStr::ToStr_Bool

bool SaveScalarField_clMaterial_FMaterialDesc_FWireframe_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FWireframe); 
   *Result = new mlNode("Wireframe" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// BumpMap
// ""
// clMaterial
// SetBumpMap
// LStr::BufferFromString

bool LoadScalarField_clMaterial_BumpMap_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->SetBumpMap(LStr::BufferFromString( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// BumpMap
// ""
// clMaterial
// GetBumpMap
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_BumpMap_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->GetBumpMap() ); 
   *Result = new mlNode("BumpMap" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Reflectivity
// FMaterialDesc.FProperties.FReflectivity
// clMaterial
// FMaterialDesc_FProperties_FReflectivity
// LStr::ToFloat

bool LoadScalarField_clMaterial_FMaterialDesc_FProperties_FReflectivity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->FMaterialDesc.FProperties.FReflectivity=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Reflectivity
// FMaterialDesc.FProperties.FReflectivity
// clMaterial
// FMaterialDesc_FProperties_FReflectivity
// LStr::ToStrEpsilon

bool SaveScalarField_clMaterial_FMaterialDesc_FProperties_FReflectivity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMaterial*>(Obj)->FMaterialDesc.FProperties.FReflectivity); 
   *Result = new mlNode("Reflectivity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// ReflectionMap
// ""
// clMaterial
// SetReflectionMap
// LStr::BufferFromString

bool LoadScalarField_clMaterial_ReflectionMap_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->SetReflectionMap(LStr::BufferFromString( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// ReflectionMap
// ""
// clMaterial
// GetReflectionMap
// LStr::StringFromBuffer

bool SaveScalarField_clMaterial_ReflectionMap_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::StringFromBuffer(dynamic_cast<clMaterial*>(Obj)->GetReflectionMap() ); 
   *Result = new mlNode("ReflectionMap" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// PlanarReflection
// ""
// clMaterial
// SetPlanarReflection
// LStr::StrToVec4

bool LoadScalarField_clMaterial_PlanarReflection_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMaterial*>(Obj))->SetPlanarReflection(LStr::StrToVec4( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// PlanarReflection
// ""
// clMaterial
// GetPlanarReflection
// LStr::Vec4ToStr

bool SaveScalarField_clMaterial_PlanarReflection_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clMaterial*>(Obj)->GetPlanarReflection() ); 
   *Result = new mlNode("PlanarReflection" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass162(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMaterial>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMaterial,Mtd)
   _RM__(GetCachingDir)
   _RM__(IsSameResource)
   _RM__(GetMaterialDesc)
   _RM__(SetMaterialDesc)
   _RM__(SetPlanarReflection)
   _RM__(GetPlanarReflection)
   _RM__(SetAmbientMap)
   _RM__(GetAmbientMap)
   _RM__(SetDiffuseMap)
   _RM__(GetDiffuseMap)
   _RM__(SetSpecularMap)
   _RM__(GetSpecularMap)
   _RM__(SetBumpMap)
   _RM__(GetBumpMap)
   _RM__(SetReflectionMap)
   _RM__(GetReflectionMap)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FMaterialName, clMaterial, MaterialName)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FMaterialClass, clMaterial, MaterialClass)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FAmbientColor, clMaterial, AmbientColor)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(AmbientMap, clMaterial, AmbientMap)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FDiffuseColor, clMaterial, DiffuseColor)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(DiffuseMap, clMaterial, DiffuseMap)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FTransparency, clMaterial, Transparency)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FAlphaTransparency, clMaterial, AlphaTransparency)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FSpecularColor, clMaterial, SpecularColor)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(SpecularMap, clMaterial, SpecularMap)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FShine, clMaterial, Shine)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FShineStrength, clMaterial, ShineStrength)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FRoughness, clMaterial, Roughness)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FCastShadow, clMaterial, CastShadow)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FReceiveShadow, clMaterial, ReceiveShadow)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FScaleCoef, clMaterial, ScaleCoef)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FTesselation, clMaterial, Tesselation)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FRenderingOrder, clMaterial, RenderingOrder)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FUseAmbientOnly, clMaterial, UseAmbientOnly)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FWireframe, clMaterial, Wireframe)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(BumpMap, clMaterial, BumpMap)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaterialDesc_FProperties_FReflectivity, clMaterial, Reflectivity)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(ReflectionMap, clMaterial, ReflectionMap)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(PlanarReflection, clMaterial, PlanarReflection)

   StaticClass->SetSuperClassName( "iResource" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iOStream
            // Adding abstract: GetFileName
            // Adding abstract: Seek
            // Adding abstract: GetFilePos
            // Adding abstract: BlockWrite
         // Class: clMemFileWriter
            // Overriding abstract: GetFileName
            // Overriding abstract: Seek
            // Overriding abstract: GetFilePos
            // Overriding abstract: BlockWrite

void RegisterPackageLinderdaumCoreClass163(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMemFileWriter>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMemFileWriter,Mtd)
   _RM__(SetFileName)
   _RM__(GetFileName)
   _RM__(Seek)
   _RM__(GetFilePos)
   _RM__(BlockWrite)
   _RM__(GetContainer)
   _RM__(SetContainer)
   _RM__(GetMaxSize)
   _RM__(SetMaxSize)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iOStream" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iRAWFile
            // Adding abstract: GetFileData
            // Adding abstract: GetFileSize
         // Class: clMemRAWFile
            // Overriding abstract: GetFileData
            // Overriding abstract: GetFileSize

void RegisterPackageLinderdaumCoreClass164(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMemRAWFile>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clMemRAWFile,GetFileData )
   REG_CLS_MTD( clMemRAWFile,GetFileSize )
   REG_CLS_MTD( clMemRAWFile,CreateFromString )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iRAWFile" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iMountPoint
            // Adding abstract: FileExistsAtThisPoint
            // Adding abstract: MapToThisPoint
            // Adding abstract: CreateRAWFile
            // Adding abstract: GetFileTime
         // Class: clMemoryMountPoint
            // Overriding abstract: FileExistsAtThisPoint
            // Overriding abstract: GetFileTime
            // Overriding abstract: CreateRAWFile
            // Overriding abstract: MapToThisPoint

void RegisterPackageLinderdaumCoreClass165(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMemoryMountPoint>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMemoryMountPoint,Mtd)
   _RM__(RegisterFile)
   _RM__(UnregisterFile)
   _RM__(FileExistsAtThisPoint)
   _RM__(GetFileTime)
   _RM__(CreateRAWFile)
   _RM__(MapToThisPoint)
   _RM__(IsPhysical)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iMountPoint" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Geometry/Mesh.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clMesh

void RegisterPackageLinderdaumCoreClass166(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMesh>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMesh,Mtd)
   _RM__(CloneMesh)
   _RM__(MergeRigids)
   _RM__(MergeSimilarRigids)
   _RM__(MergeWith)
   _RM__(Transform)
   _RM__(FlattenMesh)
   _RM__(CopyMaterialsFrom)
   _RM__(LoadMesh)
   _RM__(SaveMesh)
   _RM__(SaveToStream)
   _RM__(LoadFromStream)
   _RM__(SaveToBinaryFile)
   _RM__(LoadFromBinaryFile)
   _RM__(GetAnimSequenceByName)
   _RM__(GetAnimation)
   _RM__(GetAnimSequenceName)
   _RM__(GetNumAnimSequences)
   _RM__(LoadAnimStates)
   _RM__(AddVertexAttribs)
   _RM__(RemoveVertexAttribs)
   _RM__(FindRigidByName)
   _RM__(AddMaterial)
   _RM__(RecalculateLocalFromGlobal)
   _RM__(GetBoundingBox)
   _RM__(GetCachedBoundingBox)
   _RM__(PrecalculateBoundingBoxes)
   _RM__(GetMaterialsCount)
   _RM__(GetMaterialDesc)
   _RM__(GetRigidsCount)
   _RM__(GetRigid)
   _RM__(GetRigidName)
   _RM__(GetParentRef)
   _RM__(GetRigidMaterial)
   _RM__(GetMaterial)
   _RM__(GetLocalTransform)
   _RM__(GetVertexArray)
   _RM__(GetPackedSkeleton)
   _RM__(IntersectWithRay)
   _RM__(IntersectWithRayIdx)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clMetricScrewGenerator
            // Overriding abstract: R_and_dR
// SCALAR_PROPERTY_LOAD__FIELD
// R
// FR
// clMetricScrewGenerator
// FR
// LStr::ToFloat

bool LoadScalarField_clMetricScrewGenerator_FR_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMetricScrewGenerator*>(Obj))->FR=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// R
// FR
// clMetricScrewGenerator
// FR
// LStr::ToStrEpsilon

bool SaveScalarField_clMetricScrewGenerator_FR_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMetricScrewGenerator*>(Obj)->FR); 
   *Result = new mlNode("R" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// D
// FD
// clMetricScrewGenerator
// FD
// LStr::ToFloat

bool LoadScalarField_clMetricScrewGenerator_FD_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMetricScrewGenerator*>(Obj))->FD=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// D
// FD
// clMetricScrewGenerator
// FD
// LStr::ToStrEpsilon

bool SaveScalarField_clMetricScrewGenerator_FD_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMetricScrewGenerator*>(Obj)->FD); 
   *Result = new mlNode("D" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// H
// FH
// clMetricScrewGenerator
// FH
// LStr::ToFloat

bool LoadScalarField_clMetricScrewGenerator_FH_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clMetricScrewGenerator*>(Obj))->FH=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// H
// FH
// clMetricScrewGenerator
// FH
// LStr::ToStrEpsilon

bool SaveScalarField_clMetricScrewGenerator_FH_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clMetricScrewGenerator*>(Obj)->FH); 
   *Result = new mlNode("H" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass167(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMetricScrewGenerator>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clMetricScrewGenerator,R_and_dR )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FR, clMetricScrewGenerator, R)

   REGISTER_PROPERTY__SCALAR_FIELD(FD, clMetricScrewGenerator, D)

   REGISTER_PROPERTY__SCALAR_FIELD(FH, clMetricScrewGenerator, H)

   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Audio/MOD.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iWaveDataProvider
            // Adding abstract: Clone
            // Adding abstract: IsStreaming
            // Adding abstract: IsEOF
            // Adding abstract: GetWaveDataFormat
            // Adding abstract: GetWaveData
            // Adding abstract: GetWaveDataSize
            // Adding abstract: StreamWaveData
            // Adding abstract: Seek
         // Class: clModPlugProvider
            // Overriding abstract: IsStreaming
            // Overriding abstract: IsEOF
            // Overriding abstract: GetWaveDataFormat
            // Overriding abstract: GetWaveData
            // Overriding abstract: GetWaveDataSize
            // Overriding abstract: StreamWaveData
            // Overriding abstract: Seek
      // Abstract method: Clone

void RegisterPackageLinderdaumCoreClass168(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeAbstractStaticClass<clModPlugProvider>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clModPlugProvider,Mtd)
   _RM__(StartFile)
   _RM__(Stop)
   _RM__(IsStreaming)
   _RM__(IsEOF)
   _RM__(GetWaveDataFormat)
   _RM__(GetWaveData)
   _RM__(GetWaveDataSize)
   _RM__(StreamWaveData)
   _RM__(Seek)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iWaveDataProvider" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clMoebiusBand
            // Overriding abstract: R_and_dR

void RegisterPackageLinderdaumCoreClass169(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMoebiusBand>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clMoebiusBand,R_and_dR )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clMonkeySaddle
            // Overriding abstract: R_and_dR

void RegisterPackageLinderdaumCoreClass170(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMonkeySaddle>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clMonkeySaddle,R_and_dR )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iMountPoint
            // Adding abstract: FileExistsAtThisPoint
            // Adding abstract: MapToThisPoint
            // Adding abstract: CreateRAWFile
            // Adding abstract: GetFileTime
         // Class: clMountPoint
            // Overriding abstract: FileExistsAtThisPoint
            // Overriding abstract: MapToThisPoint
            // Overriding abstract: CreateRAWFile
            // Overriding abstract: GetFileTime

void RegisterPackageLinderdaumCoreClass171(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass1<clMountPoint, const LString&>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMountPoint,Mtd)
   _RM__(FileExistsAtThisPoint)
   _RM__(MapToThisPoint)
   _RM__(CreateRAWFile)
   _RM__(GetFileTime)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iMountPoint" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iInputDevice
            // Adding abstract: GetName
            // Adding abstract: Poll
            // Adding abstract: Start
            // Adding abstract: IsStarted
            // Adding abstract: Stop
            // Adding abstract: GetNumAxes
            // Adding abstract: SetAxisRange
            // Adding abstract: SetAxisDeadZone
            // Adding abstract: SetAxisSaturation
            // Adding abstract: GetAxisValue
            // Adding abstract: GetAxisName
            // Adding abstract: SetAxisValue
            // Adding abstract: GetKeyName
            // Adding abstract: IsPressed
            // Adding abstract: GetNumKeys
            // Adding abstract: SetKeyState
         // Class: clMouseDevice
            // Overriding abstract: GetName
            // Overriding abstract: Poll
            // Overriding abstract: Start
            // Overriding abstract: IsStarted
            // Overriding abstract: Stop
            // Overriding abstract: GetNumAxes
            // Overriding abstract: SetAxisRange
            // Overriding abstract: SetAxisDeadZone
            // Overriding abstract: SetAxisSaturation
            // Overriding abstract: GetAxisValue
            // Overriding abstract: GetAxisName
            // Overriding abstract: SetAxisValue
            // Overriding abstract: GetKeyName
            // Overriding abstract: IsPressed
            // Overriding abstract: GetNumKeys
            // Overriding abstract: SetKeyState

void RegisterPackageLinderdaumCoreClass172(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clMouseDevice>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clMouseDevice,Mtd)
   _RM__(GetName)
   _RM__(Poll)
   _RM__(Start)
   _RM__(IsStarted)
   _RM__(Stop)
   _RM__(GetNumAxes)
   _RM__(SetAxisRange)
   _RM__(SetAxisDeadZone)
   _RM__(SetAxisSaturation)
   _RM__(GetAxisValue)
   _RM__(GetAxisName)
   _RM__(SetAxisValue)
   _RM__(GetKeyName)
   _RM__(IsPressed)
   _RM__(GetNumKeys)
   _RM__(SetKeyState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iInputDevice" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iCameraPositioner
            // Adding abstract: Update
         // Class: clPanOrbitPositioner
            // Overriding abstract: Update
// SCALAR_PROPERTY_LOAD__FIELD
// DefaultOrbitingVelocity
// FDefaultOrbitingVelocity
// clPanOrbitPositioner
// FDefaultOrbitingVelocity
// LStr::ToFloat

bool LoadScalarField_clPanOrbitPositioner_FDefaultOrbitingVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FDefaultOrbitingVelocity=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DefaultOrbitingVelocity
// FDefaultOrbitingVelocity
// clPanOrbitPositioner
// FDefaultOrbitingVelocity
// LStr::ToStrEpsilon

bool SaveScalarField_clPanOrbitPositioner_FDefaultOrbitingVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clPanOrbitPositioner*>(Obj)->FDefaultOrbitingVelocity); 
   *Result = new mlNode("DefaultOrbitingVelocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// DefaultPanningVelocity
// FDefaultPanningVelocity
// clPanOrbitPositioner
// FDefaultPanningVelocity
// LStr::ToFloat

bool LoadScalarField_clPanOrbitPositioner_FDefaultPanningVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FDefaultPanningVelocity=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DefaultPanningVelocity
// FDefaultPanningVelocity
// clPanOrbitPositioner
// FDefaultPanningVelocity
// LStr::ToStrEpsilon

bool SaveScalarField_clPanOrbitPositioner_FDefaultPanningVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clPanOrbitPositioner*>(Obj)->FDefaultPanningVelocity); 
   *Result = new mlNode("DefaultPanningVelocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// DefaultZoomVelocity
// FDefaultZoomVelocity
// clPanOrbitPositioner
// FDefaultZoomVelocity
// LStr::ToFloat

bool LoadScalarField_clPanOrbitPositioner_FDefaultZoomVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FDefaultZoomVelocity=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DefaultZoomVelocity
// FDefaultZoomVelocity
// clPanOrbitPositioner
// FDefaultZoomVelocity
// LStr::ToStrEpsilon

bool SaveScalarField_clPanOrbitPositioner_FDefaultZoomVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clPanOrbitPositioner*>(Obj)->FDefaultZoomVelocity); 
   *Result = new mlNode("DefaultZoomVelocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MinPanningVelocity
// FMinPanningVelocity
// clPanOrbitPositioner
// FMinPanningVelocity
// LStr::ToFloat

bool LoadScalarField_clPanOrbitPositioner_FMinPanningVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FMinPanningVelocity=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MinPanningVelocity
// FMinPanningVelocity
// clPanOrbitPositioner
// FMinPanningVelocity
// LStr::ToStrEpsilon

bool SaveScalarField_clPanOrbitPositioner_FMinPanningVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clPanOrbitPositioner*>(Obj)->FMinPanningVelocity); 
   *Result = new mlNode("MinPanningVelocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MinZoomingVelocity
// FMinZoomingVelocity
// clPanOrbitPositioner
// FMinZoomingVelocity
// LStr::ToFloat

bool LoadScalarField_clPanOrbitPositioner_FMinZoomingVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FMinZoomingVelocity=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MinZoomingVelocity
// FMinZoomingVelocity
// clPanOrbitPositioner
// FMinZoomingVelocity
// LStr::ToStrEpsilon

bool SaveScalarField_clPanOrbitPositioner_FMinZoomingVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clPanOrbitPositioner*>(Obj)->FMinZoomingVelocity); 
   *Result = new mlNode("MinZoomingVelocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ViewerPosition
// FViewerPosition
// clPanOrbitPositioner
// FViewerPosition
// LStr::StrToVec3

bool LoadScalarField_clPanOrbitPositioner_FViewerPosition_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FViewerPosition=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ViewerPosition
// FViewerPosition
// clPanOrbitPositioner
// FViewerPosition
// LStr::Vec3ToStr

bool SaveScalarField_clPanOrbitPositioner_FViewerPosition_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clPanOrbitPositioner*>(Obj)->FViewerPosition); 
   *Result = new mlNode("ViewerPosition" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// UpVector
// FUpVector
// clPanOrbitPositioner
// FUpVector
// LStr::StrToVec3

bool LoadScalarField_clPanOrbitPositioner_FUpVector_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FUpVector=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UpVector
// FUpVector
// clPanOrbitPositioner
// FUpVector
// LStr::Vec3ToStr

bool SaveScalarField_clPanOrbitPositioner_FUpVector_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clPanOrbitPositioner*>(Obj)->FUpVector); 
   *Result = new mlNode("UpVector" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Target
// FTarget
// clPanOrbitPositioner
// FTarget
// LStr::StrToVec3

bool LoadScalarField_clPanOrbitPositioner_FTarget_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FTarget=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Target
// FTarget
// clPanOrbitPositioner
// FTarget
// LStr::Vec3ToStr

bool SaveScalarField_clPanOrbitPositioner_FTarget_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clPanOrbitPositioner*>(Obj)->FTarget); 
   *Result = new mlNode("Target" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MinDistance
// FMinDistance
// clPanOrbitPositioner
// FMinDistance
// LStr::ToFloat

bool LoadScalarField_clPanOrbitPositioner_FMinDistance_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clPanOrbitPositioner*>(Obj))->FMinDistance=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MinDistance
// FMinDistance
// clPanOrbitPositioner
// FMinDistance
// LStr::ToStrEpsilon

bool SaveScalarField_clPanOrbitPositioner_FMinDistance_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clPanOrbitPositioner*>(Obj)->FMinDistance); 
   *Result = new mlNode("MinDistance" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass173(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clPanOrbitPositioner>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clPanOrbitPositioner,Update )
   REG_CLS_MTD( clPanOrbitPositioner,Reset )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FDefaultOrbitingVelocity, clPanOrbitPositioner, DefaultOrbitingVelocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FDefaultPanningVelocity, clPanOrbitPositioner, DefaultPanningVelocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FDefaultZoomVelocity, clPanOrbitPositioner, DefaultZoomVelocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FMinPanningVelocity, clPanOrbitPositioner, MinPanningVelocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FMinZoomingVelocity, clPanOrbitPositioner, MinZoomingVelocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FViewerPosition, clPanOrbitPositioner, ViewerPosition)

   REGISTER_PROPERTY__SCALAR_FIELD(FUpVector, clPanOrbitPositioner, UpVector)

   REGISTER_PROPERTY__SCALAR_FIELD(FTarget, clPanOrbitPositioner, Target)

   REGISTER_PROPERTY__SCALAR_FIELD(FMinDistance, clPanOrbitPositioner, MinDistance)

   StaticClass->SetSuperClassName( "iCameraPositioner" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clParallel_Tunneller.h"

void RegisterPackageLinderdaumCoreClass174(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clParallel_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clParallel,DumpDot )
   REG_CLS_MTD( clParallel,Update )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clCompositeBehaviour" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clBehaviour
         // Class: clCompositeBehaviour
         // Class: clParallel

void RegisterPackageLinderdaumCoreClass175(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clParallel>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clParallel,DumpDot )
   REG_CLS_MTD( clParallel,Update )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clCompositeBehaviour" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Particles/ParticleSystem.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clParticleSystem

void RegisterPackageLinderdaumCoreClass176(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clParticleSystem>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clParticleSystem,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetShader)
   _RM__(UpdateParticles)
   _RM__(AddParticle)
   _RM__(GetParticles)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clPinchZoomHandler_Tunneller.h"

void RegisterPackageLinderdaumCoreClass177(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clPinchZoomHandler_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clPinchZoomHandler,Mtd)
   _RM__(IsPinchZoomValid)
   _RM__(GetPinchZoomFactor)
   _RM__(GetPinchInitialDistance)
   _RM__(GetPinchInitialPoint1)
   _RM__(GetPinchInitialPoint2)
   _RM__(GetPinchInitialCenter)
   _RM__(GetPinchCurrentPoint1)
   _RM__(GetPinchCurrentPoint2)
   _RM__(GetPinchCurrentCenter)
   _RM__(GetPinchZoomMatrix)
   _RM__(GetPinchRotationMatrix)
   _RM__(GetPinchTranslationMatrix)
   _RM__(GetPinchCombinedMatrix)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGestureHandler" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGestureHandler
         // Class: clPinchZoomHandler

void RegisterPackageLinderdaumCoreClass178(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clPinchZoomHandler>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clPinchZoomHandler,Mtd)
   _RM__(IsPinchZoomValid)
   _RM__(GetPinchZoomFactor)
   _RM__(GetPinchInitialDistance)
   _RM__(GetPinchInitialPoint1)
   _RM__(GetPinchInitialPoint2)
   _RM__(GetPinchInitialCenter)
   _RM__(GetPinchCurrentPoint1)
   _RM__(GetPinchCurrentPoint2)
   _RM__(GetPinchCurrentCenter)
   _RM__(GetPinchZoomMatrix)
   _RM__(GetPinchRotationMatrix)
   _RM__(GetPinchTranslationMatrix)
   _RM__(GetPinchCombinedMatrix)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGestureHandler" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/VisualScene/Prefab.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clPrefab

void RegisterPackageLinderdaumCoreClass179(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clPrefab>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clPrefab,Mtd)
   _RM__(ImportASE)
   _RM__(CloneTemplate)
   _RM__(GetCollisionGeom)
   _RM__(GetGeom)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clPrefabCollection

void RegisterPackageLinderdaumCoreClass180(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clPrefabCollection>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clPrefabCollection,Mtd)
   _RM__(GetObjectByName)
   _RM__(LoadDirectory)
   _RM__(GetCount)
   _RM__(GetItem)
   _RM__(Clear)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iRAWFile
            // Adding abstract: GetFileData
            // Adding abstract: GetFileSize
         // Class: clRAWFile
            // Overriding abstract: GetFileData
            // Overriding abstract: GetFileSize

void RegisterPackageLinderdaumCoreClass181(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRAWFile>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRAWFile,Mtd)
   _RM__(Open)
   _RM__(Close)
   _RM__(GetFileData)
   _RM__(GetFileSize)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iRAWFile" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iRAWFile
            // Adding abstract: GetFileData
            // Adding abstract: GetFileSize
         // Class: clRAWFileNonMapped
            // Overriding abstract: GetFileData
            // Overriding abstract: GetFileSize

void RegisterPackageLinderdaumCoreClass182(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRAWFileNonMapped>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRAWFileNonMapped,Mtd)
   _RM__(Open)
   _RM__(Close)
   _RM__(GetFileData)
   _RM__(GetFileSize)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iRAWFile" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Images/RAW.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clRAWLoader

void RegisterPackageLinderdaumCoreClass183(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRAWLoader>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clRAWLoader,AfterConstruction )
   REG_CLS_MTD( clRAWLoader,Load )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iCameraPositioner
            // Adding abstract: Update
         // Class: clStdCameraPositioner
            // Overriding abstract: Update
         // Class: clRailPositioner

void RegisterPackageLinderdaumCoreClass184(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRailPositioner>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clRailPositioner,Update )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clStdCameraPositioner" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/RenderState.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iResource
            // Adding abstract: GetCachingDir
         // Class: clRenderState
            // Overriding abstract: GetCachingDir
// SCALAR_PROPERTY_LOAD__SETTER
// BlendFunc
// ""
// clRenderState
// SetBlendFunc
// EMPTY_CONVERTER

bool LoadScalarField_clRenderState_BlendFunc_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->SetBlendFunc(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// BlendFunc
// ""
// clRenderState
// GetBlendFunc
// EMPTY_CONVERTER

bool SaveScalarField_clRenderState_BlendFunc_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clRenderState*>(Obj)->GetBlendFunc() ); 
   *Result = new mlNode("BlendFunc" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// DepthTest
// FDepthTest
// clRenderState
// FDepthTest
// LStr::ToBool

bool LoadScalarField_clRenderState_FDepthTest_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->FDepthTest=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DepthTest
// FDepthTest
// clRenderState
// FDepthTest
// LStr::ToStr_Bool

bool SaveScalarField_clRenderState_FDepthTest_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clRenderState*>(Obj)->FDepthTest); 
   *Result = new mlNode("DepthTest" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// DepthWrites
// FDepthWrites
// clRenderState
// FDepthWrites
// LStr::ToBool

bool LoadScalarField_clRenderState_FDepthWrites_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->FDepthWrites=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DepthWrites
// FDepthWrites
// clRenderState
// FDepthWrites
// LStr::ToStr_Bool

bool SaveScalarField_clRenderState_FDepthWrites_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clRenderState*>(Obj)->FDepthWrites); 
   *Result = new mlNode("DepthWrites" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ColorWrites
// FColorWrites
// clRenderState
// FColorWrites
// LStr::ToBool

bool LoadScalarField_clRenderState_FColorWrites_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->FColorWrites=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ColorWrites
// FColorWrites
// clRenderState
// FColorWrites
// LStr::ToStr_Bool

bool SaveScalarField_clRenderState_FColorWrites_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clRenderState*>(Obj)->FColorWrites); 
   *Result = new mlNode("ColorWrites" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// BackfaceCulling
// FBackfaceCulling
// clRenderState
// FBackfaceCulling
// LStr::ToBool

bool LoadScalarField_clRenderState_FBackfaceCulling_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->FBackfaceCulling=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// BackfaceCulling
// FBackfaceCulling
// clRenderState
// FBackfaceCulling
// LStr::ToStr_Bool

bool SaveScalarField_clRenderState_FBackfaceCulling_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clRenderState*>(Obj)->FBackfaceCulling); 
   *Result = new mlNode("BackfaceCulling" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Backfacing
// FBackFacing
// clRenderState
// FBackFacing
// LStr::ToBool

bool LoadScalarField_clRenderState_FBackFacing_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->FBackFacing=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Backfacing
// FBackFacing
// clRenderState
// FBackFacing
// LStr::ToStr_Bool

bool SaveScalarField_clRenderState_FBackFacing_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clRenderState*>(Obj)->FBackFacing); 
   *Result = new mlNode("Backfacing" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Images
// FImages
// clRenderState
// EMPTY_CONVERTER

bool LoadScalarItem_clRenderState_FImages_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clRenderState*>(Obj)-> TheArrayName [i] = (EMPTY_CONVERTER( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clRenderState*>(Obj)->FImages[i] = (EMPTY_CONVERTER( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Images
// FImages
// clRenderState
// EMPTY_CONVERTER

bool SaveScalarItem_clRenderState_FImages_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clRenderState*>(Obj)->FImages[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FImages
// clRenderState

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FImages,clRenderState) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FImages,clRenderState) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FImages,clRenderState)



// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Uniforms
// FUniforms
// clRenderState
// EMPTY_CONVERTER

bool LoadScalarItem_clRenderState_FUniforms_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clRenderState*>(Obj)-> TheArrayName [i] = (EMPTY_CONVERTER( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clRenderState*>(Obj)->FUniforms[i] = (EMPTY_CONVERTER( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Uniforms
// FUniforms
// clRenderState
// EMPTY_CONVERTER

bool SaveScalarItem_clRenderState_FUniforms_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clRenderState*>(Obj)->FUniforms[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FUniforms
// clRenderState

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FUniforms,clRenderState) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FUniforms,clRenderState) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FUniforms,clRenderState)



// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Defines
// FDefines
// clRenderState
// EMPTY_CONVERTER

bool LoadScalarItem_clRenderState_FDefines_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clRenderState*>(Obj)-> TheArrayName [i] = (EMPTY_CONVERTER( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clRenderState*>(Obj)->FDefines[i] = (EMPTY_CONVERTER( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Defines
// FDefines
// clRenderState
// EMPTY_CONVERTER

bool SaveScalarItem_clRenderState_FDefines_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clRenderState*>(Obj)->FDefines[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FDefines
// clRenderState

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FDefines,clRenderState) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FDefines,clRenderState) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FDefines,clRenderState)



// SCALAR_PROPERTY_LOAD__SETTER
// ShaderProgram
// ""
// clRenderState
// SetShaderProgramName
// EMPTY_CONVERTER

bool LoadScalarField_clRenderState_ShaderProgram_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRenderState*>(Obj))->SetShaderProgramName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// ShaderProgram
// ""
// clRenderState
// GetShaderProgramName
// EMPTY_CONVERTER

bool SaveScalarField_clRenderState_ShaderProgram_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clRenderState*>(Obj)->GetShaderProgramName() ); 
   *Result = new mlNode("ShaderProgram" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass185(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRenderState>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRenderState,Mtd)
   _RM__(AfterConstruction)
   _RM__(EndLoad)
   _RM__(GetCachingDir)
   _RM__(IsSameResource)
   _RM__(GetShaderProgram)
   _RM__(SetShaderProgram)
   _RM__(GetTextureForTextureUnit)
   _RM__(GetTexturesCount)
   _RM__(SetTexture)
   _RM__(SetBlending)
   _RM__(UpdateTextures)
   _RM__(CopyTo)
   _RM__(GetBlendFunc)
   _RM__(SetBlendFunc)
   _RM__(SetConsoleVar)
   _RM__(GetConsoleVar)
   _RM__(GetShaderProgramName)
   _RM__(SetShaderProgramName)
   _RM__(SetImage)
   _RM__(GetImage)
   _RM__(GetNumImages)
   _RM__(SetDefine)
   _RM__(GetDefine)
   _RM__(GetNumDefines)
   _RM__(SetUniform)
   _RM__(GetUniform)
   _RM__(GetNumUniforms)
   _RM__(UpdateRenderStateMask)
   _RM__(GetRenderStateMask)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(BlendFunc, clRenderState, BlendFunc)

   REGISTER_PROPERTY__SCALAR_FIELD(FDepthTest, clRenderState, DepthTest)

   REGISTER_PROPERTY__SCALAR_FIELD(FDepthWrites, clRenderState, DepthWrites)

   REGISTER_PROPERTY__SCALAR_FIELD(FColorWrites, clRenderState, ColorWrites)

   REGISTER_PROPERTY__SCALAR_FIELD(FBackfaceCulling, clRenderState, BackfaceCulling)

   REGISTER_PROPERTY__SCALAR_FIELD(FBackFacing, clRenderState, Backfacing)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FImages, clRenderState, Images)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FUniforms, clRenderState, Uniforms)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FDefines, clRenderState, Defines)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(ShaderProgram, clRenderState, ShaderProgram)

   StaticClass->SetSuperClassName( "iResource" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clRenderableString

void RegisterPackageLinderdaumCoreClass186(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRenderableString>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRenderableString,Mtd)
   _RM__(GetBitmap)
   _RM__(GetWidth)
   _RM__(GetHeight)
   _RM__(GetTextTexCoords)
   _RM__(GetTexture)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Postprocess/RenderingTechnique.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clRenderingTechnique
// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Postprocessors
// FPostprocessingPipeline
// clRenderingTechnique
// iPostprocessor

bool LoadObjectItem_clRenderingTechnique_FPostprocessingPipeline_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  iPostprocessor* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clRenderingTechnique* CastedObj = dynamic_cast<clRenderingTechnique*>(Obj); 
   if ( Res ) CastedObj->FPostprocessingPipeline[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Postprocessors
// FPostprocessingPipeline
// clRenderingTechnique

bool SaveObjectItem_clRenderingTechnique_FPostprocessingPipeline_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clRenderingTechnique*>(Obj)->FPostprocessingPipeline[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FPostprocessingPipeline
// clRenderingTechnique

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FPostprocessingPipeline,clRenderingTechnique) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FPostprocessingPipeline,clRenderingTechnique) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FPostprocessingPipeline,clRenderingTechnique)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FPostprocessingPipeline
// clRenderingTechnique

void DeleteFunction_clRenderingTechnique_FPostprocessingPipeline_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clRenderingTechnique_FPostprocessingPipeline_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clRenderingTechnique*>(Obj)->FPostprocessingPipeline[i] ->DisposeObject(); 
   }
   dynamic_cast<clRenderingTechnique*>(Obj)->FPostprocessingPipeline.clear(); 
}



// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// RenderTargets
// FRenderTargets
// clRenderingTechnique
// iRenderTarget

bool LoadObjectItem_clRenderingTechnique_FRenderTargets_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  iRenderTarget* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clRenderingTechnique* CastedObj = dynamic_cast<clRenderingTechnique*>(Obj); 
   if ( Res ) CastedObj->FRenderTargets[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// RenderTargets
// FRenderTargets
// clRenderingTechnique

bool SaveObjectItem_clRenderingTechnique_FRenderTargets_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clRenderingTechnique*>(Obj)->FRenderTargets[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FRenderTargets
// clRenderingTechnique

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FRenderTargets,clRenderingTechnique) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FRenderTargets,clRenderingTechnique) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FRenderTargets,clRenderingTechnique)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FRenderTargets
// clRenderingTechnique

void DeleteFunction_clRenderingTechnique_FRenderTargets_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clRenderingTechnique_FRenderTargets_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clRenderingTechnique*>(Obj)->FRenderTargets[i] ->DisposeObject(); 
   }
   dynamic_cast<clRenderingTechnique*>(Obj)->FRenderTargets.clear(); 
}





void RegisterPackageLinderdaumCoreClass187(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRenderingTechnique>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRenderingTechnique,Mtd)
   _RM__(AfterConstruction)
   _RM__(Render)
   _RM__(ProcessBuffer)
   _RM__(AddPostprocessor)
   _RM__(ClearPostprocessingPipeline)
   _RM__(GetPostprocessor)
   _RM__(SetPostprocessor)
   _RM__(GetPostprocessorsCount)
   _RM__(Reset)
   _RM__(RenderPostprocessingPipeline)
   _RM__(GetRenderTarget)
   _RM__(SetRenderTarget)
   _RM__(Debug_ShowTexture)
   _RM__(Debug_ShowDepth)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FPostprocessingPipeline, clRenderingTechnique, Postprocessors)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FRenderTargets, clRenderingTechnique, RenderTargets)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Resources/ResourcesManager.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clResourcesManager

void RegisterPackageLinderdaumCoreClass188(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clResourcesManager>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clResourcesManager,Mtd)
   _RM__(AfterConstruction)
   _RM__(CreateEmptyBlob)
   _RM__(CreateBlob)
   _RM__(CreateManagedBlob)
   _RM__(LoadWaveform)
   _RM__(LoadSP)
   _RM__(CreateImage)
   _RM__(CreateImageFromBitmap)
   _RM__(LoadImg)
   _RM__(LoadImgSync)
   _RM__(LoadImgHints)
   _RM__(CreateMaterial)
   _RM__(CreateColoredMaterial)
   _RM__(LoadMaterial)
   _RM__(CreateMesh)
   _RM__(CreateGeom)
   _RM__(CreateGeomForVA)
   _RM__(CreateGeomForNamedVA)
   _RM__(CreateBox)
   _RM__(CreateSphere)
   _RM__(CreateTetrahedron)
   _RM__(CreateIcosahedron)
   _RM__(CreatePlane)
   _RM__(CreateGear)
   _RM__(CreateISOGear)
   _RM__(LoadGeom)
   _RM__(CreateSurfaceGenerator)
   _RM__(MergeMeshes)
   _RM__(MergeGeoms)
   _RM__(CreateShader)
   _RM__(CreateCustomShader)
   _RM__(LoadShader)
   _RM__(CreateAnimation)
   _RM__(LoadAnimation)
   _RM__(CreateVolume)
   _RM__(ConvertName)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clRevolutionParaboloid
            // Overriding abstract: R_and_dR

void RegisterPackageLinderdaumCoreClass189(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRevolutionParaboloid>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clRevolutionParaboloid,R_and_dR )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clRevolutionSurface
            // Overriding abstract: R_and_dR
// SCALAR_PROPERTY_LOAD__FIELD
// Axis
// Axis
// clRevolutionSurface
// Axis
// LStr::StrToVec3

bool LoadScalarField_clRevolutionSurface_Axis_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRevolutionSurface*>(Obj))->Axis=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Axis
// Axis
// clRevolutionSurface
// Axis
// LStr::Vec3ToStr

bool SaveScalarField_clRevolutionSurface_Axis_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clRevolutionSurface*>(Obj)->Axis); 
   *Result = new mlNode("Axis" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Origin
// P
// clRevolutionSurface
// P
// LStr::StrToVec3

bool LoadScalarField_clRevolutionSurface_P_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRevolutionSurface*>(Obj))->P=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Origin
// P
// clRevolutionSurface
// P
// LStr::Vec3ToStr

bool SaveScalarField_clRevolutionSurface_P_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clRevolutionSurface*>(Obj)->P); 
   *Result = new mlNode("Origin" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass190(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRevolutionSurface>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clRevolutionSurface,R_and_dR )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(Axis, clRevolutionSurface, Axis)

   REGISTER_PROPERTY__SCALAR_FIELD(P, clRevolutionSurface, Origin)

   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clCoordinateFrame
         // Class: clRigidBody
// SCALAR_PROPERTY_LOAD__FIELD
// AngularVelocity
// FAngularVelocity
// clRigidBody
// FAngularVelocity
// LStr::StrToVec3

bool LoadScalarField_clRigidBody_FAngularVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBody*>(Obj))->FAngularVelocity=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// AngularVelocity
// FAngularVelocity
// clRigidBody
// FAngularVelocity
// LStr::Vec3ToStr

bool SaveScalarField_clRigidBody_FAngularVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clRigidBody*>(Obj)->FAngularVelocity); 
   *Result = new mlNode("AngularVelocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Velocity
// FVelocity
// clRigidBody
// FVelocity
// LStr::StrToVec3

bool LoadScalarField_clRigidBody_FVelocity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBody*>(Obj))->FVelocity=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Velocity
// FVelocity
// clRigidBody
// FVelocity
// LStr::Vec3ToStr

bool SaveScalarField_clRigidBody_FVelocity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clRigidBody*>(Obj)->FVelocity); 
   *Result = new mlNode("Velocity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Mass
// FMass
// clRigidBody
// FMass
// LStr::ToFloat

bool LoadScalarField_clRigidBody_FMass_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBody*>(Obj))->FMass=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Mass
// FMass
// clRigidBody
// FMass
// LStr::ToStrEpsilon

bool SaveScalarField_clRigidBody_FMass_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clRigidBody*>(Obj)->FMass); 
   *Result = new mlNode("Mass" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Inertia
// ""
// clRigidBody
// SetInertiaTensor
// LStr::StrToMtx3

bool LoadScalarField_clRigidBody_Inertia_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBody*>(Obj))->SetInertiaTensor(LStr::StrToMtx3( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Inertia
// ""
// clRigidBody
// GetInertiaTensor
// LStr::Mat3ToStr

bool SaveScalarField_clRigidBody_Inertia_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::Mat3ToStr(dynamic_cast<clRigidBody*>(Obj)->GetInertiaTensor() ); 
   *Result = new mlNode("Inertia" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Force
// FForceAccumulator
// clRigidBody
// FForceAccumulator
// LStr::StrToVec3

bool LoadScalarField_clRigidBody_FForceAccumulator_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBody*>(Obj))->FForceAccumulator=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Force
// FForceAccumulator
// clRigidBody
// FForceAccumulator
// LStr::Vec3ToStr

bool SaveScalarField_clRigidBody_FForceAccumulator_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clRigidBody*>(Obj)->FForceAccumulator); 
   *Result = new mlNode("Force" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Torque
// FTorqueAccumulator
// clRigidBody
// FTorqueAccumulator
// LStr::StrToVec3

bool LoadScalarField_clRigidBody_FTorqueAccumulator_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBody*>(Obj))->FTorqueAccumulator=LStr::StrToVec3( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Torque
// FTorqueAccumulator
// clRigidBody
// FTorqueAccumulator
// LStr::Vec3ToStr

bool SaveScalarField_clRigidBody_FTorqueAccumulator_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clRigidBody*>(Obj)->FTorqueAccumulator); 
   *Result = new mlNode("Torque" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// OBJECT_PROPERTY_LOAD__FIELD
// CollisionShape
// FCollisionShape
// clRigidBody
// FCollisionShape

bool LoadObjectField_clRigidBody_FCollisionShape_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<clRigidBody*>(Obj)->FCollisionShape)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// CollisionShape
// FCollisionShape
// clRigidBody
// FCollisionShape

bool SaveObjectField_clRigidBody_FCollisionShape_FIELD(iObject* Obj, mlNode** Result) 
{ 
  clRigidBody* Object = dynamic_cast<clRigidBody*>(Obj); 
   if ( Object->FCollisionShape== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->FCollisionShape)->Save( Result )) return false; 
   (*Result)->setID("CollisionShape"); 
   return true; 
}




void RegisterPackageLinderdaumCoreClass191(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRigidBody>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRigidBody,Mtd)
   _RM__(Clone)
   _RM__(GetCollisionShape)
   _RM__(SetCollisionShape)
   _RM__(SetInertiaTensor)
   _RM__(GetInertiaTensor)
   _RM__(SetMass)
   _RM__(GetMass)
   _RM__(MakeZeroParams)
   _RM__(GetVelocityAtPoint)
   _RM__(GetAccelerationAtPoint)
   _RM__(GetInstantRotationAxis)
   _RM__(Update)
   _RM__(MakeEulerStep)
   _RM__(ClearAccumulators)
   _RM__(ApplyPureTorque)
   _RM__(ApplyPureForce)
   _RM__(ApplyForce)
   _RM__(ResolveImpact_Single)
   _RM__(ResolveImpact_Double)
   _RM__(RestrictDynamicsToPlane)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FAngularVelocity, clRigidBody, AngularVelocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FVelocity, clRigidBody, Velocity)

   REGISTER_PROPERTY__SCALAR_FIELD(FMass, clRigidBody, Mass)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Inertia, clRigidBody, Inertia)

   REGISTER_PROPERTY__SCALAR_FIELD(FForceAccumulator, clRigidBody, Force)

   REGISTER_PROPERTY__SCALAR_FIELD(FTorqueAccumulator, clRigidBody, Torque)

   REGISTER_PROPERTY__OBJECT_FIELD(FCollisionShape, clRigidBody, CollisionShape)

   StaticClass->SetSuperClassName( "clCoordinateFrame" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/VisualScene/Trajectory.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clRigidBodyTrajectory
// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Nodes
// FNodes
// clRigidBodyTrajectory
// clTrajectoryNode

bool LoadObjectItem_clRigidBodyTrajectory_FNodes_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  clTrajectoryNode* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clRigidBodyTrajectory* CastedObj = dynamic_cast<clRigidBodyTrajectory*>(Obj); 
   if ( Res ) CastedObj->FNodes[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Nodes
// FNodes
// clRigidBodyTrajectory

bool SaveObjectItem_clRigidBodyTrajectory_FNodes_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clRigidBodyTrajectory*>(Obj)->FNodes[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FNodes
// clRigidBodyTrajectory

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FNodes,clRigidBodyTrajectory) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FNodes,clRigidBodyTrajectory) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FNodes,clRigidBodyTrajectory)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FNodes
// clRigidBodyTrajectory

void DeleteFunction_clRigidBodyTrajectory_FNodes_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clRigidBodyTrajectory_FNodes_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clRigidBodyTrajectory*>(Obj)->FNodes[i] ->DisposeObject(); 
   }
   dynamic_cast<clRigidBodyTrajectory*>(Obj)->FNodes.clear(); 
}



// SCALAR_PROPERTY_LOAD__FIELD
// Loop
// FLoop
// clRigidBodyTrajectory
// FLoop
// LStr::ToBool

bool LoadScalarField_clRigidBodyTrajectory_FLoop_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clRigidBodyTrajectory*>(Obj))->FLoop=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Loop
// FLoop
// clRigidBodyTrajectory
// FLoop
// LStr::ToStr_Bool

bool SaveScalarField_clRigidBodyTrajectory_FLoop_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clRigidBodyTrajectory*>(Obj)->FLoop); 
   *Result = new mlNode("Loop" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass192(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRigidBodyTrajectory>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRigidBodyTrajectory,Mtd)
   _RM__(EndLoad)
   _RM__(Transform)
   _RM__(RenderDebug)
   _RM__(FindNodeForT)
   _RM__(GetNextNode)
   _RM__(GetNextIntervalForNode)
   _RM__(InsertNodeAfter)
   _RM__(DeleteNode)
   _RM__(SortByTime)
   _RM__(GetNodeCount)
   _RM__(GetNode)
   _RM__(SetNode)
   _RM__(GetPositionForTime)
   _RM__(GetOrientationForTime)
   _RM__(ClearNodes)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FNodes, clRigidBodyTrajectory, Nodes)

   REGISTER_PROPERTY__SCALAR_FIELD(FLoop, clRigidBodyTrajectory, Loop)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clVisualObject
         // Class: clVisualModifier
         // Class: clGizmo
         // Class: clRotateGizmo

void RegisterPackageLinderdaumCoreClass193(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clRotateGizmo>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clRotateGizmo,Mtd)
   _RM__(Update)
   _RM__(FetchInitialPropertyValue)
   _RM__(SetCurrentValue)
   _RM__(CalculateTransform)
   _RM__(SetAngleSystem)
   _RM__(GetAngleSystem)
   _RM__(SetBaseTransform)
   _RM__(GetBaseTransform)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGizmo" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Scene.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clScene

void RegisterPackageLinderdaumCoreClass194(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScene>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clScene,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetCameraProjection)
   _RM__(GetCameraProjection)
   _RM__(SetCameraTransform)
   _RM__(GetCameraTransform)
   _RM__(GetMatricesPtr)
   _RM__(AddNewLight)
   _RM__(RemoveLight)
   _RM__(AddSpotLight)
   _RM__(AddPointLight)
   _RM__(AddDirLight)
   _RM__(GetNumLights)
   _RM__(ClearLights)
   _RM__(AddGeom)
   _RM__(AddGeomMtl)
   _RM__(AddGeomToParent)
   _RM__(Attach)
   _RM__(Detach)
   _RM__(AttachToBone)
   _RM__(DetachFromBone)
   _RM__(RemoveItem)
   _RM__(SetVisible)
   _RM__(SetReceiveShadow)
   _RM__(SetCastShadow)
   _RM__(GetGeomsCount)
   _RM__(GetGeom)
   _RM__(GetUniqueGeomsCount)
   _RM__(GetUniqueGeom)
   _RM__(SetOwner)
   _RM__(SetLocalTransform)
   _RM__(GetLocalTransform)
   _RM__(GetBoundingBox)
   _RM__(GetBoundingBoxInterpolated)
   _RM__(Resize)
   _RM__(Scale)
   _RM__(AddMtl)
   _RM__(SetMtlIndex)
   _RM__(SetMtl)
   _RM__(SetMtlFromShader)
   _RM__(GetMaterialDesc)
   _RM__(GetGeomMaterialDesc)
   _RM__(GetShader)
   _RM__(SetShader)
   _RM__(GetKeyframe)
   _RM__(SetKeyframe)
   _RM__(SetAnimation)
   _RM__(SetAnimationSpeed)
   _RM__(BlendAnimation)
   _RM__(UpdateAnimation)
   _RM__(AddUpdater)
   _RM__(RemoveUpdater)
   _RM__(SetRenderBuffer)
   _RM__(SetUseOffscreenBuffer)
   _RM__(GetUseOffscreenBuffer)
   _RM__(SetClearColorMode)
   _RM__(SetClearDepthMode)
   _RM__(SetClearStencilMode)
   _RM__(GetClearColorMode)
   _RM__(GetClearDepthMode)
   _RM__(GetClearStencilMode)
   _RM__(SetDepthBasedShadows)
   _RM__(GetDepthBasedShadows)
   _RM__(SetFrustumCulling)
   _RM__(SetAnaglyphStereoRendering)
   _RM__(SetFocalLength)
   _RM__(GetFocalLength)
   _RM__(SetInterocularDistance)
   _RM__(GetInterocularDistance)
   _RM__(RenderForward)
   _RM__(GetRenderTarget)
   _RM__(PickObject)
   _RM__(PickVA)
   _RM__(SetPreAddBufferCallback)
   _RM__(AllocateDeferredBuffers)
   _RM__(DeallocateDeferredBuffers)
   _RM__(RenderDeferred)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Utils/Screen.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clScreen


void RegisterPackageLinderdaumCoreClass195(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScreen>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clScreen,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetDisplayMode)
   _RM__(ResetDisplayMode)
   _RM__(RestoreDisplayMode)
   _RM__(GetScreenWidth)
   _RM__(GetScreenHeight)
   _RM__(GetScreenDPI)
   _RM__(GetScreenDiagonal)
   _RM__(OpenViewport)
   _RM__(TakeoverViewport)
   _RM__(IsFullscreen)
   _RM__(ShowMessageBox)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iInputDevice
            // Adding abstract: GetName
            // Adding abstract: Poll
            // Adding abstract: Start
            // Adding abstract: IsStarted
            // Adding abstract: Stop
            // Adding abstract: GetNumAxes
            // Adding abstract: SetAxisRange
            // Adding abstract: SetAxisDeadZone
            // Adding abstract: SetAxisSaturation
            // Adding abstract: GetAxisValue
            // Adding abstract: GetAxisName
            // Adding abstract: SetAxisValue
            // Adding abstract: GetKeyName
            // Adding abstract: IsPressed
            // Adding abstract: GetNumKeys
            // Adding abstract: SetKeyState
         // Class: clScreenJoystick
            // Overriding abstract: GetName
            // Overriding abstract: Poll
            // Overriding abstract: Start
            // Overriding abstract: IsStarted
            // Overriding abstract: Stop
            // Overriding abstract: GetNumAxes
            // Overriding abstract: SetAxisRange
            // Overriding abstract: SetAxisDeadZone
            // Overriding abstract: SetAxisSaturation
            // Overriding abstract: GetAxisValue
            // Overriding abstract: GetAxisName
            // Overriding abstract: SetAxisValue
            // Overriding abstract: GetKeyName
            // Overriding abstract: IsPressed
            // Overriding abstract: GetNumKeys
            // Overriding abstract: SetKeyState
// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Buttons
// FButtonDesc
// clScreenJoystick
// clBitmapButton

bool LoadObjectItem_clScreenJoystick_FButtonDesc_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  clBitmapButton* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clScreenJoystick* CastedObj = dynamic_cast<clScreenJoystick*>(Obj); 
   if ( Res ) CastedObj->FButtonDesc[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Buttons
// FButtonDesc
// clScreenJoystick

bool SaveObjectItem_clScreenJoystick_FButtonDesc_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clScreenJoystick*>(Obj)->FButtonDesc[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FButtonDesc
// clScreenJoystick

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FButtonDesc,clScreenJoystick) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FButtonDesc,clScreenJoystick) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FButtonDesc,clScreenJoystick)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FButtonDesc
// clScreenJoystick

void DeleteFunction_clScreenJoystick_FButtonDesc_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clScreenJoystick_FButtonDesc_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clScreenJoystick*>(Obj)->FButtonDesc[i] ->DisposeObject(); 
   }
   dynamic_cast<clScreenJoystick*>(Obj)->FButtonDesc.clear(); 
}



// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Axes
// FAxisDesc
// clScreenJoystick
// clBitmapAxis

bool LoadObjectItem_clScreenJoystick_FAxisDesc_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  clBitmapAxis* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clScreenJoystick* CastedObj = dynamic_cast<clScreenJoystick*>(Obj); 
   if ( Res ) CastedObj->FAxisDesc[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Axes
// FAxisDesc
// clScreenJoystick

bool SaveObjectItem_clScreenJoystick_FAxisDesc_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clScreenJoystick*>(Obj)->FAxisDesc[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FAxisDesc
// clScreenJoystick

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FAxisDesc,clScreenJoystick) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FAxisDesc,clScreenJoystick) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FAxisDesc,clScreenJoystick)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FAxisDesc
// clScreenJoystick

void DeleteFunction_clScreenJoystick_FAxisDesc_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clScreenJoystick_FAxisDesc_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clScreenJoystick*>(Obj)->FAxisDesc[i] ->DisposeObject(); 
   }
   dynamic_cast<clScreenJoystick*>(Obj)->FAxisDesc.clear(); 
}



// SCALAR_PROPERTY_LOAD__SETTER
// MaskImageName
// ""
// clScreenJoystick
// SetMaskImageName
// EMPTY_CONVERTER

bool LoadScalarField_clScreenJoystick_MaskImageName_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScreenJoystick*>(Obj))->SetMaskImageName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// MaskImageName
// ""
// clScreenJoystick
// GetMaskImageName
// EMPTY_CONVERTER

bool SaveScalarField_clScreenJoystick_MaskImageName_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScreenJoystick*>(Obj)->GetMaskImageName() ); 
   *Result = new mlNode("MaskImageName" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// DisplayImageName
// ""
// clScreenJoystick
// SetDisplayImageName
// EMPTY_CONVERTER

bool LoadScalarField_clScreenJoystick_DisplayImageName_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScreenJoystick*>(Obj))->SetDisplayImageName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// DisplayImageName
// ""
// clScreenJoystick
// GetDisplayImageName
// EMPTY_CONVERTER

bool SaveScalarField_clScreenJoystick_DisplayImageName_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScreenJoystick*>(Obj)->GetDisplayImageName() ); 
   *Result = new mlNode("DisplayImageName" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass196(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScreenJoystick>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clScreenJoystick,Mtd)
   _RM__(Render)
   _RM__(EndLoad)
   _RM__(GetName)
   _RM__(Poll)
   _RM__(Start)
   _RM__(IsStarted)
   _RM__(Stop)
   _RM__(GetNumAxes)
   _RM__(SetAxisRange)
   _RM__(SetAxisDeadZone)
   _RM__(SetAxisSaturation)
   _RM__(GetAxisValue)
   _RM__(GetAxisName)
   _RM__(SetAxisValue)
   _RM__(GetKeyName)
   _RM__(IsPressed)
   _RM__(GetNumKeys)
   _RM__(SetKeyState)
   _RM__(Event_MOTION)
   _RM__(GetButtonDesc)
   _RM__(GetAxisDesc)
   _RM__(SetButtonDesc)
   _RM__(SetAxisDesc)
   _RM__(GetButtonForColor)
   _RM__(GetAxisForColor)
   _RM__(GetMaskImageName)
   _RM__(SetMaskImageName)
   _RM__(GetDisplayImageName)
   _RM__(SetDisplayImageName)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FButtonDesc, clScreenJoystick, Buttons)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FAxisDesc, clScreenJoystick, Axes)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(MaskImageName, clScreenJoystick, MaskImageName)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(DisplayImageName, clScreenJoystick, DisplayImageName)

   StaticClass->SetSuperClassName( "iInputDevice" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clState
         // Class: iStaticClass
            // Adding abstract: VirtualConstructor
            // Adding abstract: GetConstructorParamsCount
            // Adding abstract: IsAbstract
         // Class: clScriptClass
            // Overriding abstract: VirtualConstructor
            // Overriding abstract: GetConstructorParamsCount
            // Overriding abstract: IsAbstract
// SCALAR_PROPERTY_LOAD__FIELD
// Name
// FClassName
// clScriptClass
// FClassName
// EMPTY_CONVERTER

bool LoadScalarField_clScriptClass_FClassName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScriptClass*>(Obj))->FClassName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Name
// FClassName
// clScriptClass
// FClassName
// EMPTY_CONVERTER

bool SaveScalarField_clScriptClass_FClassName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScriptClass*>(Obj)->FClassName); 
   *Result = new mlNode("Name" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Fields
// FScriptFields
// clScriptClass
// iField

bool LoadObjectItem_clScriptClass_FScriptFields_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  iField* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clScriptClass* CastedObj = dynamic_cast<clScriptClass*>(Obj); 
   if ( Res ) CastedObj->FScriptFields[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Fields
// FScriptFields
// clScriptClass

bool SaveObjectItem_clScriptClass_FScriptFields_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clScriptClass*>(Obj)->FScriptFields[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FScriptFields
// clScriptClass

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FScriptFields,clScriptClass) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FScriptFields,clScriptClass) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FScriptFields,clScriptClass)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FScriptFields
// clScriptClass

void DeleteFunction_clScriptClass_FScriptFields_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clScriptClass_FScriptFields_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clScriptClass*>(Obj)->FScriptFields[i] ->DisposeObject(); 
   }
   dynamic_cast<clScriptClass*>(Obj)->FScriptFields.clear(); 
}



// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// States
// FScriptStates
// clScriptClass
// clState

bool LoadObjectItem_clScriptClass_FScriptStates_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  clState* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clScriptClass* CastedObj = dynamic_cast<clScriptClass*>(Obj); 
   if ( Res ) CastedObj->FScriptStates[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// States
// FScriptStates
// clScriptClass

bool SaveObjectItem_clScriptClass_FScriptStates_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clScriptClass*>(Obj)->FScriptStates[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FScriptStates
// clScriptClass

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FScriptStates,clScriptClass) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FScriptStates,clScriptClass) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FScriptStates,clScriptClass)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FScriptStates
// clScriptClass

void DeleteFunction_clScriptClass_FScriptStates_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clScriptClass_FScriptStates_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clScriptClass*>(Obj)->FScriptStates[i] ->DisposeObject(); 
   }
   dynamic_cast<clScriptClass*>(Obj)->FScriptStates.clear(); 
}





void RegisterPackageLinderdaumCoreClass197(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScriptClass>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clScriptClass,Mtd)
   _RM__(ClassName)
   _RM__(VirtualConstructor)
   _RM__(GetConstructorParamsCount)
   _RM__(IsAbstract)
   _RM__(RegisterNonNativeFields)
   _RM__(BeginLoad)
   _RM__(EndLoad)
   _RM__(GetScriptField)
   _RM__(SetScriptField)
   _RM__(GetScriptState)
   _RM__(SetScriptState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FClassName, clScriptClass, Name)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FScriptFields, clScriptClass, Fields)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FScriptStates, clScriptClass, States)

   StaticClass->SetSuperClassName( "iStaticClass" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/ScriptCompiler.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clScriptCompiler

void RegisterPackageLinderdaumCoreClass198(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScriptCompiler>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clScriptCompiler,Mtd)
   _RM__(ClearSettings)
   _RM__(Reinitialize)
   _RM__(ProcessSourceDirectory)
   _RM__(ProcessSourceFile)
   _RM__(AddExportDirectory)
   _RM__(AddLibDirectory)
   _RM__(SetOutputDirectory)
   _RM__(GetOutputDirectory)
   _RM__(RecompileClass)
   _RM__(RecompileClasses)
   _RM__(RecompileMethod)
   _RM__(RecompileMethods)
   _RM__(CompileStatement)
   _RM__(IsInitialized)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iField
            // Adding abstract: GetFieldPtr
            // Adding abstract: GetFieldSize
         // Class: clScriptField
            // Overriding abstract: GetFieldPtr
            // Overriding abstract: GetFieldSize

void RegisterPackageLinderdaumCoreClass199(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScriptField>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clScriptField,GetFieldPtr )
   REG_CLS_MTD( clScriptField,GetFieldSize )
   REG_CLS_MTD( clScriptField,Resize )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iField" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iMethod
            // Adding abstract: Invoke
            // Adding abstract: GetParamsCount
            // Adding abstract: GetParamSize
            // Adding abstract: CreateParameter
         // Class: clScriptMethod
            // Overriding abstract: Invoke
            // Overriding abstract: GetParamsCount
            // Overriding abstract: GetParamSize
            // Overriding abstract: CreateParameter
// OBJECT_PROPERTY_LOAD__FIELD
// Code
// FCode
// clScriptMethod
// FCode

bool LoadObjectField_clScriptMethod_FCode_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<clScriptMethod*>(Obj)->FCode)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Code
// FCode
// clScriptMethod
// FCode

bool SaveObjectField_clScriptMethod_FCode_FIELD(iObject* Obj, mlNode** Result) 
{ 
  clScriptMethod* Object = dynamic_cast<clScriptMethod*>(Obj); 
   if ( Object->FCode== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->FCode)->Save( Result )) return false; 
   (*Result)->setID("Code"); 
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Name
// ""
// clScriptMethod
// SetMethodName
// EMPTY_CONVERTER

bool LoadScalarField_clScriptMethod_Name_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScriptMethod*>(Obj))->SetMethodName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Name
// ""
// clScriptMethod
// GetMethodName
// EMPTY_CONVERTER

bool SaveScalarField_clScriptMethod_Name_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScriptMethod*>(Obj)->GetMethodName() ); 
   *Result = new mlNode("Name" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Modifiers
// FModifiers
// clScriptMethod
// EMPTY_CONVERTER

bool LoadScalarItem_clScriptMethod_FModifiers_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clScriptMethod*>(Obj)-> TheArrayName [i] = (EMPTY_CONVERTER( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clScriptMethod*>(Obj)->FModifiers[i] = (EMPTY_CONVERTER( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Modifiers
// FModifiers
// clScriptMethod
// EMPTY_CONVERTER

bool SaveScalarItem_clScriptMethod_FModifiers_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScriptMethod*>(Obj)->FModifiers[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FModifiers
// clScriptMethod

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FModifiers,clScriptMethod) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FModifiers,clScriptMethod) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FModifiers,clScriptMethod)



// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Parameters
// FParameters
// clScriptMethod
// clScriptedParam

bool LoadObjectItem_clScriptMethod_FParameters_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  clScriptedParam* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clScriptMethod* CastedObj = dynamic_cast<clScriptMethod*>(Obj); 
   if ( Res ) CastedObj->FParameters[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Parameters
// FParameters
// clScriptMethod

bool SaveObjectItem_clScriptMethod_FParameters_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clScriptMethod*>(Obj)->FParameters[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FParameters
// clScriptMethod

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FParameters,clScriptMethod) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FParameters,clScriptMethod) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FParameters,clScriptMethod)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FParameters
// clScriptMethod

void DeleteFunction_clScriptMethod_FParameters_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clScriptMethod_FParameters_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clScriptMethod*>(Obj)->FParameters[i] ->DisposeObject(); 
   }
   dynamic_cast<clScriptMethod*>(Obj)->FParameters.clear(); 
}



// OBJECT_PROPERTY_LOAD__FIELD
// Result
// FResultDescription
// clScriptMethod
// FResultDescription

bool LoadObjectField_clScriptMethod_FResultDescription_FIELD(mlNode* Node, iObject* Obj) 
{
   iObject** Ptr = reinterpret_cast<iObject**>(&(dynamic_cast<clScriptMethod*>(Obj)->FResultDescription)); 
   *Ptr = NULL;   
   return Obj->Env->Linker->LoadObject(Node, Ptr);
}

// OBJECT_PROPERTY_SAVE__FIELD
// Result
// FResultDescription
// clScriptMethod
// FResultDescription

bool SaveObjectField_clScriptMethod_FResultDescription_FIELD(iObject* Obj, mlNode** Result) 
{ 
  clScriptMethod* Object = dynamic_cast<clScriptMethod*>(Obj); 
   if ( Object->FResultDescription== NULL ) 
   { 
      *Result = new mlNode("Object", "NULL"); 
      return true; 
   } 
   if (!(Object->FResultDescription)->Save( Result )) return false; 
   (*Result)->setID("Result"); 
   return true; 
}




void RegisterPackageLinderdaumCoreClass200(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScriptMethod>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clScriptMethod,Mtd)
   _RM__(AfterConstruction)
   _RM__(BeginLoad)
   _RM__(EndLoad)
   _RM__(Invoke)
   _RM__(GetParamsCount)
   _RM__(GetParamSize)
   _RM__(CreateParameter)
   _RM__(IsScripted)
   _RM__(CreateParameters)
   _RM__(InvokeFast)
   _RM__(GetModifier)
   _RM__(SetModifier)
   _RM__(SetParamDescription)
   _RM__(GetParamDescription)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__OBJECT_FIELD(FCode, clScriptMethod, Code)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Name, clScriptMethod, Name)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FModifiers, clScriptMethod, Modifiers)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FParameters, clScriptMethod, Parameters)

   REGISTER_PROPERTY__OBJECT_FIELD(FResultDescription, clScriptMethod, Result)

   StaticClass->SetSuperClassName( "iMethod" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clScriptedParam
// SCALAR_PROPERTY_LOAD__FIELD
// Name
// FParamName
// clScriptedParam
// FParamName
// EMPTY_CONVERTER

bool LoadScalarField_clScriptedParam_FParamName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScriptedParam*>(Obj))->FParamName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Name
// FParamName
// clScriptedParam
// FParamName
// EMPTY_CONVERTER

bool SaveScalarField_clScriptedParam_FParamName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScriptedParam*>(Obj)->FParamName); 
   *Result = new mlNode("Name" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Size
// FParamSize
// clScriptedParam
// FParamSize
// LStr::ToInt

bool LoadScalarField_clScriptedParam_FParamSize_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScriptedParam*>(Obj))->FParamSize=LStr::ToInt( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Size
// FParamSize
// clScriptedParam
// FParamSize
// LStr::ToStr

bool SaveScalarField_clScriptedParam_FParamSize_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr(dynamic_cast<clScriptedParam*>(Obj)->FParamSize); 
   *Result = new mlNode("Size" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Type
// ""
// clScriptedParam
// SetParamType
// EMPTY_CONVERTER

bool LoadScalarField_clScriptedParam_Type_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clScriptedParam*>(Obj))->SetParamType(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Type
// ""
// clScriptedParam
// GetParamType
// EMPTY_CONVERTER

bool SaveScalarField_clScriptedParam_Type_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clScriptedParam*>(Obj)->GetParamType() ); 
   *Result = new mlNode("Type" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass201(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clScriptedParam>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clScriptedParam,CreateParameter )
   REG_CLS_MTD( clScriptedParam,GetParamType )
   REG_CLS_MTD( clScriptedParam,SetParamType )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FParamName, clScriptedParam, Name)

   REGISTER_PROPERTY__SCALAR_FIELD(FParamSize, clScriptedParam, Size)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Type, clScriptedParam, Type)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clSelectionGroup

void RegisterPackageLinderdaumCoreClass202(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clSelectionGroup>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clSelectionGroup,Mtd)
   _RM__(AddObject)
   _RM__(RemoveObject)
   _RM__(GetObjectCount)
   _RM__(GetObjectIdx)
   _RM__(Clear)
   _RM__(GetEditableProxy)
   _RM__(SetOwner)
   _RM__(GetOwner)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iCameraPositioner
            // Adding abstract: Update
         // Class: clSelectionPositioner
            // Overriding abstract: Update
// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// Positioners
// FPositioners
// clSelectionPositioner
// iCameraPositioner

bool LoadObjectItem_clSelectionPositioner_FPositioners_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  iCameraPositioner* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clSelectionPositioner* CastedObj = dynamic_cast<clSelectionPositioner*>(Obj); 
   if ( Res ) CastedObj->FPositioners[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// Positioners
// FPositioners
// clSelectionPositioner

bool SaveObjectItem_clSelectionPositioner_FPositioners_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clSelectionPositioner*>(Obj)->FPositioners[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FPositioners
// clSelectionPositioner

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FPositioners,clSelectionPositioner) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FPositioners,clSelectionPositioner) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FPositioners,clSelectionPositioner)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FPositioners
// clSelectionPositioner

void DeleteFunction_clSelectionPositioner_FPositioners_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clSelectionPositioner_FPositioners_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clSelectionPositioner*>(Obj)->FPositioners[i] ->DisposeObject(); 
   }
   dynamic_cast<clSelectionPositioner*>(Obj)->FPositioners.clear(); 
}



// SCALAR_PROPERTY_LOAD__SETTER
// CurrentMode
// ""
// clSelectionPositioner
// SetMode
// LStr::ToInt

bool LoadScalarField_clSelectionPositioner_CurrentMode_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clSelectionPositioner*>(Obj))->SetMode(LStr::ToInt( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// CurrentMode
// ""
// clSelectionPositioner
// GetMode
// LStr::ToStr

bool SaveScalarField_clSelectionPositioner_CurrentMode_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr(dynamic_cast<clSelectionPositioner*>(Obj)->GetMode() ); 
   *Result = new mlNode("CurrentMode" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass203(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clSelectionPositioner>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clSelectionPositioner,Mtd)
   _RM__(SetMode)
   _RM__(GetMode)
   _RM__(GetPositioner)
   _RM__(SetPositioner)
   _RM__(FindPositioner)
   _RM__(ClearPositioners)
   _RM__(GetNumPositioners)
   _RM__(Update)
   _RM__(HandleKey)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FPositioners, clSelectionPositioner, Positioners)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(CurrentMode, clSelectionPositioner, CurrentMode)

   StaticClass->SetSuperClassName( "iCameraPositioner" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#undef REG_CLS_MTD

/*
 * 16/01/2012
     Autogenerated via LinderScript Database Compiler 0.9.24
*/
