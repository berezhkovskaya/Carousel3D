/**
 * \file ExpReg_Core3.cpp
 * \brief Autogenerated via LinderScript Database Compiler 0.9.24
 * \version 0.6.06
 * \date 16/01/2012
 * \author Sergey Kosarevsky, 2005-2011
 * \author Viktor Latypov, 2007-2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

#include "Generated/MethodBind.h"

#include "Core/Linker.h"
#include "Core/RTTI/iStaticClass.h"
#include "Core/RTTI/FieldBinding.h"
#include "Core/RTTI/PropertyMacros.h"

#include "Core/VFS/ML.h"

// Custom include file
#include "Generated/CoreExport_Includes.h"

#define REG_CLS_MTD(ClsName, MtdName) \
StaticClass->RegisterMethod( BindNativeMethod( & ClsName :: MtdName, #MtdName ) );

#include "Linderdaum/GUI/ComCtl/I_Gauge.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel
         // Class: clGUIGauge
// SCALAR_PROPERTY_LOAD__SETTER
// MaximalValue
// ""
// clGUIGauge
// SetMaximalValue
// LStr::ToInt

bool LoadScalarField_clGUIGauge_MaximalValue_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIGauge*>(Obj))->SetMaximalValue(LStr::ToInt( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// MaximalValue
// ""
// clGUIGauge
// GetMaximalValue
// LStr::ToStr

bool SaveScalarField_clGUIGauge_MaximalValue_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr(dynamic_cast<clGUIGauge*>(Obj)->GetMaximalValue() ); 
   *Result = new mlNode("MaximalValue" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// CurrentValue
// ""
// clGUIGauge
// SetCurrentValue
// LStr::ToInt

bool LoadScalarField_clGUIGauge_CurrentValue_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIGauge*>(Obj))->SetCurrentValue(LStr::ToInt( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// CurrentValue
// ""
// clGUIGauge
// GetCurrentValue
// LStr::ToStr

bool SaveScalarField_clGUIGauge_CurrentValue_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr(dynamic_cast<clGUIGauge*>(Obj)->GetCurrentValue() ); 
   *Result = new mlNode("CurrentValue" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass102(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIGauge>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIGauge,Mtd)
   _RM__(GetUniformsVec)
   _RM__(PreRender)
   _RM__(Increment)
   _RM__(SetMaximalValue)
   _RM__(SetCurrentValue)
   _RM__(GetMaximalValue)
   _RM__(GetCurrentValue)
   _RM__(Event_Timer)
   _RM__(Event_Registered)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(MaximalValue, clGUIGauge, MaximalValue)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(CurrentValue, clGUIGauge, CurrentValue)

   StaticClass->SetSuperClassName( "clGUIBorderPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Splitters.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUISplitter
         // Class: clGUIHorizontalSplitter

void RegisterPackageLinderdaumCoreClass103(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIHorizontalSplitter>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUISplitter" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_InputLine.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: iGUIButton
         // Class: clGUIInputLine

void RegisterPackageLinderdaumCoreClass104(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIInputLine>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIInputLine,Mtd)
   _RM__(AfterConstruction)
   _RM__(PreRender)
   _RM__(PostRender)
   _RM__(SetValidator)
   _RM__(Event_Key)
   _RM__(Event_Registered)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGUIButton" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_ListBox.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel
         // Class: clGUIListBox
// SCALAR_PROPERTY_LOAD__SETTER
// Item
// ""
// clGUIListBox
// AddItem
// EMPTY_CONVERTER

bool LoadScalarField_clGUIListBox_Item_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIListBox*>(Obj))->AddItem(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Item
// ""
// clGUIListBox
// GetCurrentItem
// EMPTY_CONVERTER

bool SaveScalarField_clGUIListBox_Item_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIListBox*>(Obj)->GetCurrentItem() ); 
   *Result = new mlNode("Item" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass105(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIListBox>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIListBox,Mtd)
   _RM__(PreRender)
   _RM__(ClearList)
   _RM__(AddItem)
   _RM__(GetCurrentItem)
   _RM__(Event_Key)
   _RM__(Event_MouseLeft)
   _RM__(Event_Scroll)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Item, clGUIListBox, Item)

   StaticClass->SetSuperClassName( "clGUIBorderPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/GUIManager.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGUIManager

void RegisterPackageLinderdaumCoreClass106(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIManager>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIManager,Mtd)
   _RM__(AfterConstruction)
   _RM__(IsActiveView)
   _RM__(RegisterView)
   _RM__(UnRegisterView)
   _RM__(SetCursorForm)
   _RM__(GetCursorForm)
   _RM__(HideGUI)
   _RM__(ShowGUI)
   _RM__(SetCapture)
   _RM__(ReleaseCapture)
   _RM__(RequestClose)
   _RM__(RecheckMouse)
   _RM__(SetTopmostView)
   _RM__(SetTopmostViewID)
   _RM__(SetActivePage)
   _RM__(SetActivePageID)
   _RM__(SetActivePageTransition)
   _RM__(SetActivePageTransitionID)
   _RM__(IsViewTopmost)
   _RM__(IsPageActive)
   _RM__(ShowView)
   _RM__(GetWindowBuffer)
   _RM__(GetDefaultRect)
   _RM__(GetDefaultBevelRect)
   _RM__(GetDefaultTriangle)
   _RM__(GetDockableViewsList)
   _RM__(FindViewByID)
   _RM__(GetDesktop)
   _RM__(ProcessInputLineKey)
   _RM__(AddGUITo)
   _RM__(DeleteGUIFrom)
   _RM__(GetStringWidth)
   _RM__(GetStringHeight)
   _RM__(InitLookAndFeel)
   _RM__(GetDefaultCaptionHeight)
   _RM__(GetDefaultCaptionLedge)
   _RM__(GetDefaultCaptionRadius)
   _RM__(GetDefaultResizeCornerWidth)
   _RM__(GetDefaultResizeCornerHeight)
   _RM__(GetDefaultCloseButtonWidth)
   _RM__(GetDefaultCloseButtonHeight_Delta1)
   _RM__(GetDefaultCloseButtonHeight_Delta2)
   _RM__(GetDefaultVerticalTitlePosition)
   _RM__(GetDefaultButtonBevelRadius)
   _RM__(GetDefaultPanelBevelRadius)
   _RM__(GetDefaultDockingDistance)
   _RM__(GetDefaultWindowBorderWidth)
   _RM__(GetDefaultWindowBorderHeight)
   _RM__(GetDefaultButtonVerticalTitleOffset)
   _RM__(GetDefaultCheckBoxWidth)
   _RM__(GetDefaultCheckBoxHorizontalTitleOffset)
   _RM__(GetDefaultCheckBoxHeight_Delta1)
   _RM__(GetDefaultCheckBoxHeight_Delta2)
   _RM__(GetDefaultGaugeXOffset)
   _RM__(GetDefaultGaugeYOffset)
   _RM__(GetDefaultGaugeTextYOffset)
   _RM__(Callback_SizeView)
   _RM__(Callback_DragView)
   _RM__(AddButtonCmd)
   _RM__(AddButtonCallback)
   _RM__(AddSlider)
   _RM__(AddStatic)
   _RM__(AddEditBox)
   _RM__(AddCheckBox)
   _RM__(AddColorDial)
   _RM__(AddMtxView)
   _RM__(AddFSGraph)
   _RM__(AddPropertySlider)
   _RM__(AddPropertyEdit)
   _RM__(AddPropertyStatic)
   _RM__(AddPropertyCheck)
   _RM__(AddPropColorDial)
   _RM__(AddSceneView)
   _RM__(AddVisualSceneView)
   _RM__(IsTouchScreen)
   _RM__(IsGUISoundEnabled)
   _RM__(SetGUISoundEnabled)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Memo.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel
         // Class: clGUIMemo
// SCALAR_PROPERTY_LOAD__SETTER
// TextLine
// ""
// clGUIMemo
// AddLine
// EMPTY_CONVERTER

bool LoadScalarField_clGUIMemo_TextLine_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIMemo*>(Obj))->AddLine(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// TextLine
// ""
// clGUIMemo
// GetLastLine
// EMPTY_CONVERTER

bool SaveScalarField_clGUIMemo_TextLine_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIMemo*>(Obj)->GetLastLine() ); 
   *Result = new mlNode("TextLine" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass107(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIMemo>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIMemo,Mtd)
   _RM__(PreRender)
   _RM__(AddLine)
   _RM__(GetLastLine)
   _RM__(push_back)
   _RM__(push_front)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(TextLine, clGUIMemo, TextLine)

   StaticClass->SetSuperClassName( "clGUIBorderPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_MtxView.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIMtxView
// SCALAR_PROPERTY_LOAD__FIELD
// LineThickness
// FLineThickness
// clGUIMtxView
// FLineThickness
// LStr::ToFloat

bool LoadScalarField_clGUIMtxView_FLineThickness_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIMtxView*>(Obj))->FLineThickness=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// LineThickness
// FLineThickness
// clGUIMtxView
// FLineThickness
// LStr::ToStrEpsilon

bool SaveScalarField_clGUIMtxView_FLineThickness_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUIMtxView*>(Obj)->FLineThickness); 
   *Result = new mlNode("LineThickness" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass108(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIMtxView>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIMtxView,AfterConstruction )
   REG_CLS_MTD( clGUIMtxView,Event_Timer )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FLineThickness, clGUIMtxView, LineThickness)

   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Page.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPage
// SCALAR_PROPERTY_LOAD__FIELD
// FallbackPage
// FFallbackPage
// clGUIPage
// FFallbackPage
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPage_FFallbackPage_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPage*>(Obj))->FFallbackPage=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// FallbackPage
// FFallbackPage
// clGUIPage
// FFallbackPage
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPage_FFallbackPage_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPage*>(Obj)->FFallbackPage); 
   *Result = new mlNode("FallbackPage" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// FallbackTransition
// FFallbackTransition
// clGUIPage
// FFallbackTransition
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPage_FFallbackTransition_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPage*>(Obj))->FFallbackTransition=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// FallbackTransition
// FFallbackTransition
// clGUIPage
// FFallbackTransition
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPage_FFallbackTransition_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPage*>(Obj)->FFallbackTransition); 
   *Result = new mlNode("FallbackTransition" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// TapOnSwitch
// FTapOnSwitch
// clGUIPage
// FTapOnSwitch
// LStr::ToBool

bool LoadScalarField_clGUIPage_FTapOnSwitch_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPage*>(Obj))->FTapOnSwitch=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// TapOnSwitch
// FTapOnSwitch
// clGUIPage
// FTapOnSwitch
// LStr::ToStr_Bool

bool SaveScalarField_clGUIPage_FTapOnSwitch_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clGUIPage*>(Obj)->FTapOnSwitch); 
   *Result = new mlNode("TapOnSwitch" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass109(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIPage>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIPage,Mtd)
   _RM__(AfterConstruction)
   _RM__(ContainsCaption)
   _RM__(ContainsCloseButton)
   _RM__(ContainsResizeCorner)
   _RM__(IsPage)
   _RM__(IsViewDockable)
   _RM__(IsViewDraggable)
   _RM__(IsViewSizeable)
   _RM__(IsPageActive)
   _RM__(RenderHierarchy)
   _RM__(HasFallback)
   _RM__(Event_Key)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FFallbackPage, clGUIPage, FallbackPage)

   REGISTER_PROPERTY__SCALAR_FIELD(FFallbackTransition, clGUIPage, FallbackTransition)

   REGISTER_PROPERTY__SCALAR_FIELD(FTapOnSwitch, clGUIPage, TapOnSwitch)

   StaticClass->SetSuperClassName( "iGUIView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Panel.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
// SCALAR_PROPERTY_LOAD__SETTER
// Icon
// ""
// clGUIPanel
// SetShaderName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPanel_Icon_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->SetShaderName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Icon
// ""
// clGUIPanel
// GetShaderName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPanel_Icon_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPanel*>(Obj)->GetShaderName() ); 
   *Result = new mlNode("Icon" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// IconMouseOver
// ""
// clGUIPanel
// SetShaderMouseOverName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPanel_IconMouseOver_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->SetShaderMouseOverName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// IconMouseOver
// ""
// clGUIPanel
// GetShaderMouseOverName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPanel_IconMouseOver_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPanel*>(Obj)->GetShaderMouseOverName() ); 
   *Result = new mlNode("IconMouseOver" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// IconSwitchedOn
// ""
// clGUIPanel
// SetShaderSwitchedOnName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPanel_IconSwitchedOn_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->SetShaderSwitchedOnName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// IconSwitchedOn
// ""
// clGUIPanel
// GetShaderSwitchedOnName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPanel_IconSwitchedOn_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPanel*>(Obj)->GetShaderSwitchedOnName() ); 
   *Result = new mlNode("IconSwitchedOn" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ExecCommandsOnClick
// FExecCommandsOnClick
// clGUIPanel
// FExecCommandsOnClick
// LStr::ToBool

bool LoadScalarField_clGUIPanel_FExecCommandsOnClick_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->FExecCommandsOnClick=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ExecCommandsOnClick
// FExecCommandsOnClick
// clGUIPanel
// FExecCommandsOnClick
// LStr::ToStr_Bool

bool SaveScalarField_clGUIPanel_FExecCommandsOnClick_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clGUIPanel*>(Obj)->FExecCommandsOnClick); 
   *Result = new mlNode("ExecCommandsOnClick" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Image
// ""
// clGUIPanel
// SetImageName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPanel_Image_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->SetImageName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Image
// ""
// clGUIPanel
// GetImageName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPanel_Image_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPanel*>(Obj)->GetImageName() ); 
   *Result = new mlNode("Image" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// ImageMouseOver
// ""
// clGUIPanel
// SetImageMouseOverName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPanel_ImageMouseOver_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->SetImageMouseOverName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// ImageMouseOver
// ""
// clGUIPanel
// GetImageMouseOverName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPanel_ImageMouseOver_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPanel*>(Obj)->GetImageMouseOverName() ); 
   *Result = new mlNode("ImageMouseOver" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// ImageSwitchedOn
// ""
// clGUIPanel
// SetImageSwitchedOnName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIPanel_ImageSwitchedOn_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPanel*>(Obj))->SetImageSwitchedOnName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// ImageSwitchedOn
// ""
// clGUIPanel
// GetImageSwitchedOnName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIPanel_ImageSwitchedOn_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIPanel*>(Obj)->GetImageSwitchedOnName() ); 
   *Result = new mlNode("ImageSwitchedOn" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// OBJECT_PROPERTY_LOAD__SETTER
// Shader
// ""
// clGUIPanel
// SetShader
// clRenderState

bool LoadObjectField_clGUIPanel_Shader_SETTER(mlNode* Node, iObject* Obj) 
{
   iObject* Ptr = NULL; 
   if (!Obj->Env->Linker->LoadObject(Node, &Ptr)) return false;
  clRenderState* Ptr2 = dynamic_cast<clRenderState*>( Ptr );
   if ( !Ptr2 ) return false;
   (dynamic_cast<clGUIPanel*>(Obj))->SetShader( Ptr2 ); 
   return true;
}

// OBJECT_PROPERTY_SAVE__GETTER
// Shader
// ""
// clGUIPanel
// GetShader

bool SaveObjectField_clGUIPanel_Shader_GETTER(iObject* Obj, mlNode** Result) 
{ 
  clGUIPanel* Object = dynamic_cast<clGUIPanel*>(Obj); 
   if ( !Object->GetShader() ) return false;
   if ( !(Object->GetShader() )->Save(Result)) return false; 
   (*Result)->setID(""""); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__SETTER
// ShaderMouseOver
// ""
// clGUIPanel
// SetShaderMouseOver
// clRenderState

bool LoadObjectField_clGUIPanel_ShaderMouseOver_SETTER(mlNode* Node, iObject* Obj) 
{
   iObject* Ptr = NULL; 
   if (!Obj->Env->Linker->LoadObject(Node, &Ptr)) return false;
  clRenderState* Ptr2 = dynamic_cast<clRenderState*>( Ptr );
   if ( !Ptr2 ) return false;
   (dynamic_cast<clGUIPanel*>(Obj))->SetShaderMouseOver( Ptr2 ); 
   return true;
}

// OBJECT_PROPERTY_SAVE__GETTER
// ShaderMouseOver
// ""
// clGUIPanel
// GetShaderMouseOver

bool SaveObjectField_clGUIPanel_ShaderMouseOver_GETTER(iObject* Obj, mlNode** Result) 
{ 
  clGUIPanel* Object = dynamic_cast<clGUIPanel*>(Obj); 
   if ( !Object->GetShaderMouseOver() ) return false;
   if ( !(Object->GetShaderMouseOver() )->Save(Result)) return false; 
   (*Result)->setID(""""); 
   return true; 
}


// OBJECT_PROPERTY_LOAD__SETTER
// ShaderSwitchedOn
// ""
// clGUIPanel
// SetShaderSwitchedOn
// clRenderState

bool LoadObjectField_clGUIPanel_ShaderSwitchedOn_SETTER(mlNode* Node, iObject* Obj) 
{
   iObject* Ptr = NULL; 
   if (!Obj->Env->Linker->LoadObject(Node, &Ptr)) return false;
  clRenderState* Ptr2 = dynamic_cast<clRenderState*>( Ptr );
   if ( !Ptr2 ) return false;
   (dynamic_cast<clGUIPanel*>(Obj))->SetShaderSwitchedOn( Ptr2 ); 
   return true;
}

// OBJECT_PROPERTY_SAVE__GETTER
// ShaderSwitchedOn
// ""
// clGUIPanel
// GetShaderSwitchedOn

bool SaveObjectField_clGUIPanel_ShaderSwitchedOn_GETTER(iObject* Obj, mlNode** Result) 
{ 
  clGUIPanel* Object = dynamic_cast<clGUIPanel*>(Obj); 
   if ( !Object->GetShaderSwitchedOn() ) return false;
   if ( !(Object->GetShaderSwitchedOn() )->Save(Result)) return false; 
   (*Result)->setID(""""); 
   return true; 
}




void RegisterPackageLinderdaumCoreClass110(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIPanel>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIPanel,Mtd)
   _RM__(AfterConstruction)
   _RM__(PreRender)
   _RM__(PostRender)
   _RM__(SetBevelRadius)
   _RM__(SetShader)
   _RM__(GetShader)
   _RM__(SetShaderName)
   _RM__(SetImage)
   _RM__(SetImageName)
   _RM__(GetShaderName)
   _RM__(GetImageName)
   _RM__(SetShaderMouseOver)
   _RM__(GetShaderMouseOver)
   _RM__(SetShaderMouseOverName)
   _RM__(SetImageMouseOver)
   _RM__(SetImageMouseOverName)
   _RM__(GetShaderMouseOverName)
   _RM__(GetImageMouseOverName)
   _RM__(SetShaderSwitchedOn)
   _RM__(GetShaderSwitchedOn)
   _RM__(SetShaderSwitchedOnName)
   _RM__(SetImageSwitchedOn)
   _RM__(SetImageSwitchedOnName)
   _RM__(GetShaderSwitchedOnName)
   _RM__(GetImageSwitchedOnName)
   _RM__(SetHook)
   _RM__(SetUniformsV)
   _RM__(Event_Key)
   _RM__(Event_MouseLeft)
   _RM__(Event_LDoubleClick)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Icon, clGUIPanel, Icon)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(IconMouseOver, clGUIPanel, IconMouseOver)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(IconSwitchedOn, clGUIPanel, IconSwitchedOn)

   REGISTER_PROPERTY__SCALAR_FIELD(FExecCommandsOnClick, clGUIPanel, ExecCommandsOnClick)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Image, clGUIPanel, Image)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(ImageMouseOver, clGUIPanel, ImageMouseOver)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(ImageSwitchedOn, clGUIPanel, ImageSwitchedOn)

   REGISTER_PROPERTY__OBJECT_GETTER_SETTER(Shader, clGUIPanel, Shader)

   REGISTER_PROPERTY__OBJECT_GETTER_SETTER(ShaderMouseOver, clGUIPanel, ShaderMouseOver)

   REGISTER_PROPERTY__OBJECT_GETTER_SETTER(ShaderSwitchedOn, clGUIPanel, ShaderSwitchedOn)

   StaticClass->SetSuperClassName( "iGUIView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_PushButton.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: iGUIButton
         // Class: clGUIPushButton
// SCALAR_PROPERTY_LOAD__FIELD
// Disabled
// FButtonDisabled
// clGUIPushButton
// FButtonDisabled
// LStr::ToBool

bool LoadScalarField_clGUIPushButton_FButtonDisabled_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIPushButton*>(Obj))->FButtonDisabled=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Disabled
// FButtonDisabled
// clGUIPushButton
// FButtonDisabled
// LStr::ToStr_Bool

bool SaveScalarField_clGUIPushButton_FButtonDisabled_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clGUIPushButton*>(Obj)->FButtonDisabled); 
   *Result = new mlNode("Disabled" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass111(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIPushButton>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIPushButton,Mtd)
   _RM__(PreRender)
   _RM__(Event_Registered)
   _RM__(Event_CaptureChanged)
   _RM__(Event_MouseInside)
   _RM__(Event_MouseOutside)
   _RM__(Event_MouseLeft)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FButtonDisabled, clGUIPushButton, Disabled)

   StaticClass->SetSuperClassName( "iGUIButton" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_RadioButton.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: iGUIButton
         // Class: iGUICheckable
         // Class: clGUIRadioButton

void RegisterPackageLinderdaumCoreClass112(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIRadioButton>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIRadioButton,Check )
   REG_CLS_MTD( clGUIRadioButton,Event_Registered )
   REG_CLS_MTD( clGUIRadioButton,Event_MouseLeft )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGUICheckable" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_RadioGroup.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel
         // Class: clGUIRadioGroup
// SCALAR_PROPERTY_LOAD__FIELD
// Check
// FInitualCheckedButton
// clGUIRadioGroup
// FInitualCheckedButton
// EMPTY_CONVERTER

bool LoadScalarField_clGUIRadioGroup_FInitualCheckedButton_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIRadioGroup*>(Obj))->FInitualCheckedButton=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Check
// FInitualCheckedButton
// clGUIRadioGroup
// FInitualCheckedButton
// EMPTY_CONVERTER

bool SaveScalarField_clGUIRadioGroup_FInitualCheckedButton_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIRadioGroup*>(Obj)->FInitualCheckedButton); 
   *Result = new mlNode("Check" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass113(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIRadioGroup>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIRadioGroup,Mtd)
   _RM__(PreRender)
   _RM__(RadioButtonActivated)
   _RM__(UnCheckAll)
   _RM__(CheckButton)
   _RM__(GetCheckedButton)
   _RM__(Event_Timer)
   _RM__(Event_Registered)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FInitualCheckedButton, clGUIRadioGroup, Check)

   StaticClass->SetSuperClassName( "clGUIBorderPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUISceneView
// SCALAR_PROPERTY_LOAD__FIELD
// View
// FView
// clGUISceneView
// FView
// LStr::StrToMtx4

bool LoadScalarField_clGUISceneView_FView_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISceneView*>(Obj))->FView=LStr::StrToMtx4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// View
// FView
// clGUISceneView
// FView
// LStr::Mat4ToStr

bool SaveScalarField_clGUISceneView_FView_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Mat4ToStr(dynamic_cast<clGUISceneView*>(Obj)->FView); 
   *Result = new mlNode("View" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Projection
// FProjection
// clGUISceneView
// FProjection
// LStr::StrToMtx4

bool LoadScalarField_clGUISceneView_FProjection_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISceneView*>(Obj))->FProjection=LStr::StrToMtx4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Projection
// FProjection
// clGUISceneView
// FProjection
// LStr::Mat4ToStr

bool SaveScalarField_clGUISceneView_FProjection_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Mat4ToStr(dynamic_cast<clGUISceneView*>(Obj)->FProjection); 
   *Result = new mlNode("Projection" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass114(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUISceneView>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUISceneView,Mtd)
   _RM__(AfterConstruction)
   _RM__(PreRender)
   _RM__(SetShaderName)
   _RM__(SetRenderTechnique)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FView, clGUISceneView, View)

   REGISTER_PROPERTY__SCALAR_FIELD(FProjection, clGUISceneView, Projection)

   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Scroller.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIScroller

void RegisterPackageLinderdaumCoreClass115(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIScroller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIScroller,SetScrollingDirection )
   REG_CLS_MTD( clGUIScroller,Event_MouseLeft )
   REG_CLS_MTD( clGUIScroller,Event_LDoubleClick )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Sidebar.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIDialogWindow
         // Class: clGUISidebar
// SCALAR_PROPERTY_LOAD__FIELD
// HiddenX
// FHiddenX
// clGUISidebar
// FHiddenX
// LStr::ToFloat

bool LoadScalarField_clGUISidebar_FHiddenX_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISidebar*>(Obj))->FHiddenX=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// HiddenX
// FHiddenX
// clGUISidebar
// FHiddenX
// LStr::ToStrEpsilon

bool SaveScalarField_clGUISidebar_FHiddenX_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUISidebar*>(Obj)->FHiddenX); 
   *Result = new mlNode("HiddenX" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// HiddenY
// FHiddenY
// clGUISidebar
// FHiddenY
// LStr::ToFloat

bool LoadScalarField_clGUISidebar_FHiddenY_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISidebar*>(Obj))->FHiddenY=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// HiddenY
// FHiddenY
// clGUISidebar
// FHiddenY
// LStr::ToStrEpsilon

bool SaveScalarField_clGUISidebar_FHiddenY_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUISidebar*>(Obj)->FHiddenY); 
   *Result = new mlNode("HiddenY" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass116(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUISidebar>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUISidebar,Mtd)
   _RM__(PreRender)
   _RM__(PostRender)
   _RM__(Event_Registered)
   _RM__(Event_MouseInside)
   _RM__(Event_MouseOutside)
   _RM__(Event_MouseLeft)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FHiddenX, clGUISidebar, HiddenX)

   REGISTER_PROPERTY__SCALAR_FIELD(FHiddenY, clGUISidebar, HiddenY)

   StaticClass->SetSuperClassName( "clGUIDialogWindow" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/Transitions/I_Slide.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPage
         // Class: clGUITransitionPage
         // Class: clGUISlidePage
// SCALAR_PROPERTY_LOAD__FIELD
// PageToVec
// FPageToVec
// clGUISlidePage
// FPageToVec
// LStr::StrToVec4

bool LoadScalarField_clGUISlidePage_FPageToVec_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISlidePage*>(Obj))->FPageToVec=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PageToVec
// FPageToVec
// clGUISlidePage
// FPageToVec
// LStr::Vec4ToStr

bool SaveScalarField_clGUISlidePage_FPageToVec_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clGUISlidePage*>(Obj)->FPageToVec); 
   *Result = new mlNode("PageToVec" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PageFromVec
// FPageFromVec
// clGUISlidePage
// FPageFromVec
// LStr::StrToVec4

bool LoadScalarField_clGUISlidePage_FPageFromVec_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISlidePage*>(Obj))->FPageFromVec=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PageFromVec
// FPageFromVec
// clGUISlidePage
// FPageFromVec
// LStr::Vec4ToStr

bool SaveScalarField_clGUISlidePage_FPageFromVec_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clGUISlidePage*>(Obj)->FPageFromVec); 
   *Result = new mlNode("PageFromVec" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass117(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUISlidePage>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUISlidePage,FinishAnimation )
   REG_CLS_MTD( clGUISlidePage,SetTransitionPercent )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FPageToVec, clGUISlidePage, PageToVec)

   REGISTER_PROPERTY__SCALAR_FIELD(FPageFromVec, clGUISlidePage, PageFromVec)

   StaticClass->SetSuperClassName( "clGUITransitionPage" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Slider.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUISlider
// SCALAR_PROPERTY_LOAD__FIELD
// MinValue
// FMinValue
// clGUISlider
// FMinValue
// LStr::ToFloat

bool LoadScalarField_clGUISlider_FMinValue_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISlider*>(Obj))->FMinValue=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MinValue
// FMinValue
// clGUISlider
// FMinValue
// LStr::ToStrEpsilon

bool SaveScalarField_clGUISlider_FMinValue_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUISlider*>(Obj)->FMinValue); 
   *Result = new mlNode("MinValue" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MaxValue
// FMaxValue
// clGUISlider
// FMaxValue
// LStr::ToFloat

bool LoadScalarField_clGUISlider_FMaxValue_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISlider*>(Obj))->FMaxValue=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MaxValue
// FMaxValue
// clGUISlider
// FMaxValue
// LStr::ToStrEpsilon

bool SaveScalarField_clGUISlider_FMaxValue_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUISlider*>(Obj)->FMaxValue); 
   *Result = new mlNode("MaxValue" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// CurrentValue
// ""
// clGUISlider
// SetCurrentValue
// LStr::ToFloat

bool LoadScalarField_clGUISlider_CurrentValue_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISlider*>(Obj))->SetCurrentValue(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// CurrentValue
// ""
// clGUISlider
// GetCurrentValue
// LStr::ToStrEpsilon

bool SaveScalarField_clGUISlider_CurrentValue_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUISlider*>(Obj)->GetCurrentValue() ); 
   *Result = new mlNode("CurrentValue" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShowValue
// FShowValue
// clGUISlider
// FShowValue
// LStr::ToBool

bool LoadScalarField_clGUISlider_FShowValue_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUISlider*>(Obj))->FShowValue=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShowValue
// FShowValue
// clGUISlider
// FShowValue
// LStr::ToStr_Bool

bool SaveScalarField_clGUISlider_FShowValue_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clGUISlider*>(Obj)->FShowValue); 
   *Result = new mlNode("ShowValue" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass118(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUISlider>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUISlider,Mtd)
   _RM__(AfterConstruction)
   _RM__(PostRender)
   _RM__(GetCurrentValue)
   _RM__(SetCurrentValue)
   _RM__(Event_Timer)
   _RM__(Event_CaptureChanged)
   _RM__(Event_MouseInside)
   _RM__(Event_MouseLeft)
   _RM__(Event_LDoubleClick)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FMinValue, clGUISlider, MinValue)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaxValue, clGUISlider, MaxValue)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(CurrentValue, clGUISlider, CurrentValue)

   REGISTER_PROPERTY__SCALAR_FIELD(FShowValue, clGUISlider, ShowValue)

   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUISplitter

void RegisterPackageLinderdaumCoreClass119(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUISplitter>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUISplitter,Event_Registered )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_StaticRect.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIStaticRect

void RegisterPackageLinderdaumCoreClass120(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIStaticRect>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIStaticRect,Mtd)
   _RM__(Contains)
   _RM__(ContainsCaption)
   _RM__(ContainsResizeCorner)
   _RM__(ContainsCloseButton)
   _RM__(PreRender)
   _RM__(CanFocus)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGUIView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_StaticWidget.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIStaticWidget

void RegisterPackageLinderdaumCoreClass121(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIStaticWidget>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIStaticWidget,Mtd)
   _RM__(Contains)
   _RM__(ContainsCaption)
   _RM__(ContainsResizeCorner)
   _RM__(ContainsCloseButton)
   _RM__(PreRender)
   _RM__(CanFocus)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGUIView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_StdConsole.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIStdConsole

void RegisterPackageLinderdaumCoreClass122(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIStdConsole>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIStdConsole,Mtd)
   _RM__(PreRender)
   _RM__(PostRender)
   _RM__(Event_Key)
   _RM__(Event_Registered)
   _RM__(Event_UnRegistered)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGUIView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_TabControl.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel
         // Class: clGUITab

void RegisterPackageLinderdaumCoreClass123(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUITab>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIBorderPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel
         // Class: clGUITabControl
// SCALAR_PROPERTY_LOAD__SETTER
// Select
// ""
// clGUITabControl
// Select
// EMPTY_CONVERTER

bool LoadScalarField_clGUITabControl_Select_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUITabControl*>(Obj))->Select(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Select
// ""
// clGUITabControl
// GetSelected
// EMPTY_CONVERTER

bool SaveScalarField_clGUITabControl_Select_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUITabControl*>(Obj)->GetSelected() ); 
   *Result = new mlNode("Select" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass124(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUITabControl>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUITabControl,Mtd)
   _RM__(EndLoad)
   _RM__(AddView)
   _RM__(AddViews)
   _RM__(RemoveView)
   _RM__(PreRender)
   _RM__(TabActivated)
   _RM__(Select)
   _RM__(GetSelected)
   _RM__(Event_MouseLeft)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Select, clGUITabControl, Select)

   StaticClass->SetSuperClassName( "clGUIBorderPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clGUITransitionPage_Tunneller.h"

#include "Linderdaum/GUI/ComCtl/I_TransitionPage.h"

void RegisterPackageLinderdaumCoreClass125(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clGUITransitionPage_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUITransitionPage,Mtd)
   _RM__(PreRender)
   _RM__(StartAnimation)
   _RM__(FinishAnimation)
   _RM__(SetTransitionPercent)
   _RM__(GetTransitionPercent)
   _RM__(Event_PageActive)
   _RM__(Event_PageInactive)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIPage" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPage
         // Class: clGUITransitionPage
// SCALAR_PROPERTY_LOAD__SETTER
// TransitionPercent
// ""
// clGUITransitionPage
// SetTransitionPercent
// LStr::ToFloat

bool LoadScalarField_clGUITransitionPage_TransitionPercent_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUITransitionPage*>(Obj))->SetTransitionPercent(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// TransitionPercent
// ""
// clGUITransitionPage
// GetTransitionPercent
// LStr::ToStrEpsilon

bool SaveScalarField_clGUITransitionPage_TransitionPercent_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUITransitionPage*>(Obj)->GetTransitionPercent() ); 
   *Result = new mlNode("TransitionPercent" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// AnimationTime
// FAnimationTime
// clGUITransitionPage
// FAnimationTime
// LStr::ToFloat

bool LoadScalarField_clGUITransitionPage_FAnimationTime_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUITransitionPage*>(Obj))->FAnimationTime=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// AnimationTime
// FAnimationTime
// clGUITransitionPage
// FAnimationTime
// LStr::ToStrEpsilon

bool SaveScalarField_clGUITransitionPage_FAnimationTime_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUITransitionPage*>(Obj)->FAnimationTime); 
   *Result = new mlNode("AnimationTime" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PageFromID
// FPageFromID
// clGUITransitionPage
// FPageFromID
// EMPTY_CONVERTER

bool LoadScalarField_clGUITransitionPage_FPageFromID_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUITransitionPage*>(Obj))->FPageFromID=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PageFromID
// FPageFromID
// clGUITransitionPage
// FPageFromID
// EMPTY_CONVERTER

bool SaveScalarField_clGUITransitionPage_FPageFromID_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUITransitionPage*>(Obj)->FPageFromID); 
   *Result = new mlNode("PageFromID" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PageToID
// FPageToID
// clGUITransitionPage
// FPageToID
// EMPTY_CONVERTER

bool LoadScalarField_clGUITransitionPage_FPageToID_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUITransitionPage*>(Obj))->FPageToID=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PageToID
// FPageToID
// clGUITransitionPage
// FPageToID
// EMPTY_CONVERTER

bool SaveScalarField_clGUITransitionPage_FPageToID_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUITransitionPage*>(Obj)->FPageToID); 
   *Result = new mlNode("PageToID" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass126(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUITransitionPage>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUITransitionPage,Mtd)
   _RM__(PreRender)
   _RM__(StartAnimation)
   _RM__(FinishAnimation)
   _RM__(SetTransitionPercent)
   _RM__(GetTransitionPercent)
   _RM__(Event_PageActive)
   _RM__(Event_PageInactive)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(TransitionPercent, clGUITransitionPage, TransitionPercent)

   REGISTER_PROPERTY__SCALAR_FIELD(FAnimationTime, clGUITransitionPage, AnimationTime)

   REGISTER_PROPERTY__SCALAR_FIELD(FPageFromID, clGUITransitionPage, PageFromID)

   REGISTER_PROPERTY__SCALAR_FIELD(FPageToID, clGUITransitionPage, PageToID)

   StaticClass->SetSuperClassName( "clGUIPage" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUISplitter
         // Class: clGUIVerticalSplitter

void RegisterPackageLinderdaumCoreClass127(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIVerticalSplitter>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUISplitter" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUISceneView
         // Class: clGUIVisualSceneView

void RegisterPackageLinderdaumCoreClass128(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIVisualSceneView>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIVisualSceneView,Mtd)
   _RM__(Event_Key)
   _RM__(PreRender)
   _RM__(UpdateView)
   _RM__(SetProjector)
   _RM__(SetScene)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUISceneView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clGUIWindow_Tunneller.h"

#include "Linderdaum/GUI/ComCtl/I_Window.h"

void RegisterPackageLinderdaumCoreClass129(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIWindow_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIWindow,Mtd)
   _RM__(ContainsCaption)
   _RM__(ContainsCloseButton)
   _RM__(ContainsResizeCorner)
   _RM__(PreRender)
   _RM__(Event_Registered)
   _RM__(Event_MouseInside)
   _RM__(Event_MouseOutside)
   _RM__(Event_MouseLeft)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIDialogWindow" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIDialogWindow
         // Class: clGUIWindow

void RegisterPackageLinderdaumCoreClass130(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIWindow>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIWindow,Mtd)
   _RM__(ContainsCaption)
   _RM__(ContainsCloseButton)
   _RM__(ContainsResizeCorner)
   _RM__(PreRender)
   _RM__(Event_Registered)
   _RM__(Event_MouseInside)
   _RM__(Event_MouseOutside)
   _RM__(Event_MouseLeft)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIDialogWindow" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/GameCamera.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGameCamera

void RegisterPackageLinderdaumCoreClass131(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGameCamera>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGameCamera,AfterConstruction )
   REG_CLS_MTD( clGameCamera,GetCamera )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Geometry/Geom.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iResource
            // Adding abstract: GetCachingDir
         // Class: clGeom
            // Overriding abstract: GetCachingDir

void RegisterPackageLinderdaumCoreClass132(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGeom>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGeom,Mtd)
   _RM__(AfterConstruction)
   _RM__(GetCachingDir)
   _RM__(CacheTo)
   _RM__(CacheFrom)
   _RM__(GetCurrentMesh)
   _RM__(GetDefaultMesh)
   _RM__(SetMesh)
   _RM__(CloneGeom)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iResource" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clGestureHandler_Tunneller.h"

void RegisterPackageLinderdaumCoreClass133(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clGestureHandler_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGestureHandler,Mtd)
   _RM__(AfterConstruction)
   _RM__(IsGestureValid)
   _RM__(IsDraggingValid)
   _RM__(GetMotionData)
   _RM__(GetPositionDelta)
   _RM__(GetTranslationMatrix)
   _RM__(GetInitialTouchPoint)
   _RM__(GetCurrentTouchPoint)
   _RM__(AddListener)
   _RM__(GetNumListeners)
   _RM__(GetListener)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGestureHandler

void RegisterPackageLinderdaumCoreClass134(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGestureHandler>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGestureHandler,Mtd)
   _RM__(AfterConstruction)
   _RM__(IsGestureValid)
   _RM__(IsDraggingValid)
   _RM__(GetMotionData)
   _RM__(GetPositionDelta)
   _RM__(GetTranslationMatrix)
   _RM__(GetInitialTouchPoint)
   _RM__(GetCurrentTouchPoint)
   _RM__(AddListener)
   _RM__(GetNumListeners)
   _RM__(GetListener)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/VisualScene/Gizmos.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clVisualObject
         // Class: clVisualModifier
         // Class: clGizmo

void RegisterPackageLinderdaumCoreClass135(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGizmo>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGizmo,Mtd)
   _RM__(AfterConstruction)
   _RM__(BindToPropVector)
   _RM__(BindToPropMatrix)
   _RM__(BindToPropQuat)
   _RM__(BindToVarVector)
   _RM__(BindToVarMatrix)
   _RM__(BindToVarQuat)
   _RM__(Unbind)
   _RM__(FetchInitialPropertyValue)
   _RM__(SetCurrentValue)
   _RM__(Register)
   _RM__(Unregister)
   _RM__(AddDebugGeometry)
   _RM__(RemoveDebugGeometry)
   _RM__(SetTransform)
   _RM__(GetTransform)
   _RM__(UpdateTransform)
   _RM__(IntersectsWithRay)
   _RM__(Update)
   _RM__(AlignToScreen)
   _RM__(OnMouseDown)
   _RM__(OnMouseMove)
   _RM__(OnMouseUp)
   _RM__(SetStartTransform)
   _RM__(CalculateTransform)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clVisualModifier" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGlyphsCache

void RegisterPackageLinderdaumCoreClass136(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGlyphsCache>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGlyphsCache,Mtd)
   _RM__(AfterConstruction)
   _RM__(InsertGlyph)
   _RM__(HasGlyph)
   _RM__(GetTotalPages)
   _RM__(GetPageBitmap)
   _RM__(GetPageTexture)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Math/LGraph.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGraph
// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Vertices
// FVertices
// clGraph
// LStr::StrToVec3

bool LoadScalarItem_clGraph_FVertices_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clGraph*>(Obj)-> TheArrayName [i] = (LStr::StrToVec3( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clGraph*>(Obj)->FVertices[i] = (LStr::StrToVec3( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Vertices
// FVertices
// clGraph
// LStr::Vec3ToStr

bool SaveScalarItem_clGraph_FVertices_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clGraph*>(Obj)->FVertices[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FVertices
// clGraph

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FVertices,clGraph) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FVertices,clGraph) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FVertices,clGraph)



// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// LocalOrientations
// FLocalOrientations
// clGraph
// LStr::StrToQuat

bool LoadScalarItem_clGraph_FLocalOrientations_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clGraph*>(Obj)-> TheArrayName [i] = (LStr::StrToQuat( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clGraph*>(Obj)->FLocalOrientations[i] = (LStr::StrToQuat( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// LocalOrientations
// FLocalOrientations
// clGraph
// LStr::QuatToStr

bool SaveScalarItem_clGraph_FLocalOrientations_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =LStr::QuatToStr(dynamic_cast<clGraph*>(Obj)->FLocalOrientations[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FLocalOrientations
// clGraph

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FLocalOrientations,clGraph) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FLocalOrientations,clGraph) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FLocalOrientations,clGraph)



// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Edge0
// FEdge0
// clGraph
// LStr::ToInt

bool LoadScalarItem_clGraph_FEdge0_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clGraph*>(Obj)-> TheArrayName [i] = (LStr::ToInt( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clGraph*>(Obj)->FEdge0[i] = (LStr::ToInt( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Edge0
// FEdge0
// clGraph
// LStr::ToStr

bool SaveScalarItem_clGraph_FEdge0_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =LStr::ToStr(dynamic_cast<clGraph*>(Obj)->FEdge0[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FEdge0
// clGraph

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FEdge0,clGraph) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FEdge0,clGraph) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FEdge0,clGraph)



// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Edge1
// FEdge1
// clGraph
// LStr::ToInt

bool LoadScalarItem_clGraph_FEdge1_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clGraph*>(Obj)-> TheArrayName [i] = (LStr::ToInt( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clGraph*>(Obj)->FEdge1[i] = (LStr::ToInt( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Edge1
// FEdge1
// clGraph
// LStr::ToStr

bool SaveScalarItem_clGraph_FEdge1_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =LStr::ToStr(dynamic_cast<clGraph*>(Obj)->FEdge1[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FEdge1
// clGraph

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FEdge1,clGraph) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FEdge1,clGraph) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FEdge1,clGraph)



// SCALAR_PROPERTY_LOAD__FIELD
// Oriented
// FOriented
// clGraph
// FOriented
// LStr::ToBool

bool LoadScalarField_clGraph_FOriented_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGraph*>(Obj))->FOriented=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Oriented
// FOriented
// clGraph
// FOriented
// LStr::ToStr_Bool

bool SaveScalarField_clGraph_FOriented_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clGraph*>(Obj)->FOriented); 
   *Result = new mlNode("Oriented" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// VertexItems
// FVertexItems
// clGraph
// iObject

bool LoadObjectItem_clGraph_FVertexItems_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  iObject* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clGraph* CastedObj = dynamic_cast<clGraph*>(Obj); 
   if ( Res ) CastedObj->FVertexItems[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// VertexItems
// FVertexItems
// clGraph

bool SaveObjectItem_clGraph_FVertexItems_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clGraph*>(Obj)->FVertexItems[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FVertexItems
// clGraph

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FVertexItems,clGraph) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FVertexItems,clGraph) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FVertexItems,clGraph)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FVertexItems
// clGraph

void DeleteFunction_clGraph_FVertexItems_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clGraph_FVertexItems_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clGraph*>(Obj)->FVertexItems[i] ->DisposeObject(); 
   }
   dynamic_cast<clGraph*>(Obj)->FVertexItems.clear(); 
}



// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// EdgeItems
// FEdgeItems
// clGraph
// iObject

bool LoadObjectItem_clGraph_FEdgeItems_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  iObject* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clGraph* CastedObj = dynamic_cast<clGraph*>(Obj); 
   if ( Res ) CastedObj->FEdgeItems[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// EdgeItems
// FEdgeItems
// clGraph

bool SaveObjectItem_clGraph_FEdgeItems_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clGraph*>(Obj)->FEdgeItems[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FEdgeItems
// clGraph

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FEdgeItems,clGraph) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FEdgeItems,clGraph) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FEdgeItems,clGraph)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FEdgeItems
// clGraph

void DeleteFunction_clGraph_FEdgeItems_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clGraph_FEdgeItems_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clGraph*>(Obj)->FEdgeItems[i] ->DisposeObject(); 
   }
   dynamic_cast<clGraph*>(Obj)->FEdgeItems.clear(); 
}





void RegisterPackageLinderdaumCoreClass137(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGraph>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGraph,Mtd)
   _RM__(From2DGrid4)
   _RM__(From2DGrid8)
   _RM__(From2DGrid)
   _RM__(CreateGraphGeometry)
   _RM__(SetEdgeItem)
   _RM__(GetEdgeItem)
   _RM__(SetVertexItem)
   _RM__(GetVertexItem)
   _RM__(SetVertex)
   _RM__(GetVertex)
   _RM__(SetEdge0)
   _RM__(GetEdge0)
   _RM__(SetEdge1)
   _RM__(GetEdge1)
   _RM__(SetLocalOrientation)
   _RM__(GetLocalOrientation)
   _RM__(ClearGraph)
   _RM__(RemoveEdge)
   _RM__(AddEdge)
   _RM__(RemoveVertex)
   _RM__(PathExists)
   _RM__(FindPath)
   _RM__(CurveForPath)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FVertices, clGraph, Vertices)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FLocalOrientations, clGraph, LocalOrientations)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FEdge0, clGraph, Edge0)

   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FEdge1, clGraph, Edge1)

   REGISTER_PROPERTY__SCALAR_FIELD(FOriented, clGraph, Oriented)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FVertexItems, clGraph, VertexItems)

   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FEdgeItems, clGraph, EdgeItems)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iInputDevice
            // Adding abstract: GetName
            // Adding abstract: Poll
            // Adding abstract: Start
            // Adding abstract: IsStarted
            // Adding abstract: Stop
            // Adding abstract: GetNumAxes
            // Adding abstract: SetAxisRange
            // Adding abstract: SetAxisDeadZone
            // Adding abstract: SetAxisSaturation
            // Adding abstract: GetAxisValue
            // Adding abstract: GetAxisName
            // Adding abstract: SetAxisValue
            // Adding abstract: GetKeyName
            // Adding abstract: IsPressed
            // Adding abstract: GetNumKeys
            // Adding abstract: SetKeyState
         // Class: clGyroscopeDevice
            // Overriding abstract: GetName
            // Overriding abstract: Poll
            // Overriding abstract: Start
            // Overriding abstract: IsStarted
            // Overriding abstract: Stop
            // Overriding abstract: GetNumAxes
            // Overriding abstract: SetAxisRange
            // Overriding abstract: SetAxisDeadZone
            // Overriding abstract: SetAxisSaturation
            // Overriding abstract: GetAxisValue
            // Overriding abstract: GetAxisName
            // Overriding abstract: SetAxisValue
            // Overriding abstract: GetKeyName
            // Overriding abstract: IsPressed
            // Overriding abstract: GetNumKeys
            // Overriding abstract: SetKeyState

void RegisterPackageLinderdaumCoreClass138(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGyroscopeDevice>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGyroscopeDevice,Mtd)
   _RM__(GetName)
   _RM__(Poll)
   _RM__(Start)
   _RM__(IsStarted)
   _RM__(Stop)
   _RM__(GetNumAxes)
   _RM__(SetAxisRange)
   _RM__(SetAxisDeadZone)
   _RM__(SetAxisSaturation)
   _RM__(GetValues)
   _RM__(GetAxisValue)
   _RM__(GetAxisName)
   _RM__(SetAxisValue)
   _RM__(GetKeyName)
   _RM__(IsPressed)
   _RM__(GetNumKeys)
   _RM__(SetKeyState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iInputDevice" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Postprocess/HDRPP.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iPostprocessor
            // Adding abstract: Render
         // Class: clHDRPostprocessor
            // Overriding abstract: Render

void RegisterPackageLinderdaumCoreClass139(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clHDRPostprocessor>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clHDRPostprocessor,AfterConstruction )
   REG_CLS_MTD( clHDRPostprocessor,Render )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iPostprocessor" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Heightmaps/HeightMapFacetter.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iHeightMapFacetter
            // Adding abstract: FacetHeightMap
            // Adding abstract: UpdateFacettedHeightMap
         // Class: clHeightMapFacetter
            // Overriding abstract: FacetHeightMap
            // Overriding abstract: UpdateFacettedHeightMap

void RegisterPackageLinderdaumCoreClass140(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clHeightMapFacetter>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clHeightMapFacetter,FacetHeightMap )
   REG_CLS_MTD( clHeightMapFacetter,UpdateFacettedHeightMap )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iHeightMapFacetter" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Geometry/Surfaces.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clHeightmapGenerator
            // Overriding abstract: R_and_dR

void RegisterPackageLinderdaumCoreClass141(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clHeightmapGenerator>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clHeightmapGenerator,SetHeightmap )
   REG_CLS_MTD( clHeightmapGenerator,CreateSurface )
   REG_CLS_MTD( clHeightmapGenerator,R_and_dR )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clHighScores_Tunneller.h"

#include "Linderdaum/World/HighScores.h"

void RegisterPackageLinderdaumCoreClass142(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clHighScores_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clHighScores,Mtd)
   _RM__(SaveToStream)
   _RM__(LoadFromStream)
   _RM__(SaveToFile)
   _RM__(LoadFromFile)
   _RM__(UpdateHighScores)
   _RM__(GetNumEntries)
   _RM__(GetEntry)
   _RM__(Clear)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clHighScores

void RegisterPackageLinderdaumCoreClass143(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clHighScores>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clHighScores,Mtd)
   _RM__(SaveToStream)
   _RM__(LoadFromStream)
   _RM__(SaveToFile)
   _RM__(LoadFromFile)
   _RM__(UpdateHighScores)
   _RM__(GetNumEntries)
   _RM__(GetEntry)
   _RM__(Clear)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clHyperbolicParaboloid
            // Overriding abstract: R_and_dR

void RegisterPackageLinderdaumCoreClass144(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clHyperbolicParaboloid>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clHyperbolicParaboloid,R_and_dR )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Images/Image.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iResource
            // Adding abstract: GetCachingDir
         // Class: clImage
            // Overriding abstract: GetCachingDir

void RegisterPackageLinderdaumCoreClass145(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clImage>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clImage,Mtd)
   _RM__(AfterConstruction)
   _RM__(GetCachingDir)
   _RM__(GetDefaultBitmap)
   _RM__(GetCurrentBitmap)
   _RM__(GetCurrentBitmapLocked)
   _RM__(CloneImage)
   _RM__(SetBitmap)
   _RM__(GetTexture)
   _RM__(ProcessWithShader)
   _RM__(ProcessWithShaderProgram)
   _RM__(CommitChanges)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iResource" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Images/ImageCache.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clImageCache

void RegisterPackageLinderdaumCoreClass146(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clImageCache>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clImageCache,Mtd)
   _RM__(InitCache)
   _RM__(SetSeparation)
   _RM__(InsertBitmap)
   _RM__(GetTotalPages)
   _RM__(GetPageBitmap)
   _RM__(GetPageTexture)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Images/ImageList.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clImageList
// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// ImageFiles
// FImageNames
// clImageList
// EMPTY_CONVERTER

bool LoadScalarItem_clImageList_FImageNames_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clImageList*>(Obj)-> TheArrayName [i] = (EMPTY_CONVERTER( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clImageList*>(Obj)->FImageNames[i] = (EMPTY_CONVERTER( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// ImageFiles
// FImageNames
// clImageList
// EMPTY_CONVERTER

bool SaveScalarItem_clImageList_FImageNames_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clImageList*>(Obj)->FImageNames[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FImageNames
// clImageList

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FImageNames,clImageList) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FImageNames,clImageList) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FImageNames,clImageList)





void RegisterPackageLinderdaumCoreClass147(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clImageList>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clImageList,Mtd)
   _RM__(EndLoad)
   _RM__(GetNumImages)
   _RM__(GetImage)
   _RM__(SetImageName)
   _RM__(GetImageName)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FImageNames, clImageList, ImageFiles)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clValidator
         // Class: clIntValidator
         // Class: clIntRangeValidator

void RegisterPackageLinderdaumCoreClass148(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass2<clIntRangeValidator, int, int>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clIntRangeValidator,IsValid )
   REG_CLS_MTD( clIntRangeValidator,SetRange )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clIntValidator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clValidator
         // Class: clIntValidator

void RegisterPackageLinderdaumCoreClass149(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clIntValidator>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clIntValidator,IsValid )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clValidator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iInputDevice
            // Adding abstract: GetName
            // Adding abstract: Poll
            // Adding abstract: Start
            // Adding abstract: IsStarted
            // Adding abstract: Stop
            // Adding abstract: GetNumAxes
            // Adding abstract: SetAxisRange
            // Adding abstract: SetAxisDeadZone
            // Adding abstract: SetAxisSaturation
            // Adding abstract: GetAxisValue
            // Adding abstract: GetAxisName
            // Adding abstract: SetAxisValue
            // Adding abstract: GetKeyName
            // Adding abstract: IsPressed
            // Adding abstract: GetNumKeys
            // Adding abstract: SetKeyState
         // Class: clKeyboardDevice
            // Overriding abstract: GetName
            // Overriding abstract: Poll
            // Overriding abstract: Start
            // Overriding abstract: IsStarted
            // Overriding abstract: Stop
            // Overriding abstract: GetNumAxes
            // Overriding abstract: SetAxisRange
            // Overriding abstract: SetAxisDeadZone
            // Overriding abstract: SetAxisSaturation
            // Overriding abstract: GetAxisValue
            // Overriding abstract: GetAxisName
            // Overriding abstract: SetAxisValue
            // Overriding abstract: GetKeyName
            // Overriding abstract: IsPressed
            // Overriding abstract: GetNumKeys
            // Overriding abstract: SetKeyState

void RegisterPackageLinderdaumCoreClass150(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clKeyboardDevice>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clKeyboardDevice,Mtd)
   _RM__(GetName)
   _RM__(Poll)
   _RM__(Start)
   _RM__(IsStarted)
   _RM__(Stop)
   _RM__(GetNumAxes)
   _RM__(SetAxisRange)
   _RM__(SetAxisDeadZone)
   _RM__(SetAxisSaturation)
   _RM__(GetAxisValue)
   _RM__(GetAxisName)
   _RM__(SetAxisValue)
   _RM__(GetKeyName)
   _RM__(IsPressed)
   _RM__(GetNumKeys)
   _RM__(SetKeyState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iInputDevice" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clKleinBottle
            // Overriding abstract: R_and_dR

void RegisterPackageLinderdaumCoreClass151(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clKleinBottle>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clKleinBottle,R_and_dR )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clUVSurfaceGenerator
            // Adding abstract: R_and_dR
         // Class: clKleinBottle2
            // Overriding abstract: R_and_dR
// SCALAR_PROPERTY_LOAD__FIELD
// a
// a
// clKleinBottle2
// a
// LStr::ToFloat

bool LoadScalarField_clKleinBottle2_a_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clKleinBottle2*>(Obj))->a=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// a
// a
// clKleinBottle2
// a
// LStr::ToStrEpsilon

bool SaveScalarField_clKleinBottle2_a_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clKleinBottle2*>(Obj)->a); 
   *Result = new mlNode("a" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// b
// b
// clKleinBottle2
// b
// LStr::ToFloat

bool LoadScalarField_clKleinBottle2_b_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clKleinBottle2*>(Obj))->b=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// b
// b
// clKleinBottle2
// b
// LStr::ToStrEpsilon

bool SaveScalarField_clKleinBottle2_b_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clKleinBottle2*>(Obj)->b); 
   *Result = new mlNode("b" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// c
// c
// clKleinBottle2
// c
// LStr::ToFloat

bool LoadScalarField_clKleinBottle2_c_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clKleinBottle2*>(Obj))->c=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// c
// c
// clKleinBottle2
// c
// LStr::ToStrEpsilon

bool SaveScalarField_clKleinBottle2_c_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clKleinBottle2*>(Obj)->c); 
   *Result = new mlNode("c" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// d
// d
// clKleinBottle2
// d
// LStr::ToFloat

bool LoadScalarField_clKleinBottle2_d_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clKleinBottle2*>(Obj))->d=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// d
// d
// clKleinBottle2
// d
// LStr::ToStrEpsilon

bool SaveScalarField_clKleinBottle2_d_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clKleinBottle2*>(Obj)->d); 
   *Result = new mlNode("d" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass152(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clKleinBottle2>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clKleinBottle2,R_and_dR )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(a, clKleinBottle2, a)

   REGISTER_PROPERTY__SCALAR_FIELD(b, clKleinBottle2, b)

   REGISTER_PROPERTY__SCALAR_FIELD(c, clKleinBottle2, c)

   REGISTER_PROPERTY__SCALAR_FIELD(d, clKleinBottle2, d)

   StaticClass->SetSuperClassName( "clUVSurfaceGenerator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#undef REG_CLS_MTD

/*
 * 16/01/2012
     Autogenerated via LinderScript Database Compiler 0.9.24
*/
