/**
 * \file ExpReg_Core2.cpp
 * \brief Autogenerated via LinderScript Database Compiler 0.9.24
 * \version 0.6.06
 * \date 16/01/2012
 * \author Sergey Kosarevsky, 2005-2011
 * \author Viktor Latypov, 2007-2011
 * \author support@linderdaum.com http://www.linderdaum.com
 */

#include "Generated/MethodBind.h"

#include "Core/Linker.h"
#include "Core/RTTI/iStaticClass.h"
#include "Core/RTTI/FieldBinding.h"
#include "Core/RTTI/PropertyMacros.h"

#include "Core/VFS/ML.h"

// Custom include file
#include "Generated/CoreExport_Includes.h"

#define REG_CLS_MTD(ClsName, MtdName) \
StaticClass->RegisterMethod( BindNativeMethod( & ClsName :: MtdName, #MtdName ) );

#include "Linderdaum/Renderer/Canvas.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clCanvas
// SCALAR_PROPERTY_LOAD__FIELD
// DefaultFontName
// FDefaultFontName
// clCanvas
// FDefaultFontName
// EMPTY_CONVERTER

bool LoadScalarField_clCanvas_FDefaultFontName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clCanvas*>(Obj))->FDefaultFontName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// DefaultFontName
// FDefaultFontName
// clCanvas
// FDefaultFontName
// EMPTY_CONVERTER

bool SaveScalarField_clCanvas_FDefaultFontName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clCanvas*>(Obj)->FDefaultFontName); 
   *Result = new mlNode("DefaultFontName" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass51(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clCanvas>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clCanvas,Mtd)
   _RM__(AfterConstruction)
   _RM__(Cleanup)
   _RM__(Geom)
   _RM__(Rect)
   _RM__(TexturedRect)
   _RM__(TexturedRectTiled)
   _RM__(TexturedRect3D)
   _RM__(Rect3DShader)
   _RM__(AlphaTexture)
   _RM__(FullscreenRect)
   _RM__(FullscreenRectSP)
   _RM__(Line3D)
   _RM__(Line3DGlow)
   _RM__(Circle3D)
   _RM__(Arrow3D)
   _RM__(BoundingBox)
   _RM__(OrientedBox)
   _RM__(Sphere)
   _RM__(FullSphere)
   _RM__(RigidBody)
   _RM__(CoordFrame)
   _RM__(CollisionShape)
   _RM__(Point)
   _RM__(TextStr)
   _RM__(TextStrFreeType)
   _RM__(TextStrFreeType_Flush)
   _RM__(TextStrGetBitmapFreeType)
   _RM__(TextStrBitmapFreeType)
   _RM__(TextStrTextureFreeType)
   _RM__(CreateFontFace)
   _RM__(BeginTextPacket)
   _RM__(EndTextPacket)
   _RM__(TurnOnLineClipping)
   _RM__(TurnOffLineClipping)
   _RM__(DrawOrientation)
   _RM__(Flush)
   _RM__(SetMatrices)
   _RM__(GetDefaultFont)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FDefaultFontName, clCanvas, DefaultFontName)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/Script.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clCodePatch
// SCALAR_ARRAY_PROPERTY_LOAD__FIELD
// Code
// FSource
// clCodePatch
// EMPTY_CONVERTER

bool LoadScalarItem_clCodePatch_FSource_FIELD(mlNode* Node, iObject* Obj, int i)
{ 
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
/* dynamic_cast<clCodePatch*>(Obj)-> TheArrayName [i] = (EMPTY_CONVERTER( RealNode->getValue() ) );*/
   LString LocalValue = RealNode->getValue();
   LString RealValue;
   if ( LocalValue.empty() )
   {
      RealValue = RealNode->getID(); 
   }
   else
   {
      RealValue = RealNode->getID() + LString(" ") + LocalValue; 
   }
   dynamic_cast<clCodePatch*>(Obj)->FSource[i] = (EMPTY_CONVERTER( RealValue ) );
   return true; 
}

// SCALAR_ARRAY_PROPERTY_SAVE__FIELD
// Code
// FSource
// clCodePatch
// EMPTY_CONVERTER

bool SaveScalarItem_clCodePatch_FSource_FIELD(iObject* Obj, int i, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clCodePatch*>(Obj)->FSource[i]);   
/* mlNode* Res = new mlNode(#TheArrayName , Value); */ 
   *Result = new mlNode("", Value); 
   return true; 
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FSource
// clCodePatch

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FSource,clCodePatch) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FSource,clCodePatch) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FSource,clCodePatch)





void RegisterPackageLinderdaumCoreClass52(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clCodePatch>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clCodePatch,Mtd)
   _RM__(BeginSave)
   _RM__(EndSave)
   _RM__(BeginLoad)
   _RM__(EndLoad)
   _RM__(Reassemble)
   _RM__(Disassemble)
   _RM__(AssembleLine)
   _RM__(AssembleCode)
   _RM__(GetLabelLink)
   _RM__(FindLabelByIP)
   _RM__(GetString)
   _RM__(GetStringsCount)
   _RM__(GetInstructions)
   _RM__(Link)
   _RM__(GetSourceLine)
   _RM__(SetSourceLine)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_ARRAY_FIELD(FSource, clCodePatch, Code)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clCompositeBehaviour_Tunneller.h"

void RegisterPackageLinderdaumCoreClass53(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clCompositeBehaviour_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clCompositeBehaviour,Mtd)
   _RM__(DumpDot)
   _RM__(AddBehaviour)
   _RM__(ClearBehaviours)
   _RM__(GetNumBehaviours)
   _RM__(GetBehaviour)
   _RM__(SetBehaviour)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clBehaviour" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clBehaviour
         // Class: clCompositeBehaviour
// OBJECT_ARRAY_PROPERTY_LOAD__FIELD
// SubObjects
// FChildren
// clCompositeBehaviour
// clBehaviour

bool LoadObjectItem_clCompositeBehaviour_FChildren_FIELD(mlNode* Node, iObject* Obj, int i) 
{
   FIX_PARSER_DEFECT(RealNode, Node->children[i]) 
  clBehaviour* Ptr = NULL; 
   bool Res = Obj->Env->Linker->LoadObject(RealNode, reinterpret_cast<iObject**>(&Ptr)); 
  clCompositeBehaviour* CastedObj = dynamic_cast<clCompositeBehaviour*>(Obj); 
   if ( Res ) CastedObj->FChildren[i] = Ptr; 
   return Res; 
}

// OBJECT_ARRAY_PROPERTY_SAVE__FIELD
// SubObjects
// FChildren
// clCompositeBehaviour

bool SaveObjectItem_clCompositeBehaviour_FChildren_FIELD(iObject* Obj, int i, mlNode** Result) 
{
   return (dynamic_cast<clCompositeBehaviour*>(Obj)->FChildren[i])->Save(Result);
}


// ARRAY_PROPERTY_FUNCTIONS__FIELD
// FChildren
// clCompositeBehaviour

   ARRAY_PROPERTY_RESIZE_FUNCTION__FIELD(FChildren,clCompositeBehaviour) 
   ARRAY_PROPERTY_SIZE_FUNCTION__FIELD(FChildren,clCompositeBehaviour) 
   ARRAY_PROPERTY_CLEAR_FUNCTION__FIELD(FChildren,clCompositeBehaviour)


// ARRAY_PROPERTY_DELETE_FUNCTION__FIELD
// FChildren
// clCompositeBehaviour

void DeleteFunction_clCompositeBehaviour_FChildren_FIELD(iObject* Obj, int Resize) 
{ 
   int Size = SizeFunction_clCompositeBehaviour_FChildren_FIELD(Obj); 
   for (int i = 0 ; i < Size ; i++) 
   { 
      dynamic_cast<clCompositeBehaviour*>(Obj)->FChildren[i] ->DisposeObject(); 
   }
   dynamic_cast<clCompositeBehaviour*>(Obj)->FChildren.clear(); 
}





void RegisterPackageLinderdaumCoreClass54(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clCompositeBehaviour>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clCompositeBehaviour,Mtd)
   _RM__(DumpDot)
   _RM__(AddBehaviour)
   _RM__(ClearBehaviours)
   _RM__(GetNumBehaviours)
   _RM__(GetBehaviour)
   _RM__(SetBehaviour)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__OBJECT_ARRAY_FIELD(FChildren, clCompositeBehaviour, SubObjects)

   StaticClass->SetSuperClassName( "clBehaviour" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/VisualScene/Edit.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iPlacementConstraint
         // Class: clCompositeConstraint

void RegisterPackageLinderdaumCoreClass55(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clCompositeConstraint>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clCompositeConstraint,Mtd)
   _RM__(AddConstraint)
   _RM__(ClearConstraints)
   _RM__(ConstraintCount)
   _RM__(CanPlaceHere)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iPlacementConstraint" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/Console.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clConsole

void RegisterPackageLinderdaumCoreClass56(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clConsole>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clConsole,Mtd)
   _RM__(AfterConstruction)
   _RM__(UnpressAllKeys)
   _RM__(IsKeyPressed)
   _RM__(IsKeyPressedAny)
   _RM__(ExecuteBinding)
   _RM__(UnbindAll)
   _RM__(Bind)
   _RM__(UnBind)
   _RM__(DisplayMessage)
   _RM__(RegisterCommand)
   _RM__(UnRegisterCommand)
   _RM__(SendCommand)
   _RM__(QueryCommand)
   _RM__(GetAutocompleteCommand)
   _RM__(GetSendCommandResult)
   _RM__(SetHUDVisibility)
   _RM__(ShowConsole)
   _RM__(LockConsoleHistory)
   _RM__(UnlockConsoleHistory)
   _RM__(GetCommandsHistory)
   _RM__(GetVar)
   _RM__(GetVarDefault)
   _RM__(GetVarDefaultFloat)
   _RM__(FindVar)
   _RM__(GetVarValueStr)
   _RM__(GetVarValueInt)
   _RM__(GetVarValueFloat)
   _RM__(GetVarValueBool)
   _RM__(GetTimeVisible)
   _RM__(ExecuteScriptCode)
   _RM__(GetScriptCompiler)
   _RM__(InitializeScript)
   _RM__(Display)
   _RM__(DisplayError)
   _RM__(DisplayWarning)
   _RM__(DisplayInfoTip)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Physics/RigidBody.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clCoordinateFrame
// SCALAR_PROPERTY_LOAD__SETTER
// Orientation
// ""
// clCoordinateFrame
// SetMtxOrientation
// LStr::StrToMtx3

bool LoadScalarField_clCoordinateFrame_Orientation_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clCoordinateFrame*>(Obj))->SetMtxOrientation(LStr::StrToMtx3( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Orientation
// ""
// clCoordinateFrame
// GetMtxOrientation3
// LStr::Mat3ToStr

bool SaveScalarField_clCoordinateFrame_Orientation_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::Mat3ToStr(dynamic_cast<clCoordinateFrame*>(Obj)->GetMtxOrientation3() ); 
   *Result = new mlNode("Orientation" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Position
// ""
// clCoordinateFrame
// SetPosition
// LStr::StrToVec3

bool LoadScalarField_clCoordinateFrame_Position_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clCoordinateFrame*>(Obj))->SetPosition(LStr::StrToVec3( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Position
// ""
// clCoordinateFrame
// GetPosition
// LStr::Vec3ToStr

bool SaveScalarField_clCoordinateFrame_Position_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clCoordinateFrame*>(Obj)->GetPosition() ); 
   *Result = new mlNode("Position" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass57(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clCoordinateFrame>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clCoordinateFrame,Mtd)
   _RM__(GetMtxOrientation3)
   _RM__(GetMtxOrientation)
   _RM__(GetQuatOrientation)
   _RM__(SetMtxOrientation)
   _RM__(GetTransformation)
   _RM__(SetTransformation)
   _RM__(SetEulerAnglesV)
   _RM__(SetEulerAngles)
   _RM__(GetEulerAnglesV)
   _RM__(GetEulerAngles)
   _RM__(SetPosition)
   _RM__(GetPosition)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Orientation, clCoordinateFrame, Orientation)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Position, clCoordinateFrame, Position)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/DX11/DX11RenderContext.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iRenderContext
            // Adding abstract: GetPixel
            // Adding abstract: SetViewport
            // Adding abstract: SetViewportV
            // Adding abstract: RestoreViewport
            // Adding abstract: SetClearColor4v
            // Adding abstract: GetScreenshotSize
            // Adding abstract: GetScreenshot
            // Adding abstract: GetVideoSystemInfo
            // Adding abstract: GetTotalVideoMemory
            // Adding abstract: GetFreeVideoMemory
            // Adding abstract: CheckError
            // Adding abstract: ClearRenderTarget
            // Adding abstract: SetPolygonFillMode
            // Adding abstract: Finish
            // Adding abstract: SetState
            // Adding abstract: UpdateState
         // Class: clDX11RenderContext
            // Overriding abstract: CheckError
            // Overriding abstract: GetPixel
            // Overriding abstract: SetViewport
            // Overriding abstract: SetViewportV
            // Overriding abstract: RestoreViewport
            // Overriding abstract: SetClearColor4v
            // Overriding abstract: GetScreenshotSize
            // Overriding abstract: GetScreenshot
            // Overriding abstract: GetVideoSystemInfo
            // Overriding abstract: GetTotalVideoMemory
            // Overriding abstract: GetFreeVideoMemory
            // Overriding abstract: ClearRenderTarget
            // Overriding abstract: SetPolygonFillMode
            // Overriding abstract: Finish
            // Overriding abstract: SetState
            // Overriding abstract: UpdateState

void RegisterPackageLinderdaumCoreClass58(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clDX11RenderContext>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clDX11RenderContext,Mtd)
   _RM__(InitContext)
   _RM__(CheckError)
   _RM__(GetPixel)
   _RM__(SetViewport)
   _RM__(SetViewportV)
   _RM__(RestoreViewport)
   _RM__(SetClearColor4v)
   _RM__(GetScreenshotSize)
   _RM__(GetScreenshot)
   _RM__(GetVideoSystemInfo)
   _RM__(GetTotalVideoMemory)
   _RM__(GetFreeVideoMemory)
   _RM__(ClearRenderTarget)
   _RM__(SetPolygonFillMode)
   _RM__(Finish)
   _RM__(SetState)
   _RM__(UpdateState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iRenderContext" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/VisualScene/CameraPositioner.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iCameraPositioner
            // Adding abstract: Update
         // Class: clDampingPositioner
            // Overriding abstract: Update
// SCALAR_PROPERTY_LOAD__FIELD
// UseDamping
// FUseDamping
// clDampingPositioner
// FUseDamping
// LStr::ToBool

bool LoadScalarField_clDampingPositioner_FUseDamping_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clDampingPositioner*>(Obj))->FUseDamping=LStr::ToBool( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UseDamping
// FUseDamping
// clDampingPositioner
// FUseDamping
// LStr::ToStr_Bool

bool SaveScalarField_clDampingPositioner_FUseDamping_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clDampingPositioner*>(Obj)->FUseDamping); 
   *Result = new mlNode("UseDamping" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// LinearDamping
// FLinearDampFactor
// clDampingPositioner
// FLinearDampFactor
// LStr::ToFloat

bool LoadScalarField_clDampingPositioner_FLinearDampFactor_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clDampingPositioner*>(Obj))->FLinearDampFactor=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// LinearDamping
// FLinearDampFactor
// clDampingPositioner
// FLinearDampFactor
// LStr::ToStrEpsilon

bool SaveScalarField_clDampingPositioner_FLinearDampFactor_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clDampingPositioner*>(Obj)->FLinearDampFactor); 
   *Result = new mlNode("LinearDamping" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// AngularDamping
// FAngularDampFactor
// clDampingPositioner
// FAngularDampFactor
// LStr::ToFloat

bool LoadScalarField_clDampingPositioner_FAngularDampFactor_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clDampingPositioner*>(Obj))->FAngularDampFactor=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// AngularDamping
// FAngularDampFactor
// clDampingPositioner
// FAngularDampFactor
// LStr::ToStrEpsilon

bool SaveScalarField_clDampingPositioner_FAngularDampFactor_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clDampingPositioner*>(Obj)->FAngularDampFactor); 
   *Result = new mlNode("AngularDamping" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass59(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clDampingPositioner>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clDampingPositioner,Update )
   REG_CLS_MTD( clDampingPositioner,LinkToCameraPositioner )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FUseDamping, clDampingPositioner, UseDamping)

   REGISTER_PROPERTY__SCALAR_FIELD(FLinearDampFactor, clDampingPositioner, LinearDamping)

   REGISTER_PROPERTY__SCALAR_FIELD(FAngularDampFactor, clDampingPositioner, AngularDamping)

   StaticClass->SetSuperClassName( "iCameraPositioner" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clEditor

void RegisterPackageLinderdaumCoreClass60(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clEditor>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clEditor,Mtd)
   _RM__(SelectByName)
   _RM__(Select)
   _RM__(Unselect)
   _RM__(GetSelection)
   _RM__(GetEditableObject)
   _RM__(CreateSelectionGroup)
   _RM__(ObjectChanged)
   _RM__(SetToolType)
   _RM__(SetTool)
   _RM__(GetTool)
   _RM__(CanUndo)
   _RM__(CanRedo)
   _RM__(Undo)
   _RM__(Redo)
   _RM__(GetCurrentTransaction)
   _RM__(GetTransactionCount)
   _RM__(GetTransaction)
   _RM__(MakeTransaction)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clEntity_Tunneller.h"

#include "Linderdaum/World/Entity.h"

void RegisterPackageLinderdaumCoreClass61(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clEntity_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clEntity,Mtd)
   _RM__(EndLoad)
   _RM__(UpdateActor)
   _RM__(GetGeomHandle)
   _RM__(GetParentGeomHandle)
   _RM__(GetParentActor)
   _RM__(GetMeshName)
   _RM__(SetMeshName)
   _RM__(GetMeshHeight)
   _RM__(SetMeshHeight)
   _RM__(GetGeom)
   _RM__(SetGeom)
   _RM__(GetPosition)
   _RM__(SetPosition)
   _RM__(GetTransform)
   _RM__(GetTransformConst)
   _RM__(GetCenterMesh)
   _RM__(SetCenterMesh)
   _RM__(Actor_EnteredWorld)
   _RM__(Actor_LeavedWorld)
   _RM__(Entity_BecomeVisible)
   _RM__(Entity_BecomeInvisible)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iActor" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iActor
            // Adding abstract: UpdateActor
         // Class: clEntity
            // Overriding abstract: UpdateActor
// SCALAR_PROPERTY_LOAD__SETTER
// MeshName
// ""
// clEntity
// SetMeshName
// EMPTY_CONVERTER

bool LoadScalarField_clEntity_MeshName_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clEntity*>(Obj))->SetMeshName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// MeshName
// ""
// clEntity
// GetMeshName
// EMPTY_CONVERTER

bool SaveScalarField_clEntity_MeshName_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clEntity*>(Obj)->GetMeshName() ); 
   *Result = new mlNode("MeshName" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// MeshHeight
// ""
// clEntity
// SetMeshHeight
// LStr::ToFloat

bool LoadScalarField_clEntity_MeshHeight_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clEntity*>(Obj))->SetMeshHeight(LStr::ToFloat( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// MeshHeight
// ""
// clEntity
// GetMeshHeight
// LStr::ToStrEpsilon

bool SaveScalarField_clEntity_MeshHeight_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clEntity*>(Obj)->GetMeshHeight() ); 
   *Result = new mlNode("MeshHeight" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Position
// ""
// clEntity
// SetPosition
// LStr::StrToVec3

bool LoadScalarField_clEntity_Position_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clEntity*>(Obj))->SetPosition(LStr::StrToVec3( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Position
// ""
// clEntity
// GetPosition
// LStr::Vec3ToStr

bool SaveScalarField_clEntity_Position_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::Vec3ToStr(dynamic_cast<clEntity*>(Obj)->GetPosition() ); 
   *Result = new mlNode("Position" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// CenterMesh
// ""
// clEntity
// SetCenterMesh
// LStr::ToBool

bool LoadScalarField_clEntity_CenterMesh_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clEntity*>(Obj))->SetCenterMesh(LStr::ToBool( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// CenterMesh
// ""
// clEntity
// GetCenterMesh
// LStr::ToStr_Bool

bool SaveScalarField_clEntity_CenterMesh_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clEntity*>(Obj)->GetCenterMesh() ); 
   *Result = new mlNode("CenterMesh" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass62(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clEntity>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clEntity,Mtd)
   _RM__(EndLoad)
   _RM__(UpdateActor)
   _RM__(GetGeomHandle)
   _RM__(GetParentGeomHandle)
   _RM__(GetParentActor)
   _RM__(GetMeshName)
   _RM__(SetMeshName)
   _RM__(GetMeshHeight)
   _RM__(SetMeshHeight)
   _RM__(GetGeom)
   _RM__(SetGeom)
   _RM__(GetPosition)
   _RM__(SetPosition)
   _RM__(GetTransform)
   _RM__(GetTransformConst)
   _RM__(GetCenterMesh)
   _RM__(SetCenterMesh)
   _RM__(Actor_EnteredWorld)
   _RM__(Actor_LeavedWorld)
   _RM__(Entity_BecomeVisible)
   _RM__(Entity_BecomeInvisible)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(MeshName, clEntity, MeshName)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(MeshHeight, clEntity, MeshHeight)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Position, clEntity, Position)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(CenterMesh, clEntity, CenterMesh)

   StaticClass->SetSuperClassName( "iActor" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Scene/Postprocess/FeedbackScreen.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iPostprocessor
            // Adding abstract: Render
         // Class: clFeedbackScreenPostprocessor
            // Overriding abstract: Render
// SCALAR_PROPERTY_LOAD__FIELD
// UnitHitDuration
// FUnitHitDuration
// clFeedbackScreenPostprocessor
// FUnitHitDuration
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FUnitHitDuration_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FUnitHitDuration=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UnitHitDuration
// FUnitHitDuration
// clFeedbackScreenPostprocessor
// FUnitHitDuration
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FUnitHitDuration_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FUnitHitDuration); 
   *Result = new mlNode("UnitHitDuration" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// UnitHitColor1
// FUnitHitColor1
// clFeedbackScreenPostprocessor
// FUnitHitColor1
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FUnitHitColor1_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FUnitHitColor1=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UnitHitColor1
// FUnitHitColor1
// clFeedbackScreenPostprocessor
// FUnitHitColor1
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FUnitHitColor1_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FUnitHitColor1); 
   *Result = new mlNode("UnitHitColor1" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// UnitHitColor2
// FUnitHitColor2
// clFeedbackScreenPostprocessor
// FUnitHitColor2
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FUnitHitColor2_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FUnitHitColor2=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UnitHitColor2
// FUnitHitColor2
// clFeedbackScreenPostprocessor
// FUnitHitColor2
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FUnitHitColor2_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FUnitHitColor2); 
   *Result = new mlNode("UnitHitColor2" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// UnitHitShrinkCoef
// FUnitHitShrinkCoef
// clFeedbackScreenPostprocessor
// FUnitHitShrinkCoef
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FUnitHitShrinkCoef_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FUnitHitShrinkCoef=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// UnitHitShrinkCoef
// FUnitHitShrinkCoef
// clFeedbackScreenPostprocessor
// FUnitHitShrinkCoef
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FUnitHitShrinkCoef_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FUnitHitShrinkCoef); 
   *Result = new mlNode("UnitHitShrinkCoef" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PowerUpDuration
// FPowerUpDuration
// clFeedbackScreenPostprocessor
// FPowerUpDuration
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FPowerUpDuration_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPowerUpDuration=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PowerUpDuration
// FPowerUpDuration
// clFeedbackScreenPostprocessor
// FPowerUpDuration
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FPowerUpDuration_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPowerUpDuration); 
   *Result = new mlNode("PowerUpDuration" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PowerUpColor1
// FPowerUpColor1
// clFeedbackScreenPostprocessor
// FPowerUpColor1
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FPowerUpColor1_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPowerUpColor1=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PowerUpColor1
// FPowerUpColor1
// clFeedbackScreenPostprocessor
// FPowerUpColor1
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FPowerUpColor1_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPowerUpColor1); 
   *Result = new mlNode("PowerUpColor1" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PowerUpColor2
// FPowerUpColor2
// clFeedbackScreenPostprocessor
// FPowerUpColor2
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FPowerUpColor2_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPowerUpColor2=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PowerUpColor2
// FPowerUpColor2
// clFeedbackScreenPostprocessor
// FPowerUpColor2
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FPowerUpColor2_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPowerUpColor2); 
   *Result = new mlNode("PowerUpColor2" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PowerUpShrinkCoef
// FPowerUpShrinkCoef
// clFeedbackScreenPostprocessor
// FPowerUpShrinkCoef
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FPowerUpShrinkCoef_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPowerUpShrinkCoef=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PowerUpShrinkCoef
// FPowerUpShrinkCoef
// clFeedbackScreenPostprocessor
// FPowerUpShrinkCoef
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FPowerUpShrinkCoef_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPowerUpShrinkCoef); 
   *Result = new mlNode("PowerUpShrinkCoef" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PerkDuration
// FPerkDuration
// clFeedbackScreenPostprocessor
// FPerkDuration
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FPerkDuration_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPerkDuration=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PerkDuration
// FPerkDuration
// clFeedbackScreenPostprocessor
// FPerkDuration
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FPerkDuration_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPerkDuration); 
   *Result = new mlNode("PerkDuration" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PerkColor1
// FPerkColor1
// clFeedbackScreenPostprocessor
// FPerkColor1
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FPerkColor1_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPerkColor1=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PerkColor1
// FPerkColor1
// clFeedbackScreenPostprocessor
// FPerkColor1
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FPerkColor1_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPerkColor1); 
   *Result = new mlNode("PerkColor1" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PerkColor2
// FPerkColor2
// clFeedbackScreenPostprocessor
// FPerkColor2
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FPerkColor2_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPerkColor2=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PerkColor2
// FPerkColor2
// clFeedbackScreenPostprocessor
// FPerkColor2
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FPerkColor2_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPerkColor2); 
   *Result = new mlNode("PerkColor2" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PerkShrinkCoef
// FPerkShrinkCoef
// clFeedbackScreenPostprocessor
// FPerkShrinkCoef
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FPerkShrinkCoef_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FPerkShrinkCoef=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PerkShrinkCoef
// FPerkShrinkCoef
// clFeedbackScreenPostprocessor
// FPerkShrinkCoef
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FPerkShrinkCoef_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FPerkShrinkCoef); 
   *Result = new mlNode("PerkShrinkCoef" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShotDuration
// FShotDuration
// clFeedbackScreenPostprocessor
// FShotDuration
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FShotDuration_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FShotDuration=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShotDuration
// FShotDuration
// clFeedbackScreenPostprocessor
// FShotDuration
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FShotDuration_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FShotDuration); 
   *Result = new mlNode("ShotDuration" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShotColor1
// FShotColor1
// clFeedbackScreenPostprocessor
// FShotColor1
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FShotColor1_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FShotColor1=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShotColor1
// FShotColor1
// clFeedbackScreenPostprocessor
// FShotColor1
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FShotColor1_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FShotColor1); 
   *Result = new mlNode("ShotColor1" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShotColor2
// FShotColor2
// clFeedbackScreenPostprocessor
// FShotColor2
// LStr::StrToVec4

bool LoadScalarField_clFeedbackScreenPostprocessor_FShotColor2_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FShotColor2=LStr::StrToVec4( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShotColor2
// FShotColor2
// clFeedbackScreenPostprocessor
// FShotColor2
// LStr::Vec4ToStr

bool SaveScalarField_clFeedbackScreenPostprocessor_FShotColor2_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec4ToStr(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FShotColor2); 
   *Result = new mlNode("ShotColor2" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShotShrinkCoef
// FShotShrinkCoef
// clFeedbackScreenPostprocessor
// FShotShrinkCoef
// LStr::ToFloat

bool LoadScalarField_clFeedbackScreenPostprocessor_FShotShrinkCoef_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFeedbackScreenPostprocessor*>(Obj))->FShotShrinkCoef=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShotShrinkCoef
// FShotShrinkCoef
// clFeedbackScreenPostprocessor
// FShotShrinkCoef
// LStr::ToStrEpsilon

bool SaveScalarField_clFeedbackScreenPostprocessor_FShotShrinkCoef_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFeedbackScreenPostprocessor*>(Obj)->FShotShrinkCoef); 
   *Result = new mlNode("ShotShrinkCoef" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass63(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFeedbackScreenPostprocessor>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFeedbackScreenPostprocessor,Mtd)
   _RM__(AfterConstruction)
   _RM__(Render)
   _RM__(IsEnabled)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FUnitHitDuration, clFeedbackScreenPostprocessor, UnitHitDuration)

   REGISTER_PROPERTY__SCALAR_FIELD(FUnitHitColor1, clFeedbackScreenPostprocessor, UnitHitColor1)

   REGISTER_PROPERTY__SCALAR_FIELD(FUnitHitColor2, clFeedbackScreenPostprocessor, UnitHitColor2)

   REGISTER_PROPERTY__SCALAR_FIELD(FUnitHitShrinkCoef, clFeedbackScreenPostprocessor, UnitHitShrinkCoef)

   REGISTER_PROPERTY__SCALAR_FIELD(FPowerUpDuration, clFeedbackScreenPostprocessor, PowerUpDuration)

   REGISTER_PROPERTY__SCALAR_FIELD(FPowerUpColor1, clFeedbackScreenPostprocessor, PowerUpColor1)

   REGISTER_PROPERTY__SCALAR_FIELD(FPowerUpColor2, clFeedbackScreenPostprocessor, PowerUpColor2)

   REGISTER_PROPERTY__SCALAR_FIELD(FPowerUpShrinkCoef, clFeedbackScreenPostprocessor, PowerUpShrinkCoef)

   REGISTER_PROPERTY__SCALAR_FIELD(FPerkDuration, clFeedbackScreenPostprocessor, PerkDuration)

   REGISTER_PROPERTY__SCALAR_FIELD(FPerkColor1, clFeedbackScreenPostprocessor, PerkColor1)

   REGISTER_PROPERTY__SCALAR_FIELD(FPerkColor2, clFeedbackScreenPostprocessor, PerkColor2)

   REGISTER_PROPERTY__SCALAR_FIELD(FPerkShrinkCoef, clFeedbackScreenPostprocessor, PerkShrinkCoef)

   REGISTER_PROPERTY__SCALAR_FIELD(FShotDuration, clFeedbackScreenPostprocessor, ShotDuration)

   REGISTER_PROPERTY__SCALAR_FIELD(FShotColor1, clFeedbackScreenPostprocessor, ShotColor1)

   REGISTER_PROPERTY__SCALAR_FIELD(FShotColor2, clFeedbackScreenPostprocessor, ShotColor2)

   REGISTER_PROPERTY__SCALAR_FIELD(FShotShrinkCoef, clFeedbackScreenPostprocessor, ShotShrinkCoef)

   StaticClass->SetSuperClassName( "iPostprocessor" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iCameraPositioner
            // Adding abstract: Update
         // Class: clStdCameraPositioner
            // Overriding abstract: Update
         // Class: clFightingChessPositioner

void RegisterPackageLinderdaumCoreClass64(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFightingChessPositioner>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clFightingChessPositioner,Update )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clStdCameraPositioner" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/VFS/Files.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iIStream
            // Adding abstract: GetVirtualFileName
            // Adding abstract: GetFileName
            // Adding abstract: Seek
            // Adding abstract: SeekOffset
            // Adding abstract: BlockRead
            // Adding abstract: ReadLine
            // Adding abstract: ReadLineLength
            // Adding abstract: ReadLineTrimLeadSpaces
            // Adding abstract: ReadInt_Binary
            // Adding abstract: Eof
            // Adding abstract: GetFileSize
            // Adding abstract: GetFilePos
            // Adding abstract: MapStream
            // Adding abstract: MapStreamFromCurrentPos
         // Class: clFileMapper
            // Overriding abstract: GetVirtualFileName
            // Overriding abstract: GetFileName
            // Overriding abstract: BlockRead
            // Overriding abstract: ReadInt_Binary
            // Overriding abstract: ReadLine
            // Overriding abstract: ReadLineLength
            // Overriding abstract: ReadLineTrimLeadSpaces
            // Overriding abstract: Seek
            // Overriding abstract: SeekOffset
            // Overriding abstract: Eof
            // Overriding abstract: GetFileSize
            // Overriding abstract: GetFilePos
            // Overriding abstract: MapStream
            // Overriding abstract: MapStreamFromCurrentPos

void RegisterPackageLinderdaumCoreClass65(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFileMapper>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFileMapper,Mtd)
   _RM__(SetRawFile)
   _RM__(GetVirtualFileName)
   _RM__(GetFileName)
   _RM__(BlockRead)
   _RM__(ReadInt_Binary)
   _RM__(ReadLine)
   _RM__(ReadLineLength)
   _RM__(ReadLineTrimLeadSpaces)
   _RM__(Seek)
   _RM__(SeekOffset)
   _RM__(Eof)
   _RM__(GetFileSize)
   _RM__(GetFilePos)
   _RM__(MapStream)
   _RM__(MapStreamFromCurrentPos)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iIStream" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Core/VFS/FileSystem.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clFileSystem

void RegisterPackageLinderdaumCoreClass66(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFileSystem>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFileSystem,Mtd)
   _RM__(AfterConstruction)
   _RM__(CreateFileReader)
   _RM__(CreateFileWriter)
   _RM__(CreateFileReaderFromString)
   _RM__(CreateFileReaderFromMemory)
   _RM__(CreateLogFileWriter)
   _RM__(CreateMemFileWriter)
   _RM__(CreateDirsPhys)
   _RM__(DeleteFilePhys)
   _RM__(CreateTempFileName)
   _RM__(CreateDirs)
   _RM__(Mount)
   _RM__(Unmount)
   _RM__(AddAliasMountPoint)
   _RM__(AddMountPoint)
   _RM__(RemoveMountPoint)
   _RM__(GetNumMountPoints)
   _RM__(GetMountPoint)
   _RM__(FindMountPointByName)
   _RM__(SetRootDir)
   _RM__(VirtualNameToPhysical)
   _RM__(VirtualNameToPhysicalFull)
   _RM__(FileExistsPhys)
   _RM__(FileExists)
   _RM__(FileExistsInResource)
   _RM__(FileExistsAndNewer)
   _RM__(IsFullPath)
   _RM__(GetFullPath)
   _RM__(GetFileTime)
   _RM__(GetMaxTimeForDirectory)
   _RM__(DownloadFile)
   _RM__(CancelDownload)
   _RM__(StartWebServer)
   _RM__(GetDownloadThread)
   _RM__(LoadFileAsBlob)
   _RM__(SaveBlobToFile)
   _RM__(CRC32)
   _RM__(CRC32ForBlob)
   _RM__(LoadXLMLFromStream_ASE)
   _RM__(LoadXLML_ASE)
   _RM__(LoadXLMLFromStream)
   _RM__(LoadXLML)
   _RM__(LoadXMLFromStream)
   _RM__(LoadXML)
   _RM__(SaveXLML)
   _RM__(SaveXLMLToStream)
   _RM__(SaveXLMLToLog)
   _RM__(SaveXMLToLog)
   _RM__(SaveXML)
   _RM__(SaveXMLToStream)
   _RM__(EnumerateFiles)
   _RM__(EnumerateDirs)
   _RM__(FindFile)
   _RM__(ValidatePath)
   _RM__(CreatePhysicalFileReader)
   _RM__(CreateFileMapperForRawFile)
   _RM__(CompareFiles)
   _RM__(SetUseVirtualFileNames)
   _RM__(GetUseVirtualFileNames)
   _RM__(Enumerate)
   _RM__(AddFileWatch)
   _RM__(AddMultipleFileWatches)
   _RM__(StartDirectoryWatch)
   _RM__(AddDirWatch)
   _RM__(RemoveFileWatch)
   _RM__(RemoveDirWatch)
   _RM__(OpenURL)
   _RM__(SetWallpaper)
   _RM__(OpenImageDialog)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clFileWatchHandle

void RegisterPackageLinderdaumCoreClass67(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFileWatchHandle>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iOStream
            // Adding abstract: GetFileName
            // Adding abstract: Seek
            // Adding abstract: GetFilePos
            // Adding abstract: BlockWrite
         // Class: clFileWriter
            // Overriding abstract: GetFileName
            // Overriding abstract: Seek
            // Overriding abstract: GetFilePos
            // Overriding abstract: BlockWrite

void RegisterPackageLinderdaumCoreClass68(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFileWriter>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFileWriter,Mtd)
   _RM__(Open)
   _RM__(Close)
   _RM__(GetFileName)
   _RM__(Seek)
   _RM__(GetFilePos)
   _RM__(BlockWrite)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iOStream" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clFilterPostprocessor_Tunneller.h"

#include "Linderdaum/Scene/Postprocess/Filter.h"

void RegisterPackageLinderdaumCoreClass69(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clFilterPostprocessor_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFilterPostprocessor,Mtd)
   _RM__(AfterConstruction)
   _RM__(Render)
   _RM__(SetFilterName)
   _RM__(GetFilterName)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iPostprocessor" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iPostprocessor
            // Adding abstract: Render
         // Class: clFilterPostprocessor
            // Overriding abstract: Render
// SCALAR_PROPERTY_LOAD__SETTER
// FilterName
// ""
// clFilterPostprocessor
// SetFilterName
// EMPTY_CONVERTER

bool LoadScalarField_clFilterPostprocessor_FilterName_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFilterPostprocessor*>(Obj))->SetFilterName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// FilterName
// ""
// clFilterPostprocessor
// GetFilterName
// EMPTY_CONVERTER

bool SaveScalarField_clFilterPostprocessor_FilterName_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clFilterPostprocessor*>(Obj)->GetFilterName() ); 
   *Result = new mlNode("FilterName" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass70(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFilterPostprocessor>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFilterPostprocessor,Mtd)
   _RM__(AfterConstruction)
   _RM__(Render)
   _RM__(SetFilterName)
   _RM__(GetFilterName)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(FilterName, clFilterPostprocessor, FilterName)

   StaticClass->SetSuperClassName( "iPostprocessor" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/iValidators.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clValidator
         // Class: clFilterValidator

void RegisterPackageLinderdaumCoreClass71(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFilterValidator>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clFilterValidator,IsValid )
   REG_CLS_MTD( clFilterValidator,SetValidChars )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clValidator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iFontProperties
            // Adding abstract: IsFixedFont
         // Class: clFixedFontProperties
            // Overriding abstract: IsFixedFont
// SCALAR_PROPERTY_LOAD__FIELD
// GlyphSizeX
// FGlyphSizeX
// clFixedFontProperties
// FGlyphSizeX
// LStr::ToFloat

bool LoadScalarField_clFixedFontProperties_FGlyphSizeX_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFixedFontProperties*>(Obj))->FGlyphSizeX=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// GlyphSizeX
// FGlyphSizeX
// clFixedFontProperties
// FGlyphSizeX
// LStr::ToStrEpsilon

bool SaveScalarField_clFixedFontProperties_FGlyphSizeX_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFixedFontProperties*>(Obj)->FGlyphSizeX); 
   *Result = new mlNode("GlyphSizeX" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// GlyphSizeY
// FGlyphSizeY
// clFixedFontProperties
// FGlyphSizeY
// LStr::ToFloat

bool LoadScalarField_clFixedFontProperties_FGlyphSizeY_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFixedFontProperties*>(Obj))->FGlyphSizeY=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// GlyphSizeY
// FGlyphSizeY
// clFixedFontProperties
// FGlyphSizeY
// LStr::ToStrEpsilon

bool SaveScalarField_clFixedFontProperties_FGlyphSizeY_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFixedFontProperties*>(Obj)->FGlyphSizeY); 
   *Result = new mlNode("GlyphSizeY" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// FontWidth
// FFontWidth
// clFixedFontProperties
// FFontWidth
// LStr::ToFloat

bool LoadScalarField_clFixedFontProperties_FFontWidth_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFixedFontProperties*>(Obj))->FFontWidth=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// FontWidth
// FFontWidth
// clFixedFontProperties
// FFontWidth
// LStr::ToStrEpsilon

bool SaveScalarField_clFixedFontProperties_FFontWidth_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFixedFontProperties*>(Obj)->FFontWidth); 
   *Result = new mlNode("FontWidth" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// FontHeight
// FFontHeight
// clFixedFontProperties
// FFontHeight
// LStr::ToFloat

bool LoadScalarField_clFixedFontProperties_FFontHeight_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFixedFontProperties*>(Obj))->FFontHeight=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// FontHeight
// FFontHeight
// clFixedFontProperties
// FFontHeight
// LStr::ToStrEpsilon

bool SaveScalarField_clFixedFontProperties_FFontHeight_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFixedFontProperties*>(Obj)->FFontHeight); 
   *Result = new mlNode("FontHeight" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ShaderName
// FFontShaderName
// clFixedFontProperties
// FFontShaderName
// EMPTY_CONVERTER

bool LoadScalarField_clFixedFontProperties_FFontShaderName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFixedFontProperties*>(Obj))->FFontShaderName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ShaderName
// FFontShaderName
// clFixedFontProperties
// FFontShaderName
// EMPTY_CONVERTER

bool SaveScalarField_clFixedFontProperties_FFontShaderName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clFixedFontProperties*>(Obj)->FFontShaderName); 
   *Result = new mlNode("ShaderName" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass72(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFixedFontProperties>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFixedFontProperties,Mtd)
   _RM__(AfterConstruction)
   _RM__(EndLoad)
   _RM__(IsFixedFont)
   _RM__(GetFontShader)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FGlyphSizeX, clFixedFontProperties, GlyphSizeX)

   REGISTER_PROPERTY__SCALAR_FIELD(FGlyphSizeY, clFixedFontProperties, GlyphSizeY)

   REGISTER_PROPERTY__SCALAR_FIELD(FFontWidth, clFixedFontProperties, FontWidth)

   REGISTER_PROPERTY__SCALAR_FIELD(FFontHeight, clFixedFontProperties, FontHeight)

   REGISTER_PROPERTY__SCALAR_FIELD(FFontShaderName, clFixedFontProperties, ShaderName)

   StaticClass->SetSuperClassName( "iFontProperties" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clFlingHandler_Tunneller.h"

#include "Linderdaum/Input/Gestures.h"

void RegisterPackageLinderdaumCoreClass73(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clFlingHandler_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFlingHandler,Mtd)
   _RM__(AfterConstruction)
   _RM__(Reset)
   _RM__(SetIncrementalRotationMode)
   _RM__(SetStrokeMode)
   _RM__(SetValue)
   _RM__(GetValue)
   _RM__(SetActive)
   _RM__(IsActive)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGestureHandler" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGestureHandler
         // Class: clFlingHandler
// SCALAR_PROPERTY_LOAD__FIELD
// Granularity
// FValueGranularity
// clFlingHandler
// FValueGranularity
// LStr::StrToVec2

bool LoadScalarField_clFlingHandler_FValueGranularity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->FValueGranularity=LStr::StrToVec2( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Granularity
// FValueGranularity
// clFlingHandler
// FValueGranularity
// LStr::Vec2ToStr

bool SaveScalarField_clFlingHandler_FValueGranularity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec2ToStr(dynamic_cast<clFlingHandler*>(Obj)->FValueGranularity); 
   *Result = new mlNode("Granularity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Period
// FValuePeriod
// clFlingHandler
// FValuePeriod
// LStr::StrToVec2

bool LoadScalarField_clFlingHandler_FValuePeriod_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->FValuePeriod=LStr::StrToVec2( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Period
// FValuePeriod
// clFlingHandler
// FValuePeriod
// LStr::Vec2ToStr

bool SaveScalarField_clFlingHandler_FValuePeriod_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec2ToStr(dynamic_cast<clFlingHandler*>(Obj)->FValuePeriod); 
   *Result = new mlNode("Period" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MinValue
// FMinValue
// clFlingHandler
// FMinValue
// LStr::StrToVec2

bool LoadScalarField_clFlingHandler_FMinValue_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->FMinValue=LStr::StrToVec2( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MinValue
// FMinValue
// clFlingHandler
// FMinValue
// LStr::Vec2ToStr

bool SaveScalarField_clFlingHandler_FMinValue_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec2ToStr(dynamic_cast<clFlingHandler*>(Obj)->FMinValue); 
   *Result = new mlNode("MinValue" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// MaxValue
// FMaxValue
// clFlingHandler
// FMaxValue
// LStr::StrToVec2

bool LoadScalarField_clFlingHandler_FMaxValue_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->FMaxValue=LStr::StrToVec2( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// MaxValue
// FMaxValue
// clFlingHandler
// FMaxValue
// LStr::Vec2ToStr

bool SaveScalarField_clFlingHandler_FMaxValue_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec2ToStr(dynamic_cast<clFlingHandler*>(Obj)->FMaxValue); 
   *Result = new mlNode("MaxValue" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Step
// FStep
// clFlingHandler
// FStep
// LStr::StrToVec2

bool LoadScalarField_clFlingHandler_FStep_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->FStep=LStr::StrToVec2( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Step
// FStep
// clFlingHandler
// FStep
// LStr::Vec2ToStr

bool SaveScalarField_clFlingHandler_FStep_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec2ToStr(dynamic_cast<clFlingHandler*>(Obj)->FStep); 
   *Result = new mlNode("Step" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Sensitivity
// FSensitivity
// clFlingHandler
// FSensitivity
// LStr::StrToVec2

bool LoadScalarField_clFlingHandler_FSensitivity_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->FSensitivity=LStr::StrToVec2( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Sensitivity
// FSensitivity
// clFlingHandler
// FSensitivity
// LStr::Vec2ToStr

bool SaveScalarField_clFlingHandler_FSensitivity_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::Vec2ToStr(dynamic_cast<clFlingHandler*>(Obj)->FSensitivity); 
   *Result = new mlNode("Sensitivity" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Active
// ""
// clFlingHandler
// SetActive
// LStr::ToBool

bool LoadScalarField_clFlingHandler_Active_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlingHandler*>(Obj))->SetActive(LStr::ToBool( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Active
// ""
// clFlingHandler
// IsActive
// LStr::ToStr_Bool

bool SaveScalarField_clFlingHandler_Active_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =LStr::ToStr_Bool(dynamic_cast<clFlingHandler*>(Obj)->IsActive() ); 
   *Result = new mlNode("Active" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass74(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFlingHandler>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFlingHandler,Mtd)
   _RM__(AfterConstruction)
   _RM__(Reset)
   _RM__(SetIncrementalRotationMode)
   _RM__(SetStrokeMode)
   _RM__(SetValue)
   _RM__(GetValue)
   _RM__(SetActive)
   _RM__(IsActive)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FValueGranularity, clFlingHandler, Granularity)

   REGISTER_PROPERTY__SCALAR_FIELD(FValuePeriod, clFlingHandler, Period)

   REGISTER_PROPERTY__SCALAR_FIELD(FMinValue, clFlingHandler, MinValue)

   REGISTER_PROPERTY__SCALAR_FIELD(FMaxValue, clFlingHandler, MaxValue)

   REGISTER_PROPERTY__SCALAR_FIELD(FStep, clFlingHandler, Step)

   REGISTER_PROPERTY__SCALAR_FIELD(FSensitivity, clFlingHandler, Sensitivity)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Active, clFlingHandler, Active)

   StaticClass->SetSuperClassName( "clGestureHandler" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "clFlingHandler2_Tunneller.h"

#include "Linderdaum/Input/Gestures2.h"

void RegisterPackageLinderdaumCoreClass75(sEnvironment* Env)
{
#if !defined(_DISABLE_TUNNELLERS_)
   iStaticClass* StaticClass = new clNativeStaticClass<clFlingHandler2_Tunneller>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGestureHandler" );

   Env->Linker->RegisterStaticClass( StaticClass );
#endif // _DISABLE_TUNNELLERS_
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGestureHandler
         // Class: clFlingHandler2

void RegisterPackageLinderdaumCoreClass76(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFlingHandler2>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGestureHandler" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clValidator
         // Class: clFloatValidator
         // Class: clFloatRangeValidator

void RegisterPackageLinderdaumCoreClass77(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass2<clFloatRangeValidator, float, float>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clFloatRangeValidator,IsValid )
   REG_CLS_MTD( clFloatRangeValidator,SetRange )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clFloatValidator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clValidator
         // Class: clFloatValidator

void RegisterPackageLinderdaumCoreClass78(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFloatValidator>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clFloatValidator,IsValid )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clValidator" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/FlowUI.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clFlowSelectRenderer

void RegisterPackageLinderdaumCoreClass79(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFlowSelectRenderer>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFlowSelectRenderer,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetTransforms)
   _RM__(SetImages)
   _RM__(GetNumImages)
   _RM__(RenderDirect)
   _RM__(IsSelected)
   _RM__(SetSelected)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Input/FlowSelector.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clFlowSelector
// SCALAR_PROPERTY_LOAD__FIELD
// NumPoints
// FNumPoints
// clFlowSelector
// FNumPoints
// LStr::ToInt

bool LoadScalarField_clFlowSelector_FNumPoints_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FNumPoints=LStr::ToInt( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// NumPoints
// FNumPoints
// clFlowSelector
// FNumPoints
// LStr::ToStr

bool SaveScalarField_clFlowSelector_FNumPoints_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr(dynamic_cast<clFlowSelector*>(Obj)->FNumPoints); 
   *Result = new mlNode("NumPoints" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ImageHeight
// FHeight
// clFlowSelector
// FHeight
// LStr::ToFloat

bool LoadScalarField_clFlowSelector_FHeight_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FHeight=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ImageHeight
// FHeight
// clFlowSelector
// FHeight
// LStr::ToStrEpsilon

bool SaveScalarField_clFlowSelector_FHeight_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFlowSelector*>(Obj)->FHeight); 
   *Result = new mlNode("ImageHeight" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Elevation
// FElevation
// clFlowSelector
// FElevation
// LStr::ToFloat

bool LoadScalarField_clFlowSelector_FElevation_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FElevation=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Elevation
// FElevation
// clFlowSelector
// FElevation
// LStr::ToStrEpsilon

bool SaveScalarField_clFlowSelector_FElevation_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFlowSelector*>(Obj)->FElevation); 
   *Result = new mlNode("Elevation" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Slope
// FSlope
// clFlowSelector
// FSlope
// LStr::ToFloat

bool LoadScalarField_clFlowSelector_FSlope_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FSlope=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Slope
// FSlope
// clFlowSelector
// FSlope
// LStr::ToStrEpsilon

bool SaveScalarField_clFlowSelector_FSlope_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFlowSelector*>(Obj)->FSlope); 
   *Result = new mlNode("Slope" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// PeakOffset
// FPeakOffset
// clFlowSelector
// FPeakOffset
// LStr::ToFloat

bool LoadScalarField_clFlowSelector_FPeakOffset_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FPeakOffset=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// PeakOffset
// FPeakOffset
// clFlowSelector
// FPeakOffset
// LStr::ToStrEpsilon

bool SaveScalarField_clFlowSelector_FPeakOffset_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFlowSelector*>(Obj)->FPeakOffset); 
   *Result = new mlNode("PeakOffset" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ElevationAmplitude
// FFlowMult
// clFlowSelector
// FFlowMult
// LStr::ToFloat

bool LoadScalarField_clFlowSelector_FFlowMult_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FFlowMult=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ElevationAmplitude
// FFlowMult
// clFlowSelector
// FFlowMult
// LStr::ToStrEpsilon

bool SaveScalarField_clFlowSelector_FFlowMult_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFlowSelector*>(Obj)->FFlowMult); 
   *Result = new mlNode("ElevationAmplitude" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// ElevationSlope
// FFlowExp
// clFlowSelector
// FFlowExp
// LStr::ToFloat

bool LoadScalarField_clFlowSelector_FFlowExp_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFlowSelector*>(Obj))->FFlowExp=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ElevationSlope
// FFlowExp
// clFlowSelector
// FFlowExp
// LStr::ToStrEpsilon

bool SaveScalarField_clFlowSelector_FFlowExp_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFlowSelector*>(Obj)->FFlowExp); 
   *Result = new mlNode("ElevationSlope" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass80(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFlowSelector>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clFlowSelector,QuadCoords )
   REG_CLS_MTD( clFlowSelector,RebuildCurves )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FNumPoints, clFlowSelector, NumPoints)

   REGISTER_PROPERTY__SCALAR_FIELD(FHeight, clFlowSelector, ImageHeight)

   REGISTER_PROPERTY__SCALAR_FIELD(FElevation, clFlowSelector, Elevation)

   REGISTER_PROPERTY__SCALAR_FIELD(FSlope, clFlowSelector, Slope)

   REGISTER_PROPERTY__SCALAR_FIELD(FPeakOffset, clFlowSelector, PeakOffset)

   REGISTER_PROPERTY__SCALAR_FIELD(FFlowMult, clFlowSelector, ElevationAmplitude)

   REGISTER_PROPERTY__SCALAR_FIELD(FFlowExp, clFlowSelector, ElevationSlope)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clFlowUI

void RegisterPackageLinderdaumCoreClass81(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFlowUI>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFlowUI,Mtd)
   _RM__(AfterConstruction)
   _RM__(Render)
   _RM__(IsSelected)
   _RM__(SetSelected)
   _RM__(GetNumImages)
   _RM__(GetCurrentImage)
   _RM__(SetCurrentImage)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Images/TextRenderer.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clFontFace
// SCALAR_PROPERTY_LOAD__FIELD
// FileName
// FFileName
// clFontFace
// FFileName
// EMPTY_CONVERTER

bool LoadScalarField_clFontFace_FFileName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFontFace*>(Obj))->FFileName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// FileName
// FFileName
// clFontFace
// FFileName
// EMPTY_CONVERTER

bool SaveScalarField_clFontFace_FFileName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clFontFace*>(Obj)->FFileName); 
   *Result = new mlNode("FileName" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Family
// FFamily
// clFontFace
// FFamily
// EMPTY_CONVERTER

bool LoadScalarField_clFontFace_FFamily_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFontFace*>(Obj))->FFamily=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Family
// FFamily
// clFontFace
// FFamily
// EMPTY_CONVERTER

bool SaveScalarField_clFontFace_FFamily_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clFontFace*>(Obj)->FFamily); 
   *Result = new mlNode("Family" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Style
// FStyle
// clFontFace
// FStyle
// LStr::ToInt

bool LoadScalarField_clFontFace_FStyle_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFontFace*>(Obj))->FStyle=LStr::ToInt( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Style
// FStyle
// clFontFace
// FStyle
// LStr::ToStr

bool SaveScalarField_clFontFace_FStyle_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStr(dynamic_cast<clFontFace*>(Obj)->FStyle); 
   *Result = new mlNode("Style" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass82(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFontFace>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FFileName, clFontFace, FileName)

   REGISTER_PROPERTY__SCALAR_FIELD(FFamily, clFontFace, Family)

   REGISTER_PROPERTY__SCALAR_FIELD(FStyle, clFontFace, Style)

   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iFontProperties
            // Adding abstract: IsFixedFont
         // Class: clFreeTypeFontProperties
            // Overriding abstract: IsFixedFont
// SCALAR_PROPERTY_LOAD__FIELD
// Size
// FFontSize
// clFreeTypeFontProperties
// FFontSize
// LStr::ToFloat

bool LoadScalarField_clFreeTypeFontProperties_FFontSize_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFreeTypeFontProperties*>(Obj))->FFontSize=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Size
// FFontSize
// clFreeTypeFontProperties
// FFontSize
// LStr::ToStrEpsilon

bool SaveScalarField_clFreeTypeFontProperties_FFontSize_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clFreeTypeFontProperties*>(Obj)->FFontSize); 
   *Result = new mlNode("Size" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// Name
// FFontName
// clFreeTypeFontProperties
// FFontName
// EMPTY_CONVERTER

bool LoadScalarField_clFreeTypeFontProperties_FFontName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFreeTypeFontProperties*>(Obj))->FFontName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// Name
// FFontName
// clFreeTypeFontProperties
// FFontName
// EMPTY_CONVERTER

bool SaveScalarField_clFreeTypeFontProperties_FFontName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clFreeTypeFontProperties*>(Obj)->FFontName); 
   *Result = new mlNode("Name" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// Alignment
// ""
// clFreeTypeFontProperties
// SetAlignment
// EMPTY_CONVERTER

bool LoadScalarField_clFreeTypeFontProperties_Alignment_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clFreeTypeFontProperties*>(Obj))->SetAlignment(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// Alignment
// ""
// clFreeTypeFontProperties
// GetAlignment
// EMPTY_CONVERTER

bool SaveScalarField_clFreeTypeFontProperties_Alignment_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clFreeTypeFontProperties*>(Obj)->GetAlignment() ); 
   *Result = new mlNode("Alignment" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass83(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clFreeTypeFontProperties>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clFreeTypeFontProperties,Mtd)
   _RM__(AfterConstruction)
   _RM__(EndLoad)
   _RM__(IsFixedFont)
   _RM__(GetAlignment)
   _RM__(SetAlignment)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FFontSize, clFreeTypeFontProperties, Size)

   REGISTER_PROPERTY__SCALAR_FIELD(FFontName, clFreeTypeFontProperties, Name)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(Alignment, clFreeTypeFontProperties, Alignment)

   StaticClass->SetSuperClassName( "iFontProperties" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLBuffer.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGPUBuffer
            // Adding abstract: CreateBuffer
            // Adding abstract: ReadBuffer
            // Adding abstract: BufferData
            // Adding abstract: BufferSubData
         // Class: clGLAPIContainer
         // Class: clGLBuffer
            // Overriding abstract: CreateBuffer
            // Overriding abstract: ReadBuffer
            // Overriding abstract: BufferData
            // Overriding abstract: BufferSubData

void RegisterPackageLinderdaumCoreClass84(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLBuffer>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLBuffer,Mtd)
   _RM__(AfterConstruction)
   _RM__(CreateBuffer)
   _RM__(ReadBuffer)
   _RM__(BufferData)
   _RM__(BufferSubData)
   _RM__(BindAsUniformBuffer)
   _RM__(GetBufferID)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGPUBuffer" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLDebug.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: clGLAPIContainer
         // Class: clGLDebugger

void RegisterPackageLinderdaumCoreClass85(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLDebugger>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLDebugger,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetEnable)
   _RM__(DebugMessageCallback)
   _RM__(ProcessLog)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iObject" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLFrameBuffer.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iRenderTarget
            // Adding abstract: InitRenderTarget
            // Adding abstract: InitRenderTargetV
            // Adding abstract: GetColorTexture
            // Adding abstract: GetDepthTexture
            // Adding abstract: Bind
            // Adding abstract: BindReadFrom
            // Adding abstract: UnBind
            // Adding abstract: GetViewport
            // Adding abstract: UpdateWithProgram
            // Adding abstract: UpdateWithRenderState
         // Class: clGLAPIContainer
         // Class: clGLFrameBuffer
            // Overriding abstract: InitRenderTarget
            // Overriding abstract: InitRenderTargetV
            // Overriding abstract: GetColorTexture
            // Overriding abstract: GetDepthTexture
            // Overriding abstract: Bind
            // Overriding abstract: BindReadFrom
            // Overriding abstract: UnBind
            // Overriding abstract: GetViewport
            // Overriding abstract: UpdateWithProgram
            // Overriding abstract: UpdateWithRenderState

void RegisterPackageLinderdaumCoreClass86(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLFrameBuffer>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLFrameBuffer,Mtd)
   _RM__(AfterConstruction)
   _RM__(InitRenderTarget)
   _RM__(InitRenderTargetV)
   _RM__(GetColorTexture)
   _RM__(GetDepthTexture)
   _RM__(Bind)
   _RM__(BindReadFrom)
   _RM__(UnBind)
   _RM__(GetViewport)
   _RM__(UpdateWithProgram)
   _RM__(UpdateWithRenderState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iRenderTarget" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLQuery.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iQuery
            // Adding abstract: BeginQuery
            // Adding abstract: EndQuery
            // Adding abstract: GetQuery
            // Adding abstract: IsAvailable
         // Class: clGLAPIContainer
         // Class: clGLQuery
            // Overriding abstract: BeginQuery
            // Overriding abstract: EndQuery
            // Overriding abstract: GetQuery
            // Overriding abstract: IsAvailable

void RegisterPackageLinderdaumCoreClass87(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLQuery>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLQuery,Mtd)
   _RM__(AfterConstruction)
   _RM__(BeginQuery)
   _RM__(EndQuery)
   _RM__(GetQuery)
   _RM__(IsAvailable)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iQuery" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLRenderContext.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iRenderContext
            // Adding abstract: GetPixel
            // Adding abstract: SetViewport
            // Adding abstract: SetViewportV
            // Adding abstract: RestoreViewport
            // Adding abstract: SetClearColor4v
            // Adding abstract: GetScreenshotSize
            // Adding abstract: GetScreenshot
            // Adding abstract: GetVideoSystemInfo
            // Adding abstract: GetTotalVideoMemory
            // Adding abstract: GetFreeVideoMemory
            // Adding abstract: CheckError
            // Adding abstract: ClearRenderTarget
            // Adding abstract: SetPolygonFillMode
            // Adding abstract: Finish
            // Adding abstract: SetState
            // Adding abstract: UpdateState
         // Class: clGLAPIContainer
         // Class: clGLRenderContext
            // Overriding abstract: CheckError
            // Overriding abstract: GetPixel
            // Overriding abstract: SetViewport
            // Overriding abstract: SetViewportV
            // Overriding abstract: RestoreViewport
            // Overriding abstract: SetClearColor4v
            // Overriding abstract: GetScreenshotSize
            // Overriding abstract: GetScreenshot
            // Overriding abstract: GetVideoSystemInfo
            // Overriding abstract: GetTotalVideoMemory
            // Overriding abstract: GetFreeVideoMemory
            // Overriding abstract: ClearRenderTarget
            // Overriding abstract: SetPolygonFillMode
            // Overriding abstract: Finish
            // Overriding abstract: SetState
            // Overriding abstract: UpdateState

void RegisterPackageLinderdaumCoreClass88(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLRenderContext>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLRenderContext,Mtd)
   _RM__(AfterConstruction)
   _RM__(InitContext)
   _RM__(EndFrame)
   _RM__(CheckError)
   _RM__(GetPixel)
   _RM__(SetViewport)
   _RM__(SetViewportV)
   _RM__(RestoreViewport)
   _RM__(SetClearColor4v)
   _RM__(GetScreenshotSize)
   _RM__(GetScreenshot)
   _RM__(GetVideoSystemInfo)
   _RM__(GetTotalVideoMemory)
   _RM__(GetFreeVideoMemory)
   _RM__(GuardExtension)
   _RM__(ClearRenderTarget)
   _RM__(SetPolygonFillMode)
   _RM__(Finish)
   _RM__(SetState)
   _RM__(UpdateState)
   _RM__(CreateTexture)
   _RM__(GetLGLAPI)
   _RM__(SetActiveTextureUnit)
   _RM__(SetActiveVBO)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iRenderContext" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLSL.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iResource
            // Adding abstract: GetCachingDir
         // Class: iShaderProgram
            // Overriding abstract: GetCachingDir
            // Adding abstract: Bind
            // Adding abstract: UnBind
            // Adding abstract: BindUniforms
            // Adding abstract: CreateUniform
            // Adding abstract: SetUniformInt
            // Adding abstract: SetUniformIntArray
            // Adding abstract: SetUniformFloat
            // Adding abstract: SetUniformFloatArray
            // Adding abstract: SetUniformVec3Array
            // Adding abstract: SetUniformVec4Array
            // Adding abstract: SetUniformMat3Array
            // Adding abstract: SetUniformMat4Array
            // Adding abstract: SetUniformNameInt
            // Adding abstract: SetUniformNameIntArray
            // Adding abstract: SetUniformNameFloat
            // Adding abstract: SetUniformNameFloatArray
            // Adding abstract: SetUniformNameVec3Array
            // Adding abstract: SetUniformNameVec4Array
            // Adding abstract: SetUniformNameMat3Array
            // Adding abstract: SetUniformNameMat4Array
            // Adding abstract: SetTransformationUniforms
            // Adding abstract: SetMaterialUniforms
            // Adding abstract: SetGUIUniforms
            // Adding abstract: SetSceneUniformsPerRigid
            // Adding abstract: SetLightUniformsPerShader
            // Adding abstract: SetSceneUniformsPerShader
            // Adding abstract: SetFragDataLocationName
            // Adding abstract: SetAttribLocationName
            // Adding abstract: BindConsoleVariableType
            // Adding abstract: SetInputPrimitiveType
            // Adding abstract: SetOutputPrimitiveType
            // Adding abstract: SetOutputVerticesCount
            // Adding abstract: SetDefinesList
            // Adding abstract: GetDefinesList
         // Class: clGLAPIContainer
         // Class: clGLSLShaderProgram
            // Overriding abstract: Bind
            // Overriding abstract: UnBind
            // Overriding abstract: BindUniforms
            // Overriding abstract: CreateUniform
            // Overriding abstract: SetUniformInt
            // Overriding abstract: SetUniformIntArray
            // Overriding abstract: SetUniformFloat
            // Overriding abstract: SetUniformFloatArray
            // Overriding abstract: SetUniformVec3Array
            // Overriding abstract: SetUniformVec4Array
            // Overriding abstract: SetUniformMat3Array
            // Overriding abstract: SetUniformMat4Array
            // Overriding abstract: SetUniformNameInt
            // Overriding abstract: SetUniformNameIntArray
            // Overriding abstract: SetUniformNameFloat
            // Overriding abstract: SetUniformNameFloatArray
            // Overriding abstract: SetUniformNameVec3Array
            // Overriding abstract: SetUniformNameVec4Array
            // Overriding abstract: SetUniformNameMat3Array
            // Overriding abstract: SetUniformNameMat4Array
            // Overriding abstract: SetTransformationUniforms
            // Overriding abstract: SetMaterialUniforms
            // Overriding abstract: SetGUIUniforms
            // Overriding abstract: SetSceneUniformsPerRigid
            // Overriding abstract: SetLightUniformsPerShader
            // Overriding abstract: SetSceneUniformsPerShader
            // Overriding abstract: BindConsoleVariableType
            // Overriding abstract: SetFragDataLocationName
            // Overriding abstract: SetAttribLocationName
            // Overriding abstract: SetInputPrimitiveType
            // Overriding abstract: SetOutputPrimitiveType
            // Overriding abstract: SetOutputVerticesCount
            // Overriding abstract: SetDefinesList
            // Overriding abstract: GetDefinesList

void RegisterPackageLinderdaumCoreClass89(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLSLShaderProgram>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLSLShaderProgram,Mtd)
   _RM__(AfterConstruction)
   _RM__(IsSameResource)
   _RM__(GetCachingDir)
   _RM__(GetCachedFileName)
   _RM__(CacheTo)
   _RM__(CacheFrom)
   _RM__(RelinkShaderProgram)
   _RM__(Bind)
   _RM__(UnBind)
   _RM__(BindUniforms)
   _RM__(CreateUniform)
   _RM__(SetUniformInt)
   _RM__(SetUniformIntArray)
   _RM__(SetUniformFloat)
   _RM__(SetUniformFloatArray)
   _RM__(SetUniformVec3Array)
   _RM__(SetUniformVec4Array)
   _RM__(SetUniformMat3Array)
   _RM__(SetUniformMat4Array)
   _RM__(SetUniformNameInt)
   _RM__(SetUniformNameIntArray)
   _RM__(SetUniformNameFloat)
   _RM__(SetUniformNameFloatArray)
   _RM__(SetUniformNameVec3Array)
   _RM__(SetUniformNameVec4Array)
   _RM__(SetUniformNameMat3Array)
   _RM__(SetUniformNameMat4Array)
   _RM__(SetTransformationUniforms)
   _RM__(SetMaterialUniforms)
   _RM__(SetGUIUniforms)
   _RM__(SetSceneUniformsPerRigid)
   _RM__(SetLightUniformsPerShader)
   _RM__(SetSceneUniformsPerShader)
   _RM__(BindConsoleVariableType)
   _RM__(SetFragDataLocationName)
   _RM__(SetAttribLocationName)
   _RM__(GetActiveAttribStreams)
   _RM__(SetInputPrimitiveType)
   _RM__(SetOutputPrimitiveType)
   _RM__(SetOutputVerticesCount)
   _RM__(IsTesselationEnabled)
   _RM__(SetDefinesList)
   _RM__(GetDefinesList)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iShaderProgram" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLTexture.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iTexture
            // Adding abstract: Bind
            // Adding abstract: SaveToBitmap
            // Adding abstract: LoadFromBitmap
            // Adding abstract: UpdateSubImageFromBitmap
            // Adding abstract: GetBitmapFormat
            // Adding abstract: SetMipMapping
            // Adding abstract: SetClamping
            // Adding abstract: UpdateMipmaps
            // Adding abstract: SetFormat
            // Adding abstract: AttachToCurrentFB
            // Adding abstract: CommitChanges
         // Class: clGLAPIContainer
         // Class: clGLTexture
            // Overriding abstract: Bind
            // Overriding abstract: SaveToBitmap
            // Overriding abstract: LoadFromBitmap
            // Overriding abstract: UpdateSubImageFromBitmap
            // Overriding abstract: GetBitmapFormat
            // Overriding abstract: SetMipMapping
            // Overriding abstract: SetClamping
            // Overriding abstract: UpdateMipmaps
            // Overriding abstract: SetFormat
            // Overriding abstract: AttachToCurrentFB
            // Overriding abstract: CommitChanges

void RegisterPackageLinderdaumCoreClass90(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLTexture>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLTexture,Mtd)
   _RM__(AfterConstruction)
   _RM__(Bind)
   _RM__(SaveToBitmap)
   _RM__(LoadFromBitmap)
   _RM__(UpdateFromBitmap)
   _RM__(UpdateSubImageFromBitmap)
   _RM__(GetBitmapFormat)
   _RM__(SetImage)
   _RM__(SetMipMapping)
   _RM__(SetClamping)
   _RM__(UpdateMipmaps)
   _RM__(SetFormat)
   _RM__(AttachToCurrentFB)
   _RM__(CommitChanges)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iTexture" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Renderer/GL/GLVertexArray.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iVertexArray
            // Adding abstract: FeedIntoGPU
            // Adding abstract: FeedIntoGPUInstanced
            // Adding abstract: CommitChanges
         // Class: clGLAPIContainer
         // Class: clGLVertexArray
            // Overriding abstract: FeedIntoGPU
            // Overriding abstract: FeedIntoGPUInstanced
            // Overriding abstract: CommitChanges

void RegisterPackageLinderdaumCoreClass91(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGLVertexArray>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGLVertexArray,Mtd)
   _RM__(AfterConstruction)
   _RM__(FeedIntoGPU)
   _RM__(FeedIntoGPUInstanced)
   _RM__(CommitChanges)
   _RM__(SetVertexAttribs)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iVertexArray" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/Input/Input.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iInputDevice
            // Adding abstract: GetName
            // Adding abstract: Poll
            // Adding abstract: Start
            // Adding abstract: IsStarted
            // Adding abstract: Stop
            // Adding abstract: GetNumAxes
            // Adding abstract: SetAxisRange
            // Adding abstract: SetAxisDeadZone
            // Adding abstract: SetAxisSaturation
            // Adding abstract: GetAxisValue
            // Adding abstract: GetAxisName
            // Adding abstract: SetAxisValue
            // Adding abstract: GetKeyName
            // Adding abstract: IsPressed
            // Adding abstract: GetNumKeys
            // Adding abstract: SetKeyState
         // Class: clGPSDevice
            // Overriding abstract: GetName
            // Overriding abstract: Poll
            // Overriding abstract: Start
            // Overriding abstract: IsStarted
            // Overriding abstract: Stop
            // Overriding abstract: GetNumAxes
            // Overriding abstract: SetAxisRange
            // Overriding abstract: SetAxisDeadZone
            // Overriding abstract: SetAxisSaturation
            // Overriding abstract: GetAxisValue
            // Overriding abstract: GetAxisName
            // Overriding abstract: SetAxisValue
            // Overriding abstract: GetKeyName
            // Overriding abstract: IsPressed
            // Overriding abstract: GetNumKeys
            // Overriding abstract: SetKeyState

void RegisterPackageLinderdaumCoreClass92(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGPSDevice>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGPSDevice,Mtd)
   _RM__(GetName)
   _RM__(Poll)
   _RM__(Start)
   _RM__(IsStarted)
   _RM__(Stop)
   _RM__(GetNumAxes)
   _RM__(SetAxisRange)
   _RM__(SetAxisDeadZone)
   _RM__(SetAxisSaturation)
   _RM__(GetValues)
   _RM__(GetAxisValue)
   _RM__(GetAxisName)
   _RM__(SetAxisValue)
   _RM__(GetKeyName)
   _RM__(IsPressed)
   _RM__(GetNumKeys)
   _RM__(SetKeyState)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iInputDevice" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_BorderPanel.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBorderPanel

void RegisterPackageLinderdaumCoreClass93(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIBorderPanel>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIBorderPanel,Event_Registered )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_Bubbles.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIBubbles

void RegisterPackageLinderdaumCoreClass94(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIBubbles>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIBubbles,Event_Registered )
   REG_CLS_MTD( clGUIBubbles,Event_Timer )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_CheckBox.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: iGUIButton
         // Class: iGUICheckable
         // Class: clGUICheckBox
// SCALAR_PROPERTY_LOAD__SETTER
// CheckedShader
// ""
// clGUICheckBox
// SetCheckedShaderName
// EMPTY_CONVERTER

bool LoadScalarField_clGUICheckBox_CheckedShader_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUICheckBox*>(Obj))->SetCheckedShaderName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// CheckedShader
// ""
// clGUICheckBox
// GetCheckedShaderName
// EMPTY_CONVERTER

bool SaveScalarField_clGUICheckBox_CheckedShader_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUICheckBox*>(Obj)->GetCheckedShaderName() ); 
   *Result = new mlNode("CheckedShader" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}


// SCALAR_PROPERTY_LOAD__SETTER
// UnCheckedShader
// ""
// clGUICheckBox
// SetUnCheckedShaderName
// EMPTY_CONVERTER

bool LoadScalarField_clGUICheckBox_UnCheckedShader_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUICheckBox*>(Obj))->SetUnCheckedShaderName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// UnCheckedShader
// ""
// clGUICheckBox
// GetUnCheckedShaderName
// EMPTY_CONVERTER

bool SaveScalarField_clGUICheckBox_UnCheckedShader_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUICheckBox*>(Obj)->GetUnCheckedShaderName() ); 
   *Result = new mlNode("UnCheckedShader" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass95(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUICheckBox>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUICheckBox,AfterConstruction )
   REG_CLS_MTD( clGUICheckBox,Event_Registered )
   REG_CLS_MTD( clGUICheckBox,Event_MouseLeft )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(CheckedShader, clGUICheckBox, CheckedShader)

   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(UnCheckedShader, clGUICheckBox, UnCheckedShader)

   StaticClass->SetSuperClassName( "iGUICheckable" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_ColorDial.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIColorDial
// SCALAR_PROPERTY_LOAD__FIELD
// OutVarName
// FOutVarName
// clGUIColorDial
// FOutVarName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIColorDial_FOutVarName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIColorDial*>(Obj))->FOutVarName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// OutVarName
// FOutVarName
// clGUIColorDial
// FOutVarName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIColorDial_FOutVarName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIColorDial*>(Obj)->FOutVarName); 
   *Result = new mlNode("OutVarName" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// RMin
// FRMin
// clGUIColorDial
// FRMin
// LStr::ToFloat

bool LoadScalarField_clGUIColorDial_FRMin_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIColorDial*>(Obj))->FRMin=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// RMin
// FRMin
// clGUIColorDial
// FRMin
// LStr::ToStrEpsilon

bool SaveScalarField_clGUIColorDial_FRMin_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUIColorDial*>(Obj)->FRMin); 
   *Result = new mlNode("RMin" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}


// SCALAR_PROPERTY_LOAD__FIELD
// RMax
// FRMax
// clGUIColorDial
// FRMax
// LStr::ToFloat

bool LoadScalarField_clGUIColorDial_FRMax_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIColorDial*>(Obj))->FRMax=LStr::ToFloat( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// RMax
// FRMax
// clGUIColorDial
// FRMax
// LStr::ToStrEpsilon

bool SaveScalarField_clGUIColorDial_FRMax_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =LStr::ToStrEpsilon(dynamic_cast<clGUIColorDial*>(Obj)->FRMax); 
   *Result = new mlNode("RMax" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass96(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIColorDial>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIColorDial,AfterConstruction )
   REG_CLS_MTD( clGUIColorDial,Event_MouseInside )
   REG_CLS_MTD( clGUIColorDial,Event_MouseLeft )
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FOutVarName, clGUIColorDial, OutVarName)

   REGISTER_PROPERTY__SCALAR_FIELD(FRMin, clGUIColorDial, RMin)

   REGISTER_PROPERTY__SCALAR_FIELD(FRMax, clGUIColorDial, RMax)

   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/Transitions/I_CrossFade.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPage
         // Class: clGUITransitionPage
         // Class: clGUICrossFadePage

void RegisterPackageLinderdaumCoreClass97(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUICrossFadePage>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUICrossFadePage,SetTransitionPercent )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUITransitionPage" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/GUIDesktop.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIDesktop

void RegisterPackageLinderdaumCoreClass98(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIDesktop>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   REG_CLS_MTD( clGUIDesktop,AfterConstruction )
   REG_CLS_MTD( clGUIDesktop,GetOpacity )
   REG_CLS_MTD( clGUIDesktop,RenderCursor )
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "iGUIView" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_DialogWindow.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIDialogWindow
// SCALAR_PROPERTY_LOAD__SETTER
// ComposerShader
// ""
// clGUIDialogWindow
// SetWindowComposerShaderName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIDialogWindow_ComposerShader_SETTER(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIDialogWindow*>(Obj))->SetWindowComposerShaderName(EMPTY_CONVERTER( Node->getValue() ) );
   return true; 
}

// SCALAR_PROPERTY_SAVE__GETTER
// ComposerShader
// ""
// clGUIDialogWindow
// GetWindowComposerShaderName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIDialogWindow_ComposerShader_GETTER(iObject* Obj, mlNode** Result)   
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIDialogWindow*>(Obj)->GetWindowComposerShaderName() ); 
   *Result = new mlNode("ComposerShader" , Value ); 
   /* *Result->setValue( Value ); */   
   return true; 
}




void RegisterPackageLinderdaumCoreClass99(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIDialogWindow>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIDialogWindow,Mtd)
   _RM__(ContainsResizeCorner)
   _RM__(PreRender)
   _RM__(PostRender)
   _RM__(IsViewDockable)
   _RM__(IsViewDraggable)
   _RM__(IsViewSizeable)
   _RM__(SetWindowComposerShaderName)
   _RM__(GetWindowComposerShaderName)
   _RM__(Event_Registered)
   _RM__(Event_MouseInside)
   _RM__(Event_MouseOutside)
   _RM__(Event_LDoubleClick)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_GETTER_SETTER(ComposerShader, clGUIDialogWindow, ComposerShader)

   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_SceneView.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIEditorSceneView

void RegisterPackageLinderdaumCoreClass100(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIEditorSceneView>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIEditorSceneView,Mtd)
   _RM__(AfterConstruction)
   _RM__(SetProjectorForPart)
   _RM__(SetTechniqueForPart)
   _RM__(SetEditor)
   _RM__(SetVisualScene)
   _RM__(GetLayout)
   _RM__(SetLayout)
   _RM__(UpdateView)
   _RM__(SetUpdateFlagForAll)
   _RM__(MaximizePart)
   _RM__(Event_Key)
   _RM__(Event_MouseLeft)
   _RM__(Event_MouseRight)
   _RM__(ShowAll)
   _RM__(SplitScreen)
   _RM__(Tile)
   #undef _RM__
#endif // _DISABLE_METHODS_
   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#include "Linderdaum/GUI/ComCtl/I_FSGraph.h"
         // Class: iIntrusiveCounter
         // Class: iObject
         // Class: iGestureResponder
         // Class: iGUIResponder
         // Class: iGUIRegion
         // Class: iGUIViewRenderer
         // Class: iGUIView
         // Class: clGUIPanel
         // Class: clGUIFullScreenGraph
// SCALAR_PROPERTY_LOAD__FIELD
// ReadVarName
// FReadVarName
// clGUIFullScreenGraph
// FReadVarName
// EMPTY_CONVERTER

bool LoadScalarField_clGUIFullScreenGraph_FReadVarName_FIELD(mlNode* Node, iObject* Obj) 
{
   (dynamic_cast<clGUIFullScreenGraph*>(Obj))->FReadVarName=EMPTY_CONVERTER( Node->getValue() );
   return true; 
}

// SCALAR_PROPERTY_SAVE__FIELD
// ReadVarName
// FReadVarName
// clGUIFullScreenGraph
// FReadVarName
// EMPTY_CONVERTER

bool SaveScalarField_clGUIFullScreenGraph_FReadVarName_FIELD(iObject* Obj, mlNode** Result) 
{  
   LString Value =EMPTY_CONVERTER(dynamic_cast<clGUIFullScreenGraph*>(Obj)->FReadVarName); 
   *Result = new mlNode("ReadVarName" , Value); 
   /* *Result->setValue( Value );*/   
   return true; 
}




void RegisterPackageLinderdaumCoreClass101(sEnvironment* Env)
{
   iStaticClass* StaticClass = new clNativeStaticClass<clGUIFullScreenGraph>;

   StaticClass->Env = Env;

#if !defined(_DISABLE_METHODS_)
   #define _RM__(Mtd) REG_CLS_MTD(clGUIFullScreenGraph,Mtd)
   _RM__(Contains)
   _RM__(ContainsCaption)
   _RM__(ContainsResizeCorner)
   _RM__(ContainsCloseButton)
   _RM__(CanFocus)
   _RM__(Event_Registered)
   _RM__(Event_Timer)
   #undef _RM__
#endif // _DISABLE_METHODS_
   REGISTER_PROPERTY__SCALAR_FIELD(FReadVarName, clGUIFullScreenGraph, ReadVarName)

   StaticClass->SetSuperClassName( "clGUIPanel" );

   Env->Linker->RegisterStaticClass( StaticClass );
}

#undef REG_CLS_MTD

/*
 * 16/01/2012
     Autogenerated via LinderScript Database Compiler 0.9.24
*/
