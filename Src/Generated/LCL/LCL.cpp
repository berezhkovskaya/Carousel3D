
// Autogenerated by CLExtractor 0.5.92 (C) Sergey Kosarevsky
// Part of Linderdaum Engine
// http://www.linderdaum.com

#include "LCL.h"

#include "Engine.h"
#include "Utils/Library.h"

PFNclGetPlatformIDs*                    clGetPlatformIDs;
PFNclGetPlatformInfo*                   clGetPlatformInfo;
PFNclGetDeviceIDs*                      clGetDeviceIDs;
PFNclGetDeviceInfo*                     clGetDeviceInfo;
PFNclCreateContext*                     clCreateContext;
PFNclCreateContextFromType*             clCreateContextFromType;
PFNclRetainContext*                     clRetainContext;
PFNclReleaseContext*                    clReleaseContext;
PFNclGetContextInfo*                    clGetContextInfo;
PFNclCreateCommandQueue*                clCreateCommandQueue;
PFNclRetainCommandQueue*                clRetainCommandQueue;
PFNclReleaseCommandQueue*               clReleaseCommandQueue;
PFNclGetCommandQueueInfo*               clGetCommandQueueInfo;
PFNclSetCommandQueueProperty*           clSetCommandQueueProperty;
PFNclCreateBuffer*                      clCreateBuffer;
PFNclCreateImage2D*                     clCreateImage2D;
PFNclCreateImage3D*                     clCreateImage3D;
PFNclRetainMemObject*                   clRetainMemObject;
PFNclReleaseMemObject*                  clReleaseMemObject;
PFNclGetSupportedImageFormats*          clGetSupportedImageFormats;
PFNclGetMemObjectInfo*                  clGetMemObjectInfo;
PFNclGetImageInfo*                      clGetImageInfo;
PFNclCreateSampler*                     clCreateSampler;
PFNclRetainSampler*                     clRetainSampler;
PFNclReleaseSampler*                    clReleaseSampler;
PFNclGetSamplerInfo*                    clGetSamplerInfo;
PFNclCreateProgramWithSource*           clCreateProgramWithSource;
PFNclCreateProgramWithBinary*           clCreateProgramWithBinary;
PFNclRetainProgram*                     clRetainProgram;
PFNclReleaseProgram*                    clReleaseProgram;
PFNclBuildProgram*                      clBuildProgram;
PFNclUnloadCompiler*                    clUnloadCompiler;
PFNclGetProgramInfo*                    clGetProgramInfo;
PFNclGetProgramBuildInfo*               clGetProgramBuildInfo;
PFNclCreateKernel*                      clCreateKernel;
PFNclCreateKernelsInProgram*            clCreateKernelsInProgram;
PFNclRetainKernel*                      clRetainKernel;
PFNclReleaseKernel*                     clReleaseKernel;
PFNclSetKernelArg*                      clSetKernelArg;
PFNclGetKernelInfo*                     clGetKernelInfo;
PFNclGetKernelWorkGroupInfo*            clGetKernelWorkGroupInfo;
PFNclWaitForEvents*                     clWaitForEvents;
PFNclGetEventInfo*                      clGetEventInfo;
PFNclRetainEvent*                       clRetainEvent;
PFNclReleaseEvent*                      clReleaseEvent;
PFNclGetEventProfilingInfo*             clGetEventProfilingInfo;
PFNclFlush*                             clFlush;
PFNclFinish*                            clFinish;
PFNclEnqueueReadBuffer*                 clEnqueueReadBuffer;
PFNclEnqueueWriteBuffer*                clEnqueueWriteBuffer;
PFNclEnqueueCopyBuffer*                 clEnqueueCopyBuffer;
PFNclEnqueueReadImage*                  clEnqueueReadImage;
PFNclEnqueueWriteImage*                 clEnqueueWriteImage;
PFNclEnqueueCopyImage*                  clEnqueueCopyImage;
PFNclEnqueueCopyImageToBuffer*          clEnqueueCopyImageToBuffer;
PFNclEnqueueCopyBufferToImage*          clEnqueueCopyBufferToImage;
PFNclEnqueueMapBuffer*                  clEnqueueMapBuffer;
PFNclEnqueueMapImage*                   clEnqueueMapImage;
PFNclEnqueueUnmapMemObject*             clEnqueueUnmapMemObject;
PFNclEnqueueNDRangeKernel*              clEnqueueNDRangeKernel;
PFNclEnqueueTask*                       clEnqueueTask;
PFNclEnqueueNativeKernel*               clEnqueueNativeKernel;
PFNclEnqueueMarker*                     clEnqueueMarker;
PFNclEnqueueWaitForEvents*              clEnqueueWaitForEvents;
PFNclEnqueueBarrier*                    clEnqueueBarrier;
PFNclGetExtensionFunctionAddress*       clGetExtensionFunctionAddress;


// user defined vars go here

LCL::clCLExtRetriever::clCLExtRetriever()
{
	// load OpenCL library
	clLibrary* Lib = new clLibrary();

	if ( !Lib->Load( "OpenCl.dll" ) ) { return; }

	clGetPlatformIDs = ( PFNclGetPlatformIDs* )Lib->GetProcAddress( "clGetPlatformIDs" );
	clGetPlatformInfo = ( PFNclGetPlatformInfo* )Lib->GetProcAddress( "clGetPlatformInfo" );
	clGetDeviceIDs = ( PFNclGetDeviceIDs* )Lib->GetProcAddress( "clGetDeviceIDs" );
	clGetDeviceInfo = ( PFNclGetDeviceInfo* )Lib->GetProcAddress( "clGetDeviceInfo" );
	clCreateContext = ( PFNclCreateContext* )Lib->GetProcAddress( "clCreateContext" );
	clCreateContextFromType = ( PFNclCreateContextFromType* )Lib->GetProcAddress( "clCreateContextFromType" );
	clRetainContext = ( PFNclRetainContext* )Lib->GetProcAddress( "clRetainContext" );
	clReleaseContext = ( PFNclReleaseContext* )Lib->GetProcAddress( "clReleaseContext" );
	clGetContextInfo = ( PFNclGetContextInfo* )Lib->GetProcAddress( "clGetContextInfo" );
	clCreateCommandQueue = ( PFNclCreateCommandQueue* )Lib->GetProcAddress( "clCreateCommandQueue" );
	clRetainCommandQueue = ( PFNclRetainCommandQueue* )Lib->GetProcAddress( "clRetainCommandQueue" );
	clReleaseCommandQueue = ( PFNclReleaseCommandQueue* )Lib->GetProcAddress( "clReleaseCommandQueue" );
	clGetCommandQueueInfo = ( PFNclGetCommandQueueInfo* )Lib->GetProcAddress( "clGetCommandQueueInfo" );
	clSetCommandQueueProperty = ( PFNclSetCommandQueueProperty* )Lib->GetProcAddress( "clSetCommandQueueProperty" );
	clCreateBuffer = ( PFNclCreateBuffer* )Lib->GetProcAddress( "clCreateBuffer" );
	clCreateImage2D = ( PFNclCreateImage2D* )Lib->GetProcAddress( "clCreateImage2D" );
	clCreateImage3D = ( PFNclCreateImage3D* )Lib->GetProcAddress( "clCreateImage3D" );
	clRetainMemObject = ( PFNclRetainMemObject* )Lib->GetProcAddress( "clRetainMemObject" );
	clReleaseMemObject = ( PFNclReleaseMemObject* )Lib->GetProcAddress( "clReleaseMemObject" );
	clGetSupportedImageFormats = ( PFNclGetSupportedImageFormats* )Lib->GetProcAddress( "clGetSupportedImageFormats" );
	clGetMemObjectInfo = ( PFNclGetMemObjectInfo* )Lib->GetProcAddress( "clGetMemObjectInfo" );
	clGetImageInfo = ( PFNclGetImageInfo* )Lib->GetProcAddress( "clGetImageInfo" );
	clCreateSampler = ( PFNclCreateSampler* )Lib->GetProcAddress( "clCreateSampler" );
	clRetainSampler = ( PFNclRetainSampler* )Lib->GetProcAddress( "clRetainSampler" );
	clReleaseSampler = ( PFNclReleaseSampler* )Lib->GetProcAddress( "clReleaseSampler" );
	clGetSamplerInfo = ( PFNclGetSamplerInfo* )Lib->GetProcAddress( "clGetSamplerInfo" );
	clCreateProgramWithSource = ( PFNclCreateProgramWithSource* )Lib->GetProcAddress( "clCreateProgramWithSource" );
	clCreateProgramWithBinary = ( PFNclCreateProgramWithBinary* )Lib->GetProcAddress( "clCreateProgramWithBinary" );
	clRetainProgram = ( PFNclRetainProgram* )Lib->GetProcAddress( "clRetainProgram" );
	clReleaseProgram = ( PFNclReleaseProgram* )Lib->GetProcAddress( "clReleaseProgram" );
	clBuildProgram = ( PFNclBuildProgram* )Lib->GetProcAddress( "clBuildProgram" );
	clUnloadCompiler = ( PFNclUnloadCompiler* )Lib->GetProcAddress( "clUnloadCompiler" );
	clGetProgramInfo = ( PFNclGetProgramInfo* )Lib->GetProcAddress( "clGetProgramInfo" );
	clGetProgramBuildInfo = ( PFNclGetProgramBuildInfo* )Lib->GetProcAddress( "clGetProgramBuildInfo" );
	clCreateKernel = ( PFNclCreateKernel* )Lib->GetProcAddress( "clCreateKernel" );
	clCreateKernelsInProgram = ( PFNclCreateKernelsInProgram* )Lib->GetProcAddress( "clCreateKernelsInProgram" );
	clRetainKernel = ( PFNclRetainKernel* )Lib->GetProcAddress( "clRetainKernel" );
	clReleaseKernel = ( PFNclReleaseKernel* )Lib->GetProcAddress( "clReleaseKernel" );
	clSetKernelArg = ( PFNclSetKernelArg* )Lib->GetProcAddress( "clSetKernelArg" );
	clGetKernelInfo = ( PFNclGetKernelInfo* )Lib->GetProcAddress( "clGetKernelInfo" );
	clGetKernelWorkGroupInfo = ( PFNclGetKernelWorkGroupInfo* )Lib->GetProcAddress( "clGetKernelWorkGroupInfo" );
	clWaitForEvents = ( PFNclWaitForEvents* )Lib->GetProcAddress( "clWaitForEvents" );
	clGetEventInfo = ( PFNclGetEventInfo* )Lib->GetProcAddress( "clGetEventInfo" );
	clRetainEvent = ( PFNclRetainEvent* )Lib->GetProcAddress( "clRetainEvent" );
	clReleaseEvent = ( PFNclReleaseEvent* )Lib->GetProcAddress( "clReleaseEvent" );
	clGetEventProfilingInfo = ( PFNclGetEventProfilingInfo* )Lib->GetProcAddress( "clGetEventProfilingInfo" );
	clFlush = ( PFNclFlush* )Lib->GetProcAddress( "clFlush" );
	clFinish = ( PFNclFinish* )Lib->GetProcAddress( "clFinish" );
	clEnqueueReadBuffer = ( PFNclEnqueueReadBuffer* )Lib->GetProcAddress( "clEnqueueReadBuffer" );
	clEnqueueWriteBuffer = ( PFNclEnqueueWriteBuffer* )Lib->GetProcAddress( "clEnqueueWriteBuffer" );
	clEnqueueCopyBuffer = ( PFNclEnqueueCopyBuffer* )Lib->GetProcAddress( "clEnqueueCopyBuffer" );
	clEnqueueReadImage = ( PFNclEnqueueReadImage* )Lib->GetProcAddress( "clEnqueueReadImage" );
	clEnqueueWriteImage = ( PFNclEnqueueWriteImage* )Lib->GetProcAddress( "clEnqueueWriteImage" );
	clEnqueueCopyImage = ( PFNclEnqueueCopyImage* )Lib->GetProcAddress( "clEnqueueCopyImage" );
	clEnqueueCopyImageToBuffer = ( PFNclEnqueueCopyImageToBuffer* )Lib->GetProcAddress( "clEnqueueCopyImageToBuffer" );
	clEnqueueCopyBufferToImage = ( PFNclEnqueueCopyBufferToImage* )Lib->GetProcAddress( "clEnqueueCopyBufferToImage" );
	clEnqueueMapBuffer = ( PFNclEnqueueMapBuffer* )Lib->GetProcAddress( "clEnqueueMapBuffer" );
	clEnqueueMapImage = ( PFNclEnqueueMapImage* )Lib->GetProcAddress( "clEnqueueMapImage" );
	clEnqueueUnmapMemObject = ( PFNclEnqueueUnmapMemObject* )Lib->GetProcAddress( "clEnqueueUnmapMemObject" );
	clEnqueueNDRangeKernel = ( PFNclEnqueueNDRangeKernel* )Lib->GetProcAddress( "clEnqueueNDRangeKernel" );
	clEnqueueTask = ( PFNclEnqueueTask* )Lib->GetProcAddress( "clEnqueueTask" );
	clEnqueueNativeKernel = ( PFNclEnqueueNativeKernel* )Lib->GetProcAddress( "clEnqueueNativeKernel" );
	clEnqueueMarker = ( PFNclEnqueueMarker* )Lib->GetProcAddress( "clEnqueueMarker" );
	clEnqueueWaitForEvents = ( PFNclEnqueueWaitForEvents* )Lib->GetProcAddress( "clEnqueueWaitForEvents" );
	clEnqueueBarrier = ( PFNclEnqueueBarrier* )Lib->GetProcAddress( "clEnqueueBarrier" );
	clGetExtensionFunctionAddress = ( PFNclGetExtensionFunctionAddress* )Lib->GetProcAddress( "clGetExtensionFunctionAddress" );
}

/*
 * 21/04/2010
     Initial generation
*/
