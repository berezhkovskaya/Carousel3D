
// Autogenerated by GLExtractor 0.5.99b (gl3 mode) (C) Sergey Kosarevsky
// Part of Linderdaum Engine
// http://www.linderdaum.com

#ifndef _LGL_
#define _LGL_

#include "Platform.h"
#include "LString.h"

#if defined OS_WINDOWS
#  include <windows.h>
#  undef min
#  undef max
#  include "ExtLibs/GL/gl3.h"
#  include "ExtLibs/GL/wglext.h"
#elif defined OS_ANDROID
#  if defined( ANDROID9 )
// this is only for android-9 target with NativeActivity support
#     include <EGL/egl.h>
typedef EGLDisplay  LDeviceHandle;
typedef EGLSurface  LWindowHandle;
#else
typedef void* LDeviceHandle;
typedef void* LWindowHandle;
#  endif // ANDROID9
#  include <GLES2/gl2.h>
#  include <GLES2/gl2ext.h>
#elif defined OS_LINUX
#  include <X11/Xlib.h>
#  include <X11/Xutil.h>
#  include <GL/glx.h>
#  include "ExtLibs/GL/gl3.h"
#  include "ExtLibs/GL/glxext.h"
#endif // OS_ANDROID

#if defined(OS_WINDOWS)
#  define DEVICE_CONTEXT_TYPE HDC
#  define GL_CONTEXT_TYPE     HGLRC
#elif defined(OS_ANDROID)
#  if defined( ANDROID9 )
#     define DEVICE_CONTEXT_TYPE EGLDisplay
#     define GL_CONTEXT_TYPE     EGLContext
#  else
#     define DEVICE_CONTEXT_TYPE void*
#     define GL_CONTEXT_TYPE     void*
#  endif // ANDROID9
#elif defined(OS_LINUX)
#  define DEVICE_CONTEXT_TYPE Display*
#  define GL_CONTEXT_TYPE     GLXContext
#else
#  error Define OS!
#endif

//extern sLGLAPI LGL3;

#if defined(OS_LINUX)
#  if defined(OS_ANDROID)
typedef void* ( * PFNwglGetProcAddress )( const char* );
typedef GL_CONTEXT_TYPE ( * PFNwglGetCurrentContext )( void );
extern PFNwglGetCurrentContext lglGetCurrentContext;
#else
// pure linux
typedef void* ( * PFNglXGetProcAddress )( const char* );
#  endif
#endif // linux

#if defined(OS_WINDOWS)
typedef HGLRC ( WINAPI* PFNwglCreateContext )( HDC );
typedef PROC  ( WINAPI* PFNwglGetProcAddress )( LPCSTR );
typedef BOOL  ( WINAPI* PFNwglMakeCurrent )( HDC, HGLRC );
typedef BOOL  ( WINAPI* PFNwglDeleteContext )( HGLRC );
typedef HGLRC ( WINAPI* PFNwglGetCurrentContext )( void );
#endif // OS_WINDOWS

#include "Generated/LGL/LGLAPI.h"

//

/*
#ifdef OS_WINDOWS

// LV: WINGDIAPI (a.k.a. __declspec(dllimport) ) are meaningless for typedefs and hence produce a warning with x86_64-mingw-gcc
typedef HGLRC ( WINAPI* PFNwglCreateContext )( HDC );
typedef PROC  ( WINAPI* PFNwglGetProcAddress )( LPCSTR );
typedef BOOL  ( WINAPI* PFNwglMakeCurrent )( HDC, HGLRC );
typedef BOOL  ( WINAPI* PFNwglDeleteContext )( HGLRC );
typedef HGLRC ( WINAPI* PFNwglGetCurrentContext )( void );

extern PFNwglCreateContext     lglCreateContext;
extern PFNwglGetProcAddress    lglGetProcAddress;
extern PFNwglMakeCurrent       lglMakeCurrent;
extern PFNwglDeleteContext     lglDeleteContext;
extern PFNwglGetCurrentContext lglGetCurrentContext;

#endif // OS_WINDOWS
*/
class clLibrary;

enum LGLErrorCode
{
	LGLError_Ok,
	LGLError_NoPixelFormat,
	LGLError_NoGLVersion,
	LGLError_CantMakeCurrent,
	LGLError_NoFramebufferConfig,
	LGLError_NoWindow
};

/// Multiplatform OpenGL 3.x / OpenGL ES 2.0 initialization
namespace LGL
{
	/// Loader of OpenGL extensions
	class clGLExtRetriever
	{
	public:
		//
		// clGLExtRetriever
		//
		clGLExtRetriever();
		~clGLExtRetriever()
		{
			Unload();
		};
		void GetAPI( sLGLAPI* LGL3 ) const;
		void Reload( sLGLAPI* LGL3, bool UpdateExtensionsFlags );
		void Unload();
		LString GetError()
		{
			LString Error = FError;
			FError.clear();
			return Error;
		};
		LGLErrorCode GetErrorCode() const { return FErrorCode; };
		//
		bool  ChooseAndSetPixelFormat( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, int BitsPerPixel, int ZBufferBits, int StencilBits, int Multisample );
		GL_CONTEXT_TYPE CreateContext( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, int VersionMajor, int VersionMinor, bool DebugContext );
		void  DeleteContext( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, GL_CONTEXT_TYPE RenderContext );
		GL_CONTEXT_TYPE CreateContextFull( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, int BitsPerPixel, int ZBufferBits, int StencilBits, int Multisample, int VersionMajor, int VersionMinor, bool DebugContext );
		GL_CONTEXT_TYPE MakeCurrent( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, GL_CONTEXT_TYPE RenderContext );
	private:
		void* GetGLProc( sLGLAPI* LGL3, const char* Name ) const;
		LString      FError;
		LGLErrorCode FErrorCode;
		clLibrary* FLib;
	};
	//
	LString GetExtensionsString( sLGLAPI* LGL3 );
	bool    IsExtensionSupported( sLGLAPI* LGL3, const LString& ExtName );
};

#endif

/*
 * 14/01/2011
     Removed all global pointers to GL functions
 * 16/09/2010
     WGL guarded with #ifdef OS_WINDOWS
 * 19/08/2010
     Initial GLX initialization code added
 * 16/08/2010
     More utility code moved in
 * 09/08/2010
     OpenGL 4.1 and extensions
 * 23/03/2010
     Renegerated with gl3.h support
 * 22/02/2010
     Regenerated (old extensions removed)
 * 10/02/2010
     Regenerated (GL_ARB_vertex_array_object added)
 * 06/02/2010
     Regenerated
 * 08/10/2008
     OpenGL 3 initial support
 * 10/09/2007
     Regenerated
 * 26/08/2007
     Regenerated
 * 06/01/2007
     Stubs added
 * 13/11/2006
     Regenerated
 * 14/11/2005
     Regenerated
 * 26/06/2005
     Regenerated
 * 28/03/2005
     Regenerated
*/
